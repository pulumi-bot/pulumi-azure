# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class SpringCloudServiceConfigServerGitSetting(dict):
    http_basic_auth: Optional['outputs.SpringCloudServiceConfigServerGitSettingHttpBasicAuth'] = pulumi.output_property("httpBasicAuth")
    """
    A `http_basic_auth` block as defined below.
    """
    label: Optional[str] = pulumi.output_property("label")
    """
    The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
    """
    repositories: Optional[List['outputs.SpringCloudServiceConfigServerGitSettingRepository']] = pulumi.output_property("repositories")
    """
    One or more `repository` blocks as defined below.
    """
    search_paths: Optional[List[str]] = pulumi.output_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auth: Optional['outputs.SpringCloudServiceConfigServerGitSettingSshAuth'] = pulumi.output_property("sshAuth")
    """
    A `ssh_auth` block as defined below.
    """
    uri: str = pulumi.output_property("uri")
    """
    The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceConfigServerGitSettingHttpBasicAuth(dict):
    password: str = pulumi.output_property("password")
    """
    The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """
    username: str = pulumi.output_property("username")
    """
    The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceConfigServerGitSettingRepository(dict):
    http_basic_auth: Optional['outputs.SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth'] = pulumi.output_property("httpBasicAuth")
    """
    A `http_basic_auth` block as defined below.
    """
    label: Optional[str] = pulumi.output_property("label")
    """
    The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
    """
    name: str = pulumi.output_property("name")
    """
    A name to identify on the Git repository, required only if repos exists.
    """
    patterns: Optional[List[str]] = pulumi.output_property("patterns")
    """
    An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
    """
    search_paths: Optional[List[str]] = pulumi.output_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auth: Optional['outputs.SpringCloudServiceConfigServerGitSettingRepositorySshAuth'] = pulumi.output_property("sshAuth")
    """
    A `ssh_auth` block as defined below.
    """
    uri: str = pulumi.output_property("uri")
    """
    The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth(dict):
    password: str = pulumi.output_property("password")
    """
    The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """
    username: str = pulumi.output_property("username")
    """
    The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceConfigServerGitSettingRepositorySshAuth(dict):
    host_key: Optional[str] = pulumi.output_property("hostKey")
    """
    The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
    """
    host_key_algorithm: Optional[str] = pulumi.output_property("hostKeyAlgorithm")
    """
    The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
    """
    private_key: str = pulumi.output_property("privateKey")
    """
    The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
    """
    strict_host_key_checking_enabled: Optional[bool] = pulumi.output_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceConfigServerGitSettingSshAuth(dict):
    host_key: Optional[str] = pulumi.output_property("hostKey")
    """
    The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
    """
    host_key_algorithm: Optional[str] = pulumi.output_property("hostKeyAlgorithm")
    """
    The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
    """
    private_key: str = pulumi.output_property("privateKey")
    """
    The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
    """
    strict_host_key_checking_enabled: Optional[bool] = pulumi.output_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SpringCloudServiceTrace(dict):
    instrumentation_key: str = pulumi.output_property("instrumentationKey")
    """
    The Instrumentation Key used for Application Insights.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSetting(dict):
    http_basic_auths: List['outputs.GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth'] = pulumi.output_property("httpBasicAuths")
    """
    A `http_basic_auth` block as defined below.
    """
    label: str = pulumi.output_property("label")
    """
    The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
    """
    repositories: List['outputs.GetSpringCloudServiceConfigServerGitSettingRepository'] = pulumi.output_property("repositories")
    """
    One or more `repository` blocks as defined below.
    """
    search_paths: List[str] = pulumi.output_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auths: List['outputs.GetSpringCloudServiceConfigServerGitSettingSshAuth'] = pulumi.output_property("sshAuths")
    """
    A `ssh_auth` block as defined below.
    """
    uri: str = pulumi.output_property("uri")
    """
    The URI of the Git repository
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth(dict):
    password: str = pulumi.output_property("password")
    """
    The password used to access the Http Basic Authentication Git repository server.
    """
    username: str = pulumi.output_property("username")
    """
    The username used to access the Http Basic Authentication Git repository server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSettingRepository(dict):
    http_basic_auths: List['outputs.GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth'] = pulumi.output_property("httpBasicAuths")
    """
    A `http_basic_auth` block as defined below.
    """
    label: str = pulumi.output_property("label")
    """
    The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
    """
    name: str = pulumi.output_property("name")
    """
    Specifies The name of the Spring Cloud Service resource.
    """
    patterns: List[str] = pulumi.output_property("patterns")
    """
    An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
    """
    search_paths: List[str] = pulumi.output_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auths: List['outputs.GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth'] = pulumi.output_property("sshAuths")
    """
    A `ssh_auth` block as defined below.
    """
    uri: str = pulumi.output_property("uri")
    """
    The URI of the Git repository
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth(dict):
    password: str = pulumi.output_property("password")
    """
    The password used to access the Http Basic Authentication Git repository server.
    """
    username: str = pulumi.output_property("username")
    """
    The username used to access the Http Basic Authentication Git repository server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth(dict):
    host_key: str = pulumi.output_property("hostKey")
    """
    The host key of the Git repository server.
    """
    host_key_algorithm: str = pulumi.output_property("hostKeyAlgorithm")
    """
    The host key algorithm.
    """
    private_key: str = pulumi.output_property("privateKey")
    """
    The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
    """
    strict_host_key_checking_enabled: bool = pulumi.output_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSpringCloudServiceConfigServerGitSettingSshAuth(dict):
    host_key: str = pulumi.output_property("hostKey")
    """
    The host key of the Git repository server.
    """
    host_key_algorithm: str = pulumi.output_property("hostKeyAlgorithm")
    """
    The host key algorithm.
    """
    private_key: str = pulumi.output_property("privateKey")
    """
    The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
    """
    strict_host_key_checking_enabled: bool = pulumi.output_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


