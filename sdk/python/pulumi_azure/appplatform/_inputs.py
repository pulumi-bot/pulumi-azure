# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'SpringCloudServiceConfigServerGitSettingArgs',
    'SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs',
    'SpringCloudServiceConfigServerGitSettingRepositoryArgs',
    'SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs',
    'SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs',
    'SpringCloudServiceConfigServerGitSettingSshAuthArgs',
    'SpringCloudServiceTraceArgs',
]

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingArgs:
    uri: pulumi.Input[str] = pulumi.input_property("uri")
    """
    The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
    """
    http_basic_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs']] = pulumi.input_property("httpBasicAuth")
    """
    A `http_basic_auth` block as defined below.
    """
    label: Optional[pulumi.Input[str]] = pulumi.input_property("label")
    """
    The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
    """
    repositories: Optional[pulumi.Input[List[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryArgs']]]] = pulumi.input_property("repositories")
    """
    One or more `repository` blocks as defined below.
    """
    search_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingSshAuthArgs']] = pulumi.input_property("sshAuth")
    """
    A `ssh_auth` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, uri: pulumi.Input[str], http_basic_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs']] = None, label: Optional[pulumi.Input[str]] = None, repositories: Optional[pulumi.Input[List[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryArgs']]]] = None, search_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, ssh_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingSshAuthArgs']] = None) -> None:
        """
        :param pulumi.Input[str] uri: The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
        :param pulumi.Input['SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs'] http_basic_auth: A `http_basic_auth` block as defined below.
        :param pulumi.Input[str] label: The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
        :param pulumi.Input[List[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryArgs']]] repositories: One or more `repository` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] search_paths: An array of strings used to search subdirectories of the Git repository.
        :param pulumi.Input['SpringCloudServiceConfigServerGitSettingSshAuthArgs'] ssh_auth: A `ssh_auth` block as defined below.
        """
        __self__.uri = uri
        __self__.http_basic_auth = http_basic_auth
        __self__.label = label
        __self__.repositories = repositories
        __self__.search_paths = search_paths
        __self__.ssh_auth = ssh_auth

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] password: The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
        :param pulumi.Input[str] username: The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
        """
        __self__.password = password
        __self__.username = username

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingRepositoryArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name to identify on the Git repository, required only if repos exists.
    """
    uri: pulumi.Input[str] = pulumi.input_property("uri")
    """
    The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
    """
    http_basic_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs']] = pulumi.input_property("httpBasicAuth")
    """
    A `http_basic_auth` block as defined below.
    """
    label: Optional[pulumi.Input[str]] = pulumi.input_property("label")
    """
    The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
    """
    patterns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("patterns")
    """
    An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
    """
    search_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("searchPaths")
    """
    An array of strings used to search subdirectories of the Git repository.
    """
    ssh_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs']] = pulumi.input_property("sshAuth")
    """
    A `ssh_auth` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], uri: pulumi.Input[str], http_basic_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs']] = None, label: Optional[pulumi.Input[str]] = None, patterns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, search_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, ssh_auth: Optional[pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs']] = None) -> None:
        """
        :param pulumi.Input[str] name: A name to identify on the Git repository, required only if repos exists.
        :param pulumi.Input[str] uri: The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
        :param pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs'] http_basic_auth: A `http_basic_auth` block as defined below.
        :param pulumi.Input[str] label: The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
        :param pulumi.Input[List[pulumi.Input[str]]] patterns: An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
        :param pulumi.Input[List[pulumi.Input[str]]] search_paths: An array of strings used to search subdirectories of the Git repository.
        :param pulumi.Input['SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs'] ssh_auth: A `ssh_auth` block as defined below.
        """
        __self__.name = name
        __self__.uri = uri
        __self__.http_basic_auth = http_basic_auth
        __self__.label = label
        __self__.patterns = patterns
        __self__.search_paths = search_paths
        __self__.ssh_auth = ssh_auth

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] password: The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
        :param pulumi.Input[str] username: The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
        """
        __self__.password = password
        __self__.username = username

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs:
    private_key: pulumi.Input[str] = pulumi.input_property("privateKey")
    """
    The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
    """
    host_key: Optional[pulumi.Input[str]] = pulumi.input_property("hostKey")
    """
    The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
    """
    host_key_algorithm: Optional[pulumi.Input[str]] = pulumi.input_property("hostKeyAlgorithm")
    """
    The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
    """
    strict_host_key_checking_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, private_key: pulumi.Input[str], host_key: Optional[pulumi.Input[str]] = None, host_key_algorithm: Optional[pulumi.Input[str]] = None, strict_host_key_checking_enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] private_key: The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
        :param pulumi.Input[str] host_key: The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
        :param pulumi.Input[str] host_key_algorithm: The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
        :param pulumi.Input[bool] strict_host_key_checking_enabled: Indicates whether the Config Server instance will fail to start if the host_key does not match.
        """
        __self__.private_key = private_key
        __self__.host_key = host_key
        __self__.host_key_algorithm = host_key_algorithm
        __self__.strict_host_key_checking_enabled = strict_host_key_checking_enabled

@pulumi.input_type
class SpringCloudServiceConfigServerGitSettingSshAuthArgs:
    private_key: pulumi.Input[str] = pulumi.input_property("privateKey")
    """
    The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
    """
    host_key: Optional[pulumi.Input[str]] = pulumi.input_property("hostKey")
    """
    The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
    """
    host_key_algorithm: Optional[pulumi.Input[str]] = pulumi.input_property("hostKeyAlgorithm")
    """
    The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
    """
    strict_host_key_checking_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("strictHostKeyCheckingEnabled")
    """
    Indicates whether the Config Server instance will fail to start if the host_key does not match.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, private_key: pulumi.Input[str], host_key: Optional[pulumi.Input[str]] = None, host_key_algorithm: Optional[pulumi.Input[str]] = None, strict_host_key_checking_enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] private_key: The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
        :param pulumi.Input[str] host_key: The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
        :param pulumi.Input[str] host_key_algorithm: The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
        :param pulumi.Input[bool] strict_host_key_checking_enabled: Indicates whether the Config Server instance will fail to start if the host_key does not match.
        """
        __self__.private_key = private_key
        __self__.host_key = host_key
        __self__.host_key_algorithm = host_key_algorithm
        __self__.strict_host_key_checking_enabled = strict_host_key_checking_enabled

@pulumi.input_type
class SpringCloudServiceTraceArgs:
    instrumentation_key: pulumi.Input[str] = pulumi.input_property("instrumentationKey")
    """
    The Instrumentation Key used for Application Insights.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instrumentation_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] instrumentation_key: The Instrumentation Key used for Application Insights.
        """
        __self__.instrumentation_key = instrumentation_key

