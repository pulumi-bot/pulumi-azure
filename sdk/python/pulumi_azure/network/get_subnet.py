# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GetSubnetResult',
    'AwaitableGetSubnetResult',
    'get_subnet',
]


@pulumi.output_type
class _GetSubnetResult(dict):
    address_prefix: str = pulumi.property("addressPrefix")
    address_prefixes: List[str] = pulumi.property("addressPrefixes")
    enforce_private_link_endpoint_network_policies: bool = pulumi.property("enforcePrivateLinkEndpointNetworkPolicies")
    enforce_private_link_service_network_policies: bool = pulumi.property("enforcePrivateLinkServiceNetworkPolicies")
    id: str = pulumi.property("id")
    name: str = pulumi.property("name")
    network_security_group_id: str = pulumi.property("networkSecurityGroupId")
    resource_group_name: str = pulumi.property("resourceGroupName")
    route_table_id: str = pulumi.property("routeTableId")
    service_endpoints: List[str] = pulumi.property("serviceEndpoints")
    virtual_network_name: str = pulumi.property("virtualNetworkName")


class GetSubnetResult:
    """
    A collection of values returned by getSubnet.
    """
    def __init__(__self__, address_prefix=None, address_prefixes=None, enforce_private_link_endpoint_network_policies=None, enforce_private_link_service_network_policies=None, id=None, name=None, network_security_group_id=None, resource_group_name=None, route_table_id=None, service_endpoints=None, virtual_network_name=None):
        if address_prefix and not isinstance(address_prefix, str):
            raise TypeError("Expected argument 'address_prefix' to be a str")
        __self__.address_prefix = address_prefix
        """
        (Deprecated) The address prefix used for the subnet.
        """
        if address_prefixes and not isinstance(address_prefixes, list):
            raise TypeError("Expected argument 'address_prefixes' to be a list")
        __self__.address_prefixes = address_prefixes
        """
        The address prefixes for the subnet.
        """
        if enforce_private_link_endpoint_network_policies and not isinstance(enforce_private_link_endpoint_network_policies, bool):
            raise TypeError("Expected argument 'enforce_private_link_endpoint_network_policies' to be a bool")
        __self__.enforce_private_link_endpoint_network_policies = enforce_private_link_endpoint_network_policies
        """
        Enable or Disable network policies for the private link endpoint on the subnet.
        """
        if enforce_private_link_service_network_policies and not isinstance(enforce_private_link_service_network_policies, bool):
            raise TypeError("Expected argument 'enforce_private_link_service_network_policies' to be a bool")
        __self__.enforce_private_link_service_network_policies = enforce_private_link_service_network_policies
        """
        Enable or Disable network policies for the private link service on the subnet.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if network_security_group_id and not isinstance(network_security_group_id, str):
            raise TypeError("Expected argument 'network_security_group_id' to be a str")
        __self__.network_security_group_id = network_security_group_id
        """
        The ID of the Network Security Group associated with the subnet.
        """
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        __self__.resource_group_name = resource_group_name
        if route_table_id and not isinstance(route_table_id, str):
            raise TypeError("Expected argument 'route_table_id' to be a str")
        __self__.route_table_id = route_table_id
        """
        The ID of the Route Table associated with this subnet.
        """
        if service_endpoints and not isinstance(service_endpoints, list):
            raise TypeError("Expected argument 'service_endpoints' to be a list")
        __self__.service_endpoints = service_endpoints
        """
        A list of Service Endpoints within this subnet.
        """
        if virtual_network_name and not isinstance(virtual_network_name, str):
            raise TypeError("Expected argument 'virtual_network_name' to be a str")
        __self__.virtual_network_name = virtual_network_name


class AwaitableGetSubnetResult(GetSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetResult(
            address_prefix=self.address_prefix,
            address_prefixes=self.address_prefixes,
            enforce_private_link_endpoint_network_policies=self.enforce_private_link_endpoint_network_policies,
            enforce_private_link_service_network_policies=self.enforce_private_link_service_network_policies,
            id=self.id,
            name=self.name,
            network_security_group_id=self.network_security_group_id,
            resource_group_name=self.resource_group_name,
            route_table_id=self.route_table_id,
            service_endpoints=self.service_endpoints,
            virtual_network_name=self.virtual_network_name)


def get_subnet(name: Optional[str] = None,
               resource_group_name: Optional[str] = None,
               virtual_network_name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetResult:
    """
    Use this data source to access information about an existing Subnet within a Virtual Network.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azure as azure

    example = azure.network.get_subnet(name="backend",
        virtual_network_name="production",
        resource_group_name="networking")
    pulumi.export("subnetId", example.id)
    ```


    :param str name: Specifies the name of the Subnet.
    :param str resource_group_name: Specifies the name of the resource group the Virtual Network is located in.
    :param str virtual_network_name: Specifies the name of the Virtual Network this Subnet is located within.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    __args__['virtualNetworkName'] = virtual_network_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure:network/getSubnet:getSubnet', __args__, opts=opts, typ=_GetSubnetResult).value

    return AwaitableGetSubnetResult(
        address_prefix=_utilities.get_dict_value(__ret__, 'addressPrefix'),
        address_prefixes=_utilities.get_dict_value(__ret__, 'addressPrefixes'),
        enforce_private_link_endpoint_network_policies=_utilities.get_dict_value(__ret__, 'enforcePrivateLinkEndpointNetworkPolicies'),
        enforce_private_link_service_network_policies=_utilities.get_dict_value(__ret__, 'enforcePrivateLinkServiceNetworkPolicies'),
        id=_utilities.get_dict_value(__ret__, 'id'),
        name=_utilities.get_dict_value(__ret__, 'name'),
        network_security_group_id=_utilities.get_dict_value(__ret__, 'networkSecurityGroupId'),
        resource_group_name=_utilities.get_dict_value(__ret__, 'resourceGroupName'),
        route_table_id=_utilities.get_dict_value(__ret__, 'routeTableId'),
        service_endpoints=_utilities.get_dict_value(__ret__, 'serviceEndpoints'),
        virtual_network_name=_utilities.get_dict_value(__ret__, 'virtualNetworkName'))
