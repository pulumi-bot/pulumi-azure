# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApplicationGatewayAuthenticationCertificateArgs',
    'ApplicationGatewayAutoscaleConfigurationArgs',
    'ApplicationGatewayBackendAddressPoolArgs',
    'ApplicationGatewayBackendHttpSettingArgs',
    'ApplicationGatewayBackendHttpSettingAuthenticationCertificateArgs',
    'ApplicationGatewayBackendHttpSettingConnectionDrainingArgs',
    'ApplicationGatewayCustomErrorConfigurationArgs',
    'ApplicationGatewayFrontendIpConfigurationArgs',
    'ApplicationGatewayFrontendPortArgs',
    'ApplicationGatewayGatewayIpConfigurationArgs',
    'ApplicationGatewayHttpListenerArgs',
    'ApplicationGatewayHttpListenerCustomErrorConfigurationArgs',
    'ApplicationGatewayIdentityArgs',
    'ApplicationGatewayProbeArgs',
    'ApplicationGatewayProbeMatchArgs',
    'ApplicationGatewayRedirectConfigurationArgs',
    'ApplicationGatewayRequestRoutingRuleArgs',
    'ApplicationGatewayRewriteRuleSetArgs',
    'ApplicationGatewayRewriteRuleSetRewriteRuleArgs',
    'ApplicationGatewayRewriteRuleSetRewriteRuleConditionArgs',
    'ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfigurationArgs',
    'ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfigurationArgs',
    'ApplicationGatewaySkuArgs',
    'ApplicationGatewaySslCertificateArgs',
    'ApplicationGatewaySslPolicyArgs',
    'ApplicationGatewayTrustedRootCertificateArgs',
    'ApplicationGatewayUrlPathMapArgs',
    'ApplicationGatewayUrlPathMapPathRuleArgs',
    'ApplicationGatewayWafConfigurationArgs',
    'ApplicationGatewayWafConfigurationDisabledRuleGroupArgs',
    'ApplicationGatewayWafConfigurationExclusionArgs',
    'ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs',
    'ExpressRouteCircuitSkuArgs',
    'FirewallApplicationRuleCollectionRuleArgs',
    'FirewallApplicationRuleCollectionRuleProtocolArgs',
    'FirewallIpConfigurationArgs',
    'FirewallNatRuleCollectionRuleArgs',
    'FirewallNetworkRuleCollectionRuleArgs',
    'LocalNetworkGatewayBgpSettingsArgs',
    'NetworkConnectionMonitorDestinationArgs',
    'NetworkConnectionMonitorSourceArgs',
    'NetworkInterfaceIpConfigurationArgs',
    'NetworkPacketCaptureFilterArgs',
    'NetworkPacketCaptureStorageLocationArgs',
    'NetworkSecurityGroupSecurityRuleArgs',
    'NetworkWatcherFlowLogRetentionPolicyArgs',
    'NetworkWatcherFlowLogTrafficAnalyticsArgs',
    'PacketCaptureFilterArgs',
    'PacketCaptureStorageLocationArgs',
    'PointToPointVpnGatewayConnectionConfigurationArgs',
    'PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPoolArgs',
    'ProfileContainerNetworkInterfaceArgs',
    'ProfileContainerNetworkInterfaceIpConfigurationArgs',
    'RouteFilterRuleArgs',
    'RouteTableRouteArgs',
    'SubnetDelegationArgs',
    'SubnetDelegationServiceDelegationArgs',
    'TrafficManagerEndpointCustomHeaderArgs',
    'TrafficManagerEndpointSubnetArgs',
    'TrafficManagerProfileDnsConfigArgs',
    'TrafficManagerProfileMonitorConfigArgs',
    'TrafficManagerProfileMonitorConfigCustomHeaderArgs',
    'VirtualHubRouteArgs',
    'VirtualNetworkDdosProtectionPlanArgs',
    'VirtualNetworkGatewayBgpSettingsArgs',
    'VirtualNetworkGatewayConnectionIpsecPolicyArgs',
    'VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs',
    'VirtualNetworkGatewayIpConfigurationArgs',
    'VirtualNetworkGatewayVpnClientConfigurationArgs',
    'VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs',
    'VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs',
    'VirtualNetworkSubnetArgs',
    'VpnGatewayBgpSettingArgs',
    'VpnServerConfigurationAzureActiveDirectoryAuthenticationArgs',
    'VpnServerConfigurationClientRevokedCertificateArgs',
    'VpnServerConfigurationClientRootCertificateArgs',
    'VpnServerConfigurationIpsecPolicyArgs',
    'VpnServerConfigurationRadiusServerArgs',
    'VpnServerConfigurationRadiusServerClientRootCertificateArgs',
    'VpnServerConfigurationRadiusServerServerRootCertificateArgs',
]

@pulumi.input_type
class ApplicationGatewayAuthenticationCertificateArgs:
    data: pulumi.Input[str] = pulumi.input_property("data")
    """
    The contents of the Authentication Certificate which should be used.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Authentication Certificate.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, data: pulumi.Input[str], name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] data: The contents of the Authentication Certificate which should be used.
        :param pulumi.Input[str] name: The name of the Authentication Certificate.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.data = data
        __self__.name = name
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayAutoscaleConfigurationArgs:
    min_capacity: pulumi.Input[float] = pulumi.input_property("minCapacity")
    """
    Minimum capacity for autoscaling. Accepted values are in the range `0` to `100`.
    """
    max_capacity: Optional[pulumi.Input[float]] = pulumi.input_property("maxCapacity")
    """
    Maximum capacity for autoscaling. Accepted values are in the range `2` to `125`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, min_capacity: pulumi.Input[float], max_capacity: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] min_capacity: Minimum capacity for autoscaling. Accepted values are in the range `0` to `100`.
        :param pulumi.Input[float] max_capacity: Maximum capacity for autoscaling. Accepted values are in the range `2` to `125`.
        """
        __self__.min_capacity = min_capacity
        __self__.max_capacity = max_capacity

@pulumi.input_type
class ApplicationGatewayBackendAddressPoolArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Backend Address Pool.
    """
    fqdns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("fqdns")
    """
    A list of FQDN's which should be part of the Backend Address Pool.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    ip_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("ipAddresses")
    """
    A list of IP Addresses which should be part of the Backend Address Pool.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], fqdns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, id: Optional[pulumi.Input[str]] = None, ip_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the Backend Address Pool.
        :param pulumi.Input[List[pulumi.Input[str]]] fqdns: A list of FQDN's which should be part of the Backend Address Pool.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[List[pulumi.Input[str]]] ip_addresses: A list of IP Addresses which should be part of the Backend Address Pool.
        """
        __self__.name = name
        __self__.fqdns = fqdns
        __self__.id = id
        __self__.ip_addresses = ip_addresses

@pulumi.input_type
class ApplicationGatewayBackendHttpSettingArgs:
    cookie_based_affinity: pulumi.Input[str] = pulumi.input_property("cookieBasedAffinity")
    """
    Is Cookie-Based Affinity enabled? Possible values are `Enabled` and `Disabled`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Backend HTTP Settings Collection.
    """
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port which should be used for this Backend HTTP Settings Collection.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The Protocol which should be used. Possible values are `Http` and `Https`.
    """
    affinity_cookie_name: Optional[pulumi.Input[str]] = pulumi.input_property("affinityCookieName")
    """
    The name of the affinity cookie.
    """
    authentication_certificates: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayBackendHttpSettingAuthenticationCertificateArgs']]]] = pulumi.input_property("authenticationCertificates")
    """
    One or more `authentication_certificate` blocks.
    """
    connection_draining: Optional[pulumi.Input['ApplicationGatewayBackendHttpSettingConnectionDrainingArgs']] = pulumi.input_property("connectionDraining")
    """
    A `connection_draining` block as defined below.
    """
    host_name: Optional[pulumi.Input[str]] = pulumi.input_property("hostName")
    """
    Host header to be sent to the backend servers. Cannot be set if `pick_host_name_from_backend_address` is set to `true`.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The Path which should be used as a prefix for all HTTP requests.
    """
    pick_host_name_from_backend_address: Optional[pulumi.Input[bool]] = pulumi.input_property("pickHostNameFromBackendAddress")
    """
    Whether host header should be picked from the host name of the backend server. Defaults to `false`.
    """
    probe_id: Optional[pulumi.Input[str]] = pulumi.input_property("probeId")
    """
    The ID of the associated Probe.
    """
    probe_name: Optional[pulumi.Input[str]] = pulumi.input_property("probeName")
    """
    The name of an associated HTTP Probe.
    """
    request_timeout: Optional[pulumi.Input[float]] = pulumi.input_property("requestTimeout")
    """
    The request timeout in seconds, which must be between 1 and 86400 seconds.
    """
    trusted_root_certificate_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("trustedRootCertificateNames")
    """
    A list of `trusted_root_certificate` names.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cookie_based_affinity: pulumi.Input[str], name: pulumi.Input[str], port: pulumi.Input[float], protocol: pulumi.Input[str], affinity_cookie_name: Optional[pulumi.Input[str]] = None, authentication_certificates: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayBackendHttpSettingAuthenticationCertificateArgs']]]] = None, connection_draining: Optional[pulumi.Input['ApplicationGatewayBackendHttpSettingConnectionDrainingArgs']] = None, host_name: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, path: Optional[pulumi.Input[str]] = None, pick_host_name_from_backend_address: Optional[pulumi.Input[bool]] = None, probe_id: Optional[pulumi.Input[str]] = None, probe_name: Optional[pulumi.Input[str]] = None, request_timeout: Optional[pulumi.Input[float]] = None, trusted_root_certificate_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] cookie_based_affinity: Is Cookie-Based Affinity enabled? Possible values are `Enabled` and `Disabled`.
        :param pulumi.Input[str] name: The name of the Backend HTTP Settings Collection.
        :param pulumi.Input[float] port: The port which should be used for this Backend HTTP Settings Collection.
        :param pulumi.Input[str] protocol: The Protocol which should be used. Possible values are `Http` and `Https`.
        :param pulumi.Input[str] affinity_cookie_name: The name of the affinity cookie.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayBackendHttpSettingAuthenticationCertificateArgs']]] authentication_certificates: One or more `authentication_certificate` blocks.
        :param pulumi.Input['ApplicationGatewayBackendHttpSettingConnectionDrainingArgs'] connection_draining: A `connection_draining` block as defined below.
        :param pulumi.Input[str] host_name: Host header to be sent to the backend servers. Cannot be set if `pick_host_name_from_backend_address` is set to `true`.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[str] path: The Path which should be used as a prefix for all HTTP requests.
        :param pulumi.Input[bool] pick_host_name_from_backend_address: Whether host header should be picked from the host name of the backend server. Defaults to `false`.
        :param pulumi.Input[str] probe_id: The ID of the associated Probe.
        :param pulumi.Input[str] probe_name: The name of an associated HTTP Probe.
        :param pulumi.Input[float] request_timeout: The request timeout in seconds, which must be between 1 and 86400 seconds.
        :param pulumi.Input[List[pulumi.Input[str]]] trusted_root_certificate_names: A list of `trusted_root_certificate` names.
        """
        __self__.cookie_based_affinity = cookie_based_affinity
        __self__.name = name
        __self__.port = port
        __self__.protocol = protocol
        __self__.affinity_cookie_name = affinity_cookie_name
        __self__.authentication_certificates = authentication_certificates
        __self__.connection_draining = connection_draining
        __self__.host_name = host_name
        __self__.id = id
        __self__.path = path
        __self__.pick_host_name_from_backend_address = pick_host_name_from_backend_address
        __self__.probe_id = probe_id
        __self__.probe_name = probe_name
        __self__.request_timeout = request_timeout
        __self__.trusted_root_certificate_names = trusted_root_certificate_names

@pulumi.input_type
class ApplicationGatewayBackendHttpSettingAuthenticationCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Authentication Certificate.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the Authentication Certificate.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.name = name
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayBackendHttpSettingConnectionDrainingArgs:
    drain_timeout_sec: pulumi.Input[float] = pulumi.input_property("drainTimeoutSec")
    """
    The number of seconds connection draining is active. Acceptable values are from `1` second to `3600` seconds.
    """
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    If connection draining is enabled or not.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, drain_timeout_sec: pulumi.Input[float], enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[float] drain_timeout_sec: The number of seconds connection draining is active. Acceptable values are from `1` second to `3600` seconds.
        :param pulumi.Input[bool] enabled: If connection draining is enabled or not.
        """
        __self__.drain_timeout_sec = drain_timeout_sec
        __self__.enabled = enabled

@pulumi.input_type
class ApplicationGatewayCustomErrorConfigurationArgs:
    custom_error_page_url: pulumi.Input[str] = pulumi.input_property("customErrorPageUrl")
    """
    Error page URL of the application gateway customer error.
    """
    status_code: pulumi.Input[str] = pulumi.input_property("statusCode")
    """
    Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, custom_error_page_url: pulumi.Input[str], status_code: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] custom_error_page_url: Error page URL of the application gateway customer error.
        :param pulumi.Input[str] status_code: Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.custom_error_page_url = custom_error_page_url
        __self__.status_code = status_code
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayFrontendIpConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Frontend IP Configuration.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    private_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddress")
    """
    The Private IP Address to use for the Application Gateway.
    """
    private_ip_address_allocation: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddressAllocation")
    """
    The Allocation Method for the Private IP Address. Possible values are `Dynamic` and `Static`.
    """
    public_ip_address_id: Optional[pulumi.Input[str]] = pulumi.input_property("publicIpAddressId")
    """
    The ID of a Public IP Address which the Application Gateway should use.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, private_ip_address: Optional[pulumi.Input[str]] = None, private_ip_address_allocation: Optional[pulumi.Input[str]] = None, public_ip_address_id: Optional[pulumi.Input[str]] = None, subnet_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the Frontend IP Configuration.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[str] private_ip_address: The Private IP Address to use for the Application Gateway.
        :param pulumi.Input[str] private_ip_address_allocation: The Allocation Method for the Private IP Address. Possible values are `Dynamic` and `Static`.
        :param pulumi.Input[str] public_ip_address_id: The ID of a Public IP Address which the Application Gateway should use.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet.
        """
        __self__.name = name
        __self__.id = id
        __self__.private_ip_address = private_ip_address
        __self__.private_ip_address_allocation = private_ip_address_allocation
        __self__.public_ip_address_id = public_ip_address_id
        __self__.subnet_id = subnet_id

@pulumi.input_type
class ApplicationGatewayFrontendPortArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the Frontend Port.
    """
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port used for this Frontend Port.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], port: pulumi.Input[float], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of the Frontend Port.
        :param pulumi.Input[float] port: The port used for this Frontend Port.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.name = name
        __self__.port = port
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayGatewayIpConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Gateway IP Configuration.
    """
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet which the Application Gateway should be connected to.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], subnet_id: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Gateway IP Configuration.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet which the Application Gateway should be connected to.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.name = name
        __self__.subnet_id = subnet_id
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayHttpListenerArgs:
    frontend_ip_configuration_name: pulumi.Input[str] = pulumi.input_property("frontendIpConfigurationName")
    """
    The Name of the Frontend IP Configuration used for this HTTP Listener.
    """
    frontend_port_name: pulumi.Input[str] = pulumi.input_property("frontendPortName")
    """
    The Name of the Frontend Port use for this HTTP Listener.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the HTTP Listener.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The Protocol to use for this HTTP Listener. Possible values are `Http` and `Https`.
    """
    custom_error_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayHttpListenerCustomErrorConfigurationArgs']]]] = pulumi.input_property("customErrorConfigurations")
    """
    One or more `custom_error_configuration` blocks as defined below.
    """
    firewall_policy_id: Optional[pulumi.Input[str]] = pulumi.input_property("firewallPolicyId")
    """
    The ID of the Web Application Firewall Policy which should be used as a HTTP Listener.
    """
    frontend_ip_configuration_id: Optional[pulumi.Input[str]] = pulumi.input_property("frontendIpConfigurationId")
    """
    The ID of the associated Frontend Configuration.
    """
    frontend_port_id: Optional[pulumi.Input[str]] = pulumi.input_property("frontendPortId")
    """
    The ID of the associated Frontend Port.
    """
    host_name: Optional[pulumi.Input[str]] = pulumi.input_property("hostName")
    """
    The Hostname which should be used for this HTTP Listener.
    """
    host_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("hostNames")
    """
    A list of Hostname(s) should be used for this HTTP Listener. It allows special wildcard characters.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    require_sni: Optional[pulumi.Input[bool]] = pulumi.input_property("requireSni")
    """
    Should Server Name Indication be Required? Defaults to `false`.
    """
    ssl_certificate_id: Optional[pulumi.Input[str]] = pulumi.input_property("sslCertificateId")
    """
    The ID of the associated SSL Certificate.
    """
    ssl_certificate_name: Optional[pulumi.Input[str]] = pulumi.input_property("sslCertificateName")
    """
    The name of the associated SSL Certificate which should be used for this HTTP Listener.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, frontend_ip_configuration_name: pulumi.Input[str], frontend_port_name: pulumi.Input[str], name: pulumi.Input[str], protocol: pulumi.Input[str], custom_error_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayHttpListenerCustomErrorConfigurationArgs']]]] = None, firewall_policy_id: Optional[pulumi.Input[str]] = None, frontend_ip_configuration_id: Optional[pulumi.Input[str]] = None, frontend_port_id: Optional[pulumi.Input[str]] = None, host_name: Optional[pulumi.Input[str]] = None, host_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, id: Optional[pulumi.Input[str]] = None, require_sni: Optional[pulumi.Input[bool]] = None, ssl_certificate_id: Optional[pulumi.Input[str]] = None, ssl_certificate_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] frontend_ip_configuration_name: The Name of the Frontend IP Configuration used for this HTTP Listener.
        :param pulumi.Input[str] frontend_port_name: The Name of the Frontend Port use for this HTTP Listener.
        :param pulumi.Input[str] name: The Name of the HTTP Listener.
        :param pulumi.Input[str] protocol: The Protocol to use for this HTTP Listener. Possible values are `Http` and `Https`.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayHttpListenerCustomErrorConfigurationArgs']]] custom_error_configurations: One or more `custom_error_configuration` blocks as defined below.
        :param pulumi.Input[str] firewall_policy_id: The ID of the Web Application Firewall Policy which should be used as a HTTP Listener.
        :param pulumi.Input[str] frontend_ip_configuration_id: The ID of the associated Frontend Configuration.
        :param pulumi.Input[str] frontend_port_id: The ID of the associated Frontend Port.
        :param pulumi.Input[str] host_name: The Hostname which should be used for this HTTP Listener.
        :param pulumi.Input[List[pulumi.Input[str]]] host_names: A list of Hostname(s) should be used for this HTTP Listener. It allows special wildcard characters.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[bool] require_sni: Should Server Name Indication be Required? Defaults to `false`.
        :param pulumi.Input[str] ssl_certificate_id: The ID of the associated SSL Certificate.
        :param pulumi.Input[str] ssl_certificate_name: The name of the associated SSL Certificate which should be used for this HTTP Listener.
        """
        __self__.frontend_ip_configuration_name = frontend_ip_configuration_name
        __self__.frontend_port_name = frontend_port_name
        __self__.name = name
        __self__.protocol = protocol
        __self__.custom_error_configurations = custom_error_configurations
        __self__.firewall_policy_id = firewall_policy_id
        __self__.frontend_ip_configuration_id = frontend_ip_configuration_id
        __self__.frontend_port_id = frontend_port_id
        __self__.host_name = host_name
        __self__.host_names = host_names
        __self__.id = id
        __self__.require_sni = require_sni
        __self__.ssl_certificate_id = ssl_certificate_id
        __self__.ssl_certificate_name = ssl_certificate_name

@pulumi.input_type
class ApplicationGatewayHttpListenerCustomErrorConfigurationArgs:
    custom_error_page_url: pulumi.Input[str] = pulumi.input_property("customErrorPageUrl")
    """
    Error page URL of the application gateway customer error.
    """
    status_code: pulumi.Input[str] = pulumi.input_property("statusCode")
    """
    Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, custom_error_page_url: pulumi.Input[str], status_code: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] custom_error_page_url: Error page URL of the application gateway customer error.
        :param pulumi.Input[str] status_code: Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.custom_error_page_url = custom_error_page_url
        __self__.status_code = status_code
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayIdentityArgs:
    identity_ids: pulumi.Input[str] = pulumi.input_property("identityIds")
    """
    Specifies a list with a single user managed identity id to be assigned to the Application Gateway.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The Managed Service Identity Type of this Application Gateway. The only possible value is `UserAssigned`. Defaults to `UserAssigned`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identity_ids: pulumi.Input[str], type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] identity_ids: Specifies a list with a single user managed identity id to be assigned to the Application Gateway.
        :param pulumi.Input[str] type: The Managed Service Identity Type of this Application Gateway. The only possible value is `UserAssigned`. Defaults to `UserAssigned`.
        """
        __self__.identity_ids = identity_ids
        __self__.type = type

@pulumi.input_type
class ApplicationGatewayProbeArgs:
    interval: pulumi.Input[float] = pulumi.input_property("interval")
    """
    The Interval between two consecutive probes in seconds. Possible values range from 1 second to a maximum of 86,400 seconds.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the Probe.
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The Path used for this Probe.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The Protocol used for this Probe. Possible values are `Http` and `Https`.
    """
    timeout: pulumi.Input[float] = pulumi.input_property("timeout")
    """
    The Timeout used for this Probe, which indicates when a probe becomes unhealthy. Possible values range from 1 second to a maximum of 86,400 seconds.
    """
    unhealthy_threshold: pulumi.Input[float] = pulumi.input_property("unhealthyThreshold")
    """
    The Unhealthy Threshold for this Probe, which indicates the amount of retries which should be attempted before a node is deemed unhealthy. Possible values are from 1 - 20 seconds.
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    The Hostname used for this Probe. If the Application Gateway is configured for a single site, by default the Host name should be specified as ‘127.0.0.1’, unless otherwise configured in custom probe. Cannot be set if `pick_host_name_from_backend_http_settings` is set to `true`.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    match: Optional[pulumi.Input['ApplicationGatewayProbeMatchArgs']] = pulumi.input_property("match")
    """
    A `match` block as defined above.
    """
    minimum_servers: Optional[pulumi.Input[float]] = pulumi.input_property("minimumServers")
    """
    The minimum number of servers that are always marked as healthy. Defaults to `0`.
    """
    pick_host_name_from_backend_http_settings: Optional[pulumi.Input[bool]] = pulumi.input_property("pickHostNameFromBackendHttpSettings")
    """
    Whether the host header should be picked from the backend http settings. Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, interval: pulumi.Input[float], name: pulumi.Input[str], path: pulumi.Input[str], protocol: pulumi.Input[str], timeout: pulumi.Input[float], unhealthy_threshold: pulumi.Input[float], host: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, match: Optional[pulumi.Input['ApplicationGatewayProbeMatchArgs']] = None, minimum_servers: Optional[pulumi.Input[float]] = None, pick_host_name_from_backend_http_settings: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[float] interval: The Interval between two consecutive probes in seconds. Possible values range from 1 second to a maximum of 86,400 seconds.
        :param pulumi.Input[str] name: The Name of the Probe.
        :param pulumi.Input[str] path: The Path used for this Probe.
        :param pulumi.Input[str] protocol: The Protocol used for this Probe. Possible values are `Http` and `Https`.
        :param pulumi.Input[float] timeout: The Timeout used for this Probe, which indicates when a probe becomes unhealthy. Possible values range from 1 second to a maximum of 86,400 seconds.
        :param pulumi.Input[float] unhealthy_threshold: The Unhealthy Threshold for this Probe, which indicates the amount of retries which should be attempted before a node is deemed unhealthy. Possible values are from 1 - 20 seconds.
        :param pulumi.Input[str] host: The Hostname used for this Probe. If the Application Gateway is configured for a single site, by default the Host name should be specified as ‘127.0.0.1’, unless otherwise configured in custom probe. Cannot be set if `pick_host_name_from_backend_http_settings` is set to `true`.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input['ApplicationGatewayProbeMatchArgs'] match: A `match` block as defined above.
        :param pulumi.Input[float] minimum_servers: The minimum number of servers that are always marked as healthy. Defaults to `0`.
        :param pulumi.Input[bool] pick_host_name_from_backend_http_settings: Whether the host header should be picked from the backend http settings. Defaults to `false`.
        """
        __self__.interval = interval
        __self__.name = name
        __self__.path = path
        __self__.protocol = protocol
        __self__.timeout = timeout
        __self__.unhealthy_threshold = unhealthy_threshold
        __self__.host = host
        __self__.id = id
        __self__.match = match
        __self__.minimum_servers = minimum_servers
        __self__.pick_host_name_from_backend_http_settings = pick_host_name_from_backend_http_settings

@pulumi.input_type
class ApplicationGatewayProbeMatchArgs:
    body: Optional[pulumi.Input[str]] = pulumi.input_property("body")
    """
    A snippet from the Response Body which must be present in the Response..
    """
    status_codes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("statusCodes")
    """
    A list of allowed status codes for this Health Probe.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, body: Optional[pulumi.Input[str]] = None, status_codes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] body: A snippet from the Response Body which must be present in the Response..
        :param pulumi.Input[List[pulumi.Input[str]]] status_codes: A list of allowed status codes for this Health Probe.
        """
        __self__.body = body
        __self__.status_codes = status_codes

@pulumi.input_type
class ApplicationGatewayRedirectConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique name of the redirect configuration block
    """
    redirect_type: pulumi.Input[str] = pulumi.input_property("redirectType")
    """
    The type of redirect. Possible values are `Permanent`, `Temporary`, `Found` and `SeeOther`
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    include_path: Optional[pulumi.Input[bool]] = pulumi.input_property("includePath")
    """
    Whether or not to include the path in the redirected Url. Defaults to `false`
    """
    include_query_string: Optional[pulumi.Input[bool]] = pulumi.input_property("includeQueryString")
    """
    Whether or not to include the query string in the redirected Url. Default to `false`
    """
    target_listener_id: Optional[pulumi.Input[str]] = pulumi.input_property("targetListenerId")
    target_listener_name: Optional[pulumi.Input[str]] = pulumi.input_property("targetListenerName")
    """
    The name of the listener to redirect to. Cannot be set if `target_url` is set.
    """
    target_url: Optional[pulumi.Input[str]] = pulumi.input_property("targetUrl")
    """
    The Url to redirect the request to. Cannot be set if `target_listener_name` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], redirect_type: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, include_path: Optional[pulumi.Input[bool]] = None, include_query_string: Optional[pulumi.Input[bool]] = None, target_listener_id: Optional[pulumi.Input[str]] = None, target_listener_name: Optional[pulumi.Input[str]] = None, target_url: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Unique name of the redirect configuration block
        :param pulumi.Input[str] redirect_type: The type of redirect. Possible values are `Permanent`, `Temporary`, `Found` and `SeeOther`
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[bool] include_path: Whether or not to include the path in the redirected Url. Defaults to `false`
        :param pulumi.Input[bool] include_query_string: Whether or not to include the query string in the redirected Url. Default to `false`
        :param pulumi.Input[str] target_listener_name: The name of the listener to redirect to. Cannot be set if `target_url` is set.
        :param pulumi.Input[str] target_url: The Url to redirect the request to. Cannot be set if `target_listener_name` is set.
        """
        __self__.name = name
        __self__.redirect_type = redirect_type
        __self__.id = id
        __self__.include_path = include_path
        __self__.include_query_string = include_query_string
        __self__.target_listener_id = target_listener_id
        __self__.target_listener_name = target_listener_name
        __self__.target_url = target_url

@pulumi.input_type
class ApplicationGatewayRequestRoutingRuleArgs:
    http_listener_name: pulumi.Input[str] = pulumi.input_property("httpListenerName")
    """
    The Name of the HTTP Listener which should be used for this Routing Rule.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Request Routing Rule.
    """
    rule_type: pulumi.Input[str] = pulumi.input_property("ruleType")
    """
    The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
    """
    backend_address_pool_id: Optional[pulumi.Input[str]] = pulumi.input_property("backendAddressPoolId")
    """
    The ID of the associated Backend Address Pool.
    """
    backend_address_pool_name: Optional[pulumi.Input[str]] = pulumi.input_property("backendAddressPoolName")
    """
    The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    backend_http_settings_id: Optional[pulumi.Input[str]] = pulumi.input_property("backendHttpSettingsId")
    """
    The ID of the associated Backend HTTP Settings Configuration.
    """
    backend_http_settings_name: Optional[pulumi.Input[str]] = pulumi.input_property("backendHttpSettingsName")
    """
    The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    http_listener_id: Optional[pulumi.Input[str]] = pulumi.input_property("httpListenerId")
    """
    The ID of the associated HTTP Listener.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    redirect_configuration_id: Optional[pulumi.Input[str]] = pulumi.input_property("redirectConfigurationId")
    """
    The ID of the associated Redirect Configuration.
    """
    redirect_configuration_name: Optional[pulumi.Input[str]] = pulumi.input_property("redirectConfigurationName")
    """
    The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
    """
    rewrite_rule_set_id: Optional[pulumi.Input[str]] = pulumi.input_property("rewriteRuleSetId")
    """
    The ID of the associated Rewrite Rule Set.
    """
    rewrite_rule_set_name: Optional[pulumi.Input[str]] = pulumi.input_property("rewriteRuleSetName")
    """
    The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
    """
    url_path_map_id: Optional[pulumi.Input[str]] = pulumi.input_property("urlPathMapId")
    """
    The ID of the associated URL Path Map.
    """
    url_path_map_name: Optional[pulumi.Input[str]] = pulumi.input_property("urlPathMapName")
    """
    The Name of the URL Path Map which should be associated with this Routing Rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, http_listener_name: pulumi.Input[str], name: pulumi.Input[str], rule_type: pulumi.Input[str], backend_address_pool_id: Optional[pulumi.Input[str]] = None, backend_address_pool_name: Optional[pulumi.Input[str]] = None, backend_http_settings_id: Optional[pulumi.Input[str]] = None, backend_http_settings_name: Optional[pulumi.Input[str]] = None, http_listener_id: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, redirect_configuration_id: Optional[pulumi.Input[str]] = None, redirect_configuration_name: Optional[pulumi.Input[str]] = None, rewrite_rule_set_id: Optional[pulumi.Input[str]] = None, rewrite_rule_set_name: Optional[pulumi.Input[str]] = None, url_path_map_id: Optional[pulumi.Input[str]] = None, url_path_map_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] http_listener_name: The Name of the HTTP Listener which should be used for this Routing Rule.
        :param pulumi.Input[str] name: The Name of this Request Routing Rule.
        :param pulumi.Input[str] rule_type: The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
        :param pulumi.Input[str] backend_address_pool_id: The ID of the associated Backend Address Pool.
        :param pulumi.Input[str] backend_address_pool_name: The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
        :param pulumi.Input[str] backend_http_settings_id: The ID of the associated Backend HTTP Settings Configuration.
        :param pulumi.Input[str] backend_http_settings_name: The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
        :param pulumi.Input[str] http_listener_id: The ID of the associated HTTP Listener.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[str] redirect_configuration_id: The ID of the associated Redirect Configuration.
        :param pulumi.Input[str] redirect_configuration_name: The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
        :param pulumi.Input[str] rewrite_rule_set_id: The ID of the associated Rewrite Rule Set.
        :param pulumi.Input[str] rewrite_rule_set_name: The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
        :param pulumi.Input[str] url_path_map_id: The ID of the associated URL Path Map.
        :param pulumi.Input[str] url_path_map_name: The Name of the URL Path Map which should be associated with this Routing Rule.
        """
        __self__.http_listener_name = http_listener_name
        __self__.name = name
        __self__.rule_type = rule_type
        __self__.backend_address_pool_id = backend_address_pool_id
        __self__.backend_address_pool_name = backend_address_pool_name
        __self__.backend_http_settings_id = backend_http_settings_id
        __self__.backend_http_settings_name = backend_http_settings_name
        __self__.http_listener_id = http_listener_id
        __self__.id = id
        __self__.redirect_configuration_id = redirect_configuration_id
        __self__.redirect_configuration_name = redirect_configuration_name
        __self__.rewrite_rule_set_id = rewrite_rule_set_id
        __self__.rewrite_rule_set_name = rewrite_rule_set_name
        __self__.url_path_map_id = url_path_map_id
        __self__.url_path_map_name = url_path_map_name

@pulumi.input_type
class ApplicationGatewayRewriteRuleSetArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique name of the rewrite rule set block
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    rewrite_rules: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleArgs']]]] = pulumi.input_property("rewriteRules")
    """
    One or more `rewrite_rule` blocks as defined above.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, rewrite_rules: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] name: Unique name of the rewrite rule set block
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleArgs']]] rewrite_rules: One or more `rewrite_rule` blocks as defined above.
        """
        __self__.name = name
        __self__.id = id
        __self__.rewrite_rules = rewrite_rules

@pulumi.input_type
class ApplicationGatewayRewriteRuleSetRewriteRuleArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Unique name of the rewrite rule block
    """
    rule_sequence: pulumi.Input[float] = pulumi.input_property("ruleSequence")
    """
    Rule sequence of the rewrite rule that determines the order of execution in a set.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleConditionArgs']]]] = pulumi.input_property("conditions")
    """
    One or more `condition` blocks as defined above.
    """
    request_header_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfigurationArgs']]]] = pulumi.input_property("requestHeaderConfigurations")
    """
    One or more `request_header_configuration` blocks as defined above.
    """
    response_header_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfigurationArgs']]]] = pulumi.input_property("responseHeaderConfigurations")
    """
    One or more `response_header_configuration` blocks as defined above.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], rule_sequence: pulumi.Input[float], conditions: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleConditionArgs']]]] = None, request_header_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfigurationArgs']]]] = None, response_header_configurations: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfigurationArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] name: Unique name of the rewrite rule block
        :param pulumi.Input[float] rule_sequence: Rule sequence of the rewrite rule that determines the order of execution in a set.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleConditionArgs']]] conditions: One or more `condition` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfigurationArgs']]] request_header_configurations: One or more `request_header_configuration` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfigurationArgs']]] response_header_configurations: One or more `response_header_configuration` blocks as defined above.
        """
        __self__.name = name
        __self__.rule_sequence = rule_sequence
        __self__.conditions = conditions
        __self__.request_header_configurations = request_header_configurations
        __self__.response_header_configurations = response_header_configurations

@pulumi.input_type
class ApplicationGatewayRewriteRuleSetRewriteRuleConditionArgs:
    pattern: pulumi.Input[str] = pulumi.input_property("pattern")
    """
    The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
    """
    variable: pulumi.Input[str] = pulumi.input_property("variable")
    """
    The [variable](https://docs.microsoft.com/en-us/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
    """
    ignore_case: Optional[pulumi.Input[bool]] = pulumi.input_property("ignoreCase")
    """
    Perform a case in-sensitive comparison. Defaults to `false`
    """
    negate: Optional[pulumi.Input[bool]] = pulumi.input_property("negate")
    """
    Negate the result of the condition evaluation. Defaults to `false`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pattern: pulumi.Input[str], variable: pulumi.Input[str], ignore_case: Optional[pulumi.Input[bool]] = None, negate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] pattern: The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
        :param pulumi.Input[str] variable: The [variable](https://docs.microsoft.com/en-us/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
        :param pulumi.Input[bool] ignore_case: Perform a case in-sensitive comparison. Defaults to `false`
        :param pulumi.Input[bool] negate: Negate the result of the condition evaluation. Defaults to `false`
        """
        __self__.pattern = pattern
        __self__.variable = variable
        __self__.ignore_case = ignore_case
        __self__.negate = negate

@pulumi.input_type
class ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfigurationArgs:
    header_name: pulumi.Input[str] = pulumi.input_property("headerName")
    """
    Header name of the header configuration.
    """
    header_value: pulumi.Input[str] = pulumi.input_property("headerValue")
    """
    Header value of the header configuration. To delete a request header set this property to an empty string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, header_name: pulumi.Input[str], header_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] header_name: Header name of the header configuration.
        :param pulumi.Input[str] header_value: Header value of the header configuration. To delete a request header set this property to an empty string.
        """
        __self__.header_name = header_name
        __self__.header_value = header_value

@pulumi.input_type
class ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfigurationArgs:
    header_name: pulumi.Input[str] = pulumi.input_property("headerName")
    """
    Header name of the header configuration.
    """
    header_value: pulumi.Input[str] = pulumi.input_property("headerValue")
    """
    Header value of the header configuration. To delete a response header set this property to an empty string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, header_name: pulumi.Input[str], header_value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] header_name: Header name of the header configuration.
        :param pulumi.Input[str] header_value: Header value of the header configuration. To delete a response header set this property to an empty string.
        """
        __self__.header_name = header_name
        __self__.header_value = header_value

@pulumi.input_type
class ApplicationGatewaySkuArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the SKU to use for this Application Gateway. Possible values are `Standard_Small`, `Standard_Medium`, `Standard_Large`, `Standard_v2`, `WAF_Medium`, `WAF_Large`, and `WAF_v2`.
    """
    tier: pulumi.Input[str] = pulumi.input_property("tier")
    """
    The Tier of the SKU to use for this Application Gateway. Possible values are `Standard`, `Standard_v2`, `WAF` and `WAF_v2`.
    """
    capacity: Optional[pulumi.Input[float]] = pulumi.input_property("capacity")
    """
    The Capacity of the SKU to use for this Application Gateway. When using a V1 SKU this value must be between 1 and 32, and 1 to 125 for a V2 SKU. This property is optional if `autoscale_configuration` is set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], tier: pulumi.Input[str], capacity: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of the SKU to use for this Application Gateway. Possible values are `Standard_Small`, `Standard_Medium`, `Standard_Large`, `Standard_v2`, `WAF_Medium`, `WAF_Large`, and `WAF_v2`.
        :param pulumi.Input[str] tier: The Tier of the SKU to use for this Application Gateway. Possible values are `Standard`, `Standard_v2`, `WAF` and `WAF_v2`.
        :param pulumi.Input[float] capacity: The Capacity of the SKU to use for this Application Gateway. When using a V1 SKU this value must be between 1 and 32, and 1 to 125 for a V2 SKU. This property is optional if `autoscale_configuration` is set.
        """
        __self__.name = name
        __self__.tier = tier
        __self__.capacity = capacity

@pulumi.input_type
class ApplicationGatewaySslCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the SSL certificate that is unique within this Application Gateway
    """
    data: Optional[pulumi.Input[str]] = pulumi.input_property("data")
    """
    PFX certificate. Required if `key_vault_secret_id` is not set.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    key_vault_secret_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultSecretId")
    """
    Secret Id of (base-64 encoded unencrypted pfx) `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for keyvault to use this feature. Required if `data` is not set.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    Password for the pfx file specified in data.  Required if `data` is set.
    """
    public_cert_data: Optional[pulumi.Input[str]] = pulumi.input_property("publicCertData")
    """
    The Public Certificate Data associated with the SSL Certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], data: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, key_vault_secret_id: Optional[pulumi.Input[str]] = None, password: Optional[pulumi.Input[str]] = None, public_cert_data: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of the SSL certificate that is unique within this Application Gateway
        :param pulumi.Input[str] data: PFX certificate. Required if `key_vault_secret_id` is not set.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[str] key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for keyvault to use this feature. Required if `data` is not set.
        :param pulumi.Input[str] password: Password for the pfx file specified in data.  Required if `data` is set.
        :param pulumi.Input[str] public_cert_data: The Public Certificate Data associated with the SSL Certificate.
        """
        __self__.name = name
        __self__.data = data
        __self__.id = id
        __self__.key_vault_secret_id = key_vault_secret_id
        __self__.password = password
        __self__.public_cert_data = public_cert_data

@pulumi.input_type
class ApplicationGatewaySslPolicyArgs:
    cipher_suites: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("cipherSuites")
    """
    A List of accepted cipher suites. Possible values are: `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_128_CBC_SHA256`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA256`, `TLS_DHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_128_GCM_SHA256`, `TLS_DHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_RSA_WITH_3DES_EDE_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_GCM_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_256_CBC_SHA256` and `TLS_RSA_WITH_AES_256_GCM_SHA384`.
    """
    disabled_protocols: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("disabledProtocols")
    """
    A list of SSL Protocols which should be disabled on this Application Gateway. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
    """
    min_protocol_version: Optional[pulumi.Input[str]] = pulumi.input_property("minProtocolVersion")
    """
    The minimal TLS version. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
    """
    policy_name: Optional[pulumi.Input[str]] = pulumi.input_property("policyName")
    """
    The Name of the Policy e.g AppGwSslPolicy20170401S. Required if `policy_type` is set to `Predefined`. Possible values can change over time and
    are published here https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-ssl-policy-overview. Not compatible with `disabled_protocols`.
    """
    policy_type: Optional[pulumi.Input[str]] = pulumi.input_property("policyType")
    """
    The Type of the Policy. Possible values are `Predefined` and `Custom`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cipher_suites: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, disabled_protocols: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, min_protocol_version: Optional[pulumi.Input[str]] = None, policy_name: Optional[pulumi.Input[str]] = None, policy_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] cipher_suites: A List of accepted cipher suites. Possible values are: `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_128_CBC_SHA256`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA256`, `TLS_DHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_128_GCM_SHA256`, `TLS_DHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_RSA_WITH_3DES_EDE_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_GCM_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_256_CBC_SHA256` and `TLS_RSA_WITH_AES_256_GCM_SHA384`.
        :param pulumi.Input[List[pulumi.Input[str]]] disabled_protocols: A list of SSL Protocols which should be disabled on this Application Gateway. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
        :param pulumi.Input[str] min_protocol_version: The minimal TLS version. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
        :param pulumi.Input[str] policy_name: The Name of the Policy e.g AppGwSslPolicy20170401S. Required if `policy_type` is set to `Predefined`. Possible values can change over time and
               are published here https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-ssl-policy-overview. Not compatible with `disabled_protocols`.
        :param pulumi.Input[str] policy_type: The Type of the Policy. Possible values are `Predefined` and `Custom`.
        """
        __self__.cipher_suites = cipher_suites
        __self__.disabled_protocols = disabled_protocols
        __self__.min_protocol_version = min_protocol_version
        __self__.policy_name = policy_name
        __self__.policy_type = policy_type

@pulumi.input_type
class ApplicationGatewayTrustedRootCertificateArgs:
    data: pulumi.Input[str] = pulumi.input_property("data")
    """
    The contents of the Trusted Root Certificate which should be used.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the Trusted Root Certificate to use.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, data: pulumi.Input[str], name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] data: The contents of the Trusted Root Certificate which should be used.
        :param pulumi.Input[str] name: The Name of the Trusted Root Certificate to use.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.data = data
        __self__.name = name
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayUrlPathMapArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the URL Path Map.
    """
    path_rules: pulumi.Input[List[pulumi.Input['ApplicationGatewayUrlPathMapPathRuleArgs']]] = pulumi.input_property("pathRules")
    """
    One or more `path_rule` blocks as defined above.
    """
    default_backend_address_pool_id: Optional[pulumi.Input[str]] = pulumi.input_property("defaultBackendAddressPoolId")
    """
    The ID of the Default Backend Address Pool.
    """
    default_backend_address_pool_name: Optional[pulumi.Input[str]] = pulumi.input_property("defaultBackendAddressPoolName")
    """
    The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
    """
    default_backend_http_settings_id: Optional[pulumi.Input[str]] = pulumi.input_property("defaultBackendHttpSettingsId")
    """
    The ID of the Default Backend HTTP Settings Collection.
    """
    default_backend_http_settings_name: Optional[pulumi.Input[str]] = pulumi.input_property("defaultBackendHttpSettingsName")
    """
    The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
    """
    default_redirect_configuration_id: Optional[pulumi.Input[str]] = pulumi.input_property("defaultRedirectConfigurationId")
    """
    The ID of the Default Redirect Configuration.
    """
    default_redirect_configuration_name: Optional[pulumi.Input[str]] = pulumi.input_property("defaultRedirectConfigurationName")
    """
    The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
    """
    default_rewrite_rule_set_id: Optional[pulumi.Input[str]] = pulumi.input_property("defaultRewriteRuleSetId")
    default_rewrite_rule_set_name: Optional[pulumi.Input[str]] = pulumi.input_property("defaultRewriteRuleSetName")
    """
    The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], path_rules: pulumi.Input[List[pulumi.Input['ApplicationGatewayUrlPathMapPathRuleArgs']]], default_backend_address_pool_id: Optional[pulumi.Input[str]] = None, default_backend_address_pool_name: Optional[pulumi.Input[str]] = None, default_backend_http_settings_id: Optional[pulumi.Input[str]] = None, default_backend_http_settings_name: Optional[pulumi.Input[str]] = None, default_redirect_configuration_id: Optional[pulumi.Input[str]] = None, default_redirect_configuration_name: Optional[pulumi.Input[str]] = None, default_rewrite_rule_set_id: Optional[pulumi.Input[str]] = None, default_rewrite_rule_set_name: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of the URL Path Map.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayUrlPathMapPathRuleArgs']]] path_rules: One or more `path_rule` blocks as defined above.
        :param pulumi.Input[str] default_backend_address_pool_id: The ID of the Default Backend Address Pool.
        :param pulumi.Input[str] default_backend_address_pool_name: The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
        :param pulumi.Input[str] default_backend_http_settings_id: The ID of the Default Backend HTTP Settings Collection.
        :param pulumi.Input[str] default_backend_http_settings_name: The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
        :param pulumi.Input[str] default_redirect_configuration_id: The ID of the Default Redirect Configuration.
        :param pulumi.Input[str] default_redirect_configuration_name: The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
        :param pulumi.Input[str] default_rewrite_rule_set_name: The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        """
        __self__.name = name
        __self__.path_rules = path_rules
        __self__.default_backend_address_pool_id = default_backend_address_pool_id
        __self__.default_backend_address_pool_name = default_backend_address_pool_name
        __self__.default_backend_http_settings_id = default_backend_http_settings_id
        __self__.default_backend_http_settings_name = default_backend_http_settings_name
        __self__.default_redirect_configuration_id = default_redirect_configuration_id
        __self__.default_redirect_configuration_name = default_redirect_configuration_name
        __self__.default_rewrite_rule_set_id = default_rewrite_rule_set_id
        __self__.default_rewrite_rule_set_name = default_rewrite_rule_set_name
        __self__.id = id

@pulumi.input_type
class ApplicationGatewayUrlPathMapPathRuleArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the Path Rule.
    """
    paths: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("paths")
    """
    A list of Paths used in this Path Rule.
    """
    backend_address_pool_id: Optional[pulumi.Input[str]] = pulumi.input_property("backendAddressPoolId")
    """
    The ID of the associated Backend Address Pool.
    """
    backend_address_pool_name: Optional[pulumi.Input[str]] = pulumi.input_property("backendAddressPoolName")
    """
    The Name of the Backend Address Pool to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    backend_http_settings_id: Optional[pulumi.Input[str]] = pulumi.input_property("backendHttpSettingsId")
    """
    The ID of the associated Backend HTTP Settings Configuration.
    """
    backend_http_settings_name: Optional[pulumi.Input[str]] = pulumi.input_property("backendHttpSettingsName")
    """
    The Name of the Backend HTTP Settings Collection to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    redirect_configuration_id: Optional[pulumi.Input[str]] = pulumi.input_property("redirectConfigurationId")
    """
    The ID of the associated Redirect Configuration.
    """
    redirect_configuration_name: Optional[pulumi.Input[str]] = pulumi.input_property("redirectConfigurationName")
    """
    The Name of a Redirect Configuration to use for this Path Rule. Cannot be set if `backend_address_pool_name` or `backend_http_settings_name` is set.
    """
    rewrite_rule_set_id: Optional[pulumi.Input[str]] = pulumi.input_property("rewriteRuleSetId")
    """
    The ID of the associated Rewrite Rule Set.
    """
    rewrite_rule_set_name: Optional[pulumi.Input[str]] = pulumi.input_property("rewriteRuleSetName")
    """
    The Name of the Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], paths: pulumi.Input[List[pulumi.Input[str]]], backend_address_pool_id: Optional[pulumi.Input[str]] = None, backend_address_pool_name: Optional[pulumi.Input[str]] = None, backend_http_settings_id: Optional[pulumi.Input[str]] = None, backend_http_settings_name: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, redirect_configuration_id: Optional[pulumi.Input[str]] = None, redirect_configuration_name: Optional[pulumi.Input[str]] = None, rewrite_rule_set_id: Optional[pulumi.Input[str]] = None, rewrite_rule_set_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of the Path Rule.
        :param pulumi.Input[List[pulumi.Input[str]]] paths: A list of Paths used in this Path Rule.
        :param pulumi.Input[str] backend_address_pool_id: The ID of the associated Backend Address Pool.
        :param pulumi.Input[str] backend_address_pool_name: The Name of the Backend Address Pool to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
        :param pulumi.Input[str] backend_http_settings_id: The ID of the associated Backend HTTP Settings Configuration.
        :param pulumi.Input[str] backend_http_settings_name: The Name of the Backend HTTP Settings Collection to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
        :param pulumi.Input[str] id: The ID of the Rewrite Rule Set
        :param pulumi.Input[str] redirect_configuration_id: The ID of the associated Redirect Configuration.
        :param pulumi.Input[str] redirect_configuration_name: The Name of a Redirect Configuration to use for this Path Rule. Cannot be set if `backend_address_pool_name` or `backend_http_settings_name` is set.
        :param pulumi.Input[str] rewrite_rule_set_id: The ID of the associated Rewrite Rule Set.
        :param pulumi.Input[str] rewrite_rule_set_name: The Name of the Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
        """
        __self__.name = name
        __self__.paths = paths
        __self__.backend_address_pool_id = backend_address_pool_id
        __self__.backend_address_pool_name = backend_address_pool_name
        __self__.backend_http_settings_id = backend_http_settings_id
        __self__.backend_http_settings_name = backend_http_settings_name
        __self__.id = id
        __self__.redirect_configuration_id = redirect_configuration_id
        __self__.redirect_configuration_name = redirect_configuration_name
        __self__.rewrite_rule_set_id = rewrite_rule_set_id
        __self__.rewrite_rule_set_name = rewrite_rule_set_name

@pulumi.input_type
class ApplicationGatewayWafConfigurationArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Is the Web Application Firewall be enabled?
    """
    firewall_mode: pulumi.Input[str] = pulumi.input_property("firewallMode")
    """
    The Web Application Firewall Mode. Possible values are `Detection` and `Prevention`.
    """
    rule_set_version: pulumi.Input[str] = pulumi.input_property("ruleSetVersion")
    """
    The Version of the Rule Set used for this Web Application Firewall. Possible values are `2.2.9`, `3.0`, and `3.1`.
    """
    disabled_rule_groups: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationDisabledRuleGroupArgs']]]] = pulumi.input_property("disabledRuleGroups")
    """
    one or more `disabled_rule_group` blocks as defined below.
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationExclusionArgs']]]] = pulumi.input_property("exclusions")
    """
    one or more `exclusion` blocks as defined below.
    """
    file_upload_limit_mb: Optional[pulumi.Input[float]] = pulumi.input_property("fileUploadLimitMb")
    """
    The File Upload Limit in MB. Accepted values are in the range `1`MB to `500`MB. Defaults to `100`MB.
    """
    max_request_body_size_kb: Optional[pulumi.Input[float]] = pulumi.input_property("maxRequestBodySizeKb")
    """
    The Maximum Request Body Size in KB.  Accepted values are in the range `1`KB to `128`KB.  Defaults to `128`KB.
    """
    request_body_check: Optional[pulumi.Input[bool]] = pulumi.input_property("requestBodyCheck")
    """
    Is Request Body Inspection enabled?  Defaults to `true`.
    """
    rule_set_type: Optional[pulumi.Input[str]] = pulumi.input_property("ruleSetType")
    """
    The Type of the Rule Set used for this Web Application Firewall. Currently, only `OWASP` is supported.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], firewall_mode: pulumi.Input[str], rule_set_version: pulumi.Input[str], disabled_rule_groups: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationDisabledRuleGroupArgs']]]] = None, exclusions: Optional[pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationExclusionArgs']]]] = None, file_upload_limit_mb: Optional[pulumi.Input[float]] = None, max_request_body_size_kb: Optional[pulumi.Input[float]] = None, request_body_check: Optional[pulumi.Input[bool]] = None, rule_set_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Is the Web Application Firewall be enabled?
        :param pulumi.Input[str] firewall_mode: The Web Application Firewall Mode. Possible values are `Detection` and `Prevention`.
        :param pulumi.Input[str] rule_set_version: The Version of the Rule Set used for this Web Application Firewall. Possible values are `2.2.9`, `3.0`, and `3.1`.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationDisabledRuleGroupArgs']]] disabled_rule_groups: one or more `disabled_rule_group` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input['ApplicationGatewayWafConfigurationExclusionArgs']]] exclusions: one or more `exclusion` blocks as defined below.
        :param pulumi.Input[float] file_upload_limit_mb: The File Upload Limit in MB. Accepted values are in the range `1`MB to `500`MB. Defaults to `100`MB.
        :param pulumi.Input[float] max_request_body_size_kb: The Maximum Request Body Size in KB.  Accepted values are in the range `1`KB to `128`KB.  Defaults to `128`KB.
        :param pulumi.Input[bool] request_body_check: Is Request Body Inspection enabled?  Defaults to `true`.
        :param pulumi.Input[str] rule_set_type: The Type of the Rule Set used for this Web Application Firewall. Currently, only `OWASP` is supported.
        """
        __self__.enabled = enabled
        __self__.firewall_mode = firewall_mode
        __self__.rule_set_version = rule_set_version
        __self__.disabled_rule_groups = disabled_rule_groups
        __self__.exclusions = exclusions
        __self__.file_upload_limit_mb = file_upload_limit_mb
        __self__.max_request_body_size_kb = max_request_body_size_kb
        __self__.request_body_check = request_body_check
        __self__.rule_set_type = rule_set_type

@pulumi.input_type
class ApplicationGatewayWafConfigurationDisabledRuleGroupArgs:
    rule_group_name: pulumi.Input[str] = pulumi.input_property("ruleGroupName")
    """
    The rule group where specific rules should be disabled. Accepted values are:  `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `General`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`
    """
    rules: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("rules")
    """
    A list of rules which should be disabled in that group. Disables all rules in the specified group if `rules` is not specified.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rule_group_name: pulumi.Input[str], rules: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None) -> None:
        """
        :param pulumi.Input[str] rule_group_name: The rule group where specific rules should be disabled. Accepted values are:  `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `General`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`
        :param pulumi.Input[List[pulumi.Input[float]]] rules: A list of rules which should be disabled in that group. Disables all rules in the specified group if `rules` is not specified.
        """
        __self__.rule_group_name = rule_group_name
        __self__.rules = rules

@pulumi.input_type
class ApplicationGatewayWafConfigurationExclusionArgs:
    match_variable: pulumi.Input[str] = pulumi.input_property("matchVariable")
    """
    Match variable of the exclusion rule to exclude header, cookie or GET arguments. Possible values are `RequestHeaderNames`, `RequestArgNames` and `RequestCookieNames`
    """
    selector: Optional[pulumi.Input[str]] = pulumi.input_property("selector")
    """
    String value which will be used for the filter operation. If empty will exclude all traffic on this `match_variable`
    """
    selector_match_operator: Optional[pulumi.Input[str]] = pulumi.input_property("selectorMatchOperator")
    """
    Operator which will be used to search in the variable content. Possible values are `Equals`, `StartsWith`, `EndsWith`, `Contains`. If empty will exclude all traffic on this `match_variable`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_variable: pulumi.Input[str], selector: Optional[pulumi.Input[str]] = None, selector_match_operator: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] match_variable: Match variable of the exclusion rule to exclude header, cookie or GET arguments. Possible values are `RequestHeaderNames`, `RequestArgNames` and `RequestCookieNames`
        :param pulumi.Input[str] selector: String value which will be used for the filter operation. If empty will exclude all traffic on this `match_variable`
        :param pulumi.Input[str] selector_match_operator: Operator which will be used to search in the variable content. Possible values are `Equals`, `StartsWith`, `EndsWith`, `Contains`. If empty will exclude all traffic on this `match_variable`
        """
        __self__.match_variable = match_variable
        __self__.selector = selector
        __self__.selector_match_operator = selector_match_operator

@pulumi.input_type
class ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs:
    advertised_public_prefixes: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("advertisedPublicPrefixes")
    """
    A list of Advertised Public Prefixes
    """
    customer_asn: Optional[pulumi.Input[float]] = pulumi.input_property("customerAsn")
    """
    The CustomerASN of the peering
    """
    routing_registry_name: Optional[pulumi.Input[str]] = pulumi.input_property("routingRegistryName")
    """
    The RoutingRegistryName of the configuration
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, advertised_public_prefixes: pulumi.Input[List[pulumi.Input[str]]], customer_asn: Optional[pulumi.Input[float]] = None, routing_registry_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] advertised_public_prefixes: A list of Advertised Public Prefixes
        :param pulumi.Input[float] customer_asn: The CustomerASN of the peering
        :param pulumi.Input[str] routing_registry_name: The RoutingRegistryName of the configuration
        """
        __self__.advertised_public_prefixes = advertised_public_prefixes
        __self__.customer_asn = customer_asn
        __self__.routing_registry_name = routing_registry_name

@pulumi.input_type
class ExpressRouteCircuitSkuArgs:
    family: pulumi.Input[str] = pulumi.input_property("family")
    """
    The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
    """
    tier: pulumi.Input[str] = pulumi.input_property("tier")
    """
    The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, family: pulumi.Input[str], tier: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] family: The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
        :param pulumi.Input[str] tier: The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
        """
        __self__.family = family
        __self__.tier = tier

@pulumi.input_type
class FirewallApplicationRuleCollectionRuleArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the rule.
    """
    source_addresses: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    Specifies a description for the rule.
    """
    fqdn_tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("fqdnTags")
    """
    A list of FQDN tags. Possible values are `AppServiceEnvironment`, `AzureBackup`, `MicrosoftActiveProtectionService`, `WindowsDiagnostics` and `WindowsUpdate`
    """
    protocols: Optional[pulumi.Input[List[pulumi.Input['FirewallApplicationRuleCollectionRuleProtocolArgs']]]] = pulumi.input_property("protocols")
    """
    One or more `protocol` blocks as defined below.
    """
    target_fqdns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("targetFqdns")
    """
    A list of FQDNs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], source_addresses: pulumi.Input[List[pulumi.Input[str]]], description: Optional[pulumi.Input[str]] = None, fqdn_tags: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, protocols: Optional[pulumi.Input[List[pulumi.Input['FirewallApplicationRuleCollectionRuleProtocolArgs']]]] = None, target_fqdns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the rule.
        :param pulumi.Input[List[pulumi.Input[str]]] source_addresses: A list of source IP addresses and/or IP ranges.
        :param pulumi.Input[str] description: Specifies a description for the rule.
        :param pulumi.Input[List[pulumi.Input[str]]] fqdn_tags: A list of FQDN tags. Possible values are `AppServiceEnvironment`, `AzureBackup`, `MicrosoftActiveProtectionService`, `WindowsDiagnostics` and `WindowsUpdate`
        :param pulumi.Input[List[pulumi.Input['FirewallApplicationRuleCollectionRuleProtocolArgs']]] protocols: One or more `protocol` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] target_fqdns: A list of FQDNs.
        """
        __self__.name = name
        __self__.source_addresses = source_addresses
        __self__.description = description
        __self__.fqdn_tags = fqdn_tags
        __self__.protocols = protocols
        __self__.target_fqdns = target_fqdns

@pulumi.input_type
class FirewallApplicationRuleCollectionRuleProtocolArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Specifies the type of connection. Possible values are `Http`, `Https` and `Mssql`.
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    Specify a port for the connection.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], port: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] type: Specifies the type of connection. Possible values are `Http`, `Https` and `Mssql`.
        :param pulumi.Input[float] port: Specify a port for the connection.
        """
        __self__.type = type
        __self__.port = port

@pulumi.input_type
class FirewallIpConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the IP Configuration.
    """
    public_ip_address_id: pulumi.Input[str] = pulumi.input_property("publicIpAddressId")
    """
    The Resource ID of the Public IP Address associated with the firewall.
    """
    private_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddress")
    """
    The private IP address of the Azure Firewall.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    Reference to the subnet associated with the IP Configuration.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], public_ip_address_id: pulumi.Input[str], private_ip_address: Optional[pulumi.Input[str]] = None, subnet_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the IP Configuration.
        :param pulumi.Input[str] public_ip_address_id: The Resource ID of the Public IP Address associated with the firewall.
        :param pulumi.Input[str] private_ip_address: The private IP address of the Azure Firewall.
        :param pulumi.Input[str] subnet_id: Reference to the subnet associated with the IP Configuration.
        """
        __self__.name = name
        __self__.public_ip_address_id = public_ip_address_id
        __self__.private_ip_address = private_ip_address
        __self__.subnet_id = subnet_id

@pulumi.input_type
class FirewallNatRuleCollectionRuleArgs:
    destination_addresses: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("destinationAddresses")
    """
    A list of destination IP addresses and/or IP ranges.
    """
    destination_ports: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("destinationPorts")
    """
    A list of destination ports.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the rule.
    """
    protocols: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("protocols")
    """
    A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.  If `action` is `Dnat`, protocols can only be `TCP` and `UDP`.
    """
    source_addresses: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """
    translated_address: pulumi.Input[str] = pulumi.input_property("translatedAddress")
    """
    The address of the service behind the Firewall.
    """
    translated_port: pulumi.Input[str] = pulumi.input_property("translatedPort")
    """
    The port of the service behind the Firewall.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    Specifies a description for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, destination_addresses: pulumi.Input[List[pulumi.Input[str]]], destination_ports: pulumi.Input[List[pulumi.Input[str]]], name: pulumi.Input[str], protocols: pulumi.Input[List[pulumi.Input[str]]], source_addresses: pulumi.Input[List[pulumi.Input[str]]], translated_address: pulumi.Input[str], translated_port: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] destination_addresses: A list of destination IP addresses and/or IP ranges.
        :param pulumi.Input[List[pulumi.Input[str]]] destination_ports: A list of destination ports.
        :param pulumi.Input[str] name: Specifies the name of the rule.
        :param pulumi.Input[List[pulumi.Input[str]]] protocols: A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.  If `action` is `Dnat`, protocols can only be `TCP` and `UDP`.
        :param pulumi.Input[List[pulumi.Input[str]]] source_addresses: A list of source IP addresses and/or IP ranges.
        :param pulumi.Input[str] translated_address: The address of the service behind the Firewall.
        :param pulumi.Input[str] translated_port: The port of the service behind the Firewall.
        :param pulumi.Input[str] description: Specifies a description for the rule.
        """
        __self__.destination_addresses = destination_addresses
        __self__.destination_ports = destination_ports
        __self__.name = name
        __self__.protocols = protocols
        __self__.source_addresses = source_addresses
        __self__.translated_address = translated_address
        __self__.translated_port = translated_port
        __self__.description = description

@pulumi.input_type
class FirewallNetworkRuleCollectionRuleArgs:
    destination_addresses: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("destinationAddresses")
    """
    A list of destination IP addresses and/or IP ranges.
    """
    destination_ports: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("destinationPorts")
    """
    A list of destination ports.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the rule.
    """
    protocols: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("protocols")
    """
    A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.
    """
    source_addresses: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    Specifies a description for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, destination_addresses: pulumi.Input[List[pulumi.Input[str]]], destination_ports: pulumi.Input[List[pulumi.Input[str]]], name: pulumi.Input[str], protocols: pulumi.Input[List[pulumi.Input[str]]], source_addresses: pulumi.Input[List[pulumi.Input[str]]], description: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] destination_addresses: A list of destination IP addresses and/or IP ranges.
        :param pulumi.Input[List[pulumi.Input[str]]] destination_ports: A list of destination ports.
        :param pulumi.Input[str] name: Specifies the name of the rule.
        :param pulumi.Input[List[pulumi.Input[str]]] protocols: A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.
        :param pulumi.Input[List[pulumi.Input[str]]] source_addresses: A list of source IP addresses and/or IP ranges.
        :param pulumi.Input[str] description: Specifies a description for the rule.
        """
        __self__.destination_addresses = destination_addresses
        __self__.destination_ports = destination_ports
        __self__.name = name
        __self__.protocols = protocols
        __self__.source_addresses = source_addresses
        __self__.description = description

@pulumi.input_type
class LocalNetworkGatewayBgpSettingsArgs:
    asn: pulumi.Input[float] = pulumi.input_property("asn")
    """
    The BGP speaker's ASN.
    """
    bgp_peering_address: pulumi.Input[str] = pulumi.input_property("bgpPeeringAddress")
    """
    The BGP peering address and BGP identifier
    of this BGP speaker.
    """
    peer_weight: Optional[pulumi.Input[float]] = pulumi.input_property("peerWeight")
    """
    The weight added to routes learned from this
    BGP speaker.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, asn: pulumi.Input[float], bgp_peering_address: pulumi.Input[str], peer_weight: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] asn: The BGP speaker's ASN.
        :param pulumi.Input[str] bgp_peering_address: The BGP peering address and BGP identifier
               of this BGP speaker.
        :param pulumi.Input[float] peer_weight: The weight added to routes learned from this
               BGP speaker.
        """
        __self__.asn = asn
        __self__.bgp_peering_address = bgp_peering_address
        __self__.peer_weight = peer_weight

@pulumi.input_type
class NetworkConnectionMonitorDestinationArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port on the destination to monitor connectivity to.
    """
    address: Optional[pulumi.Input[str]] = pulumi.input_property("address")
    """
    IP address or domain name to monitor connectivity to.
    """
    virtual_machine_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualMachineId")
    """
    The ID of the Virtual Machine to monitor connectivity to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], address: Optional[pulumi.Input[str]] = None, virtual_machine_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] port: The port on the destination to monitor connectivity to.
        :param pulumi.Input[str] address: IP address or domain name to monitor connectivity to.
        :param pulumi.Input[str] virtual_machine_id: The ID of the Virtual Machine to monitor connectivity to.
        """
        __self__.port = port
        __self__.address = address
        __self__.virtual_machine_id = virtual_machine_id

@pulumi.input_type
class NetworkConnectionMonitorSourceArgs:
    virtual_machine_id: pulumi.Input[str] = pulumi.input_property("virtualMachineId")
    """
    The ID of the Virtual Machine to monitor connectivity to.
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    The port on the destination to monitor connectivity to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, virtual_machine_id: pulumi.Input[str], port: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] virtual_machine_id: The ID of the Virtual Machine to monitor connectivity to.
        :param pulumi.Input[float] port: The port on the destination to monitor connectivity to.
        """
        __self__.virtual_machine_id = virtual_machine_id
        __self__.port = port

@pulumi.input_type
class NetworkInterfaceIpConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name used for this IP Configuration.
    """
    private_ip_address_allocation: pulumi.Input[str] = pulumi.input_property("privateIpAddressAllocation")
    """
    The allocation method used for the Private IP Address. Possible values are `Dynamic` and `Static`.
    """
    primary: Optional[pulumi.Input[bool]] = pulumi.input_property("primary")
    """
    Is this the Primary IP Configuration? Must be `true` for the first `ip_configuration` when multiple are specified. Defaults to `false`.
    """
    private_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddress")
    """
    The Static IP Address which should be used.
    """
    private_ip_address_version: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddressVersion")
    """
    The IP Version to use. Possible values are `IPv4` or `IPv6`. Defaults to `IPv4`.
    """
    public_ip_address_id: Optional[pulumi.Input[str]] = pulumi.input_property("publicIpAddressId")
    """
    Reference to a Public IP Address to associate with this NIC
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet where this Network Interface should be located in.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], private_ip_address_allocation: pulumi.Input[str], primary: Optional[pulumi.Input[bool]] = None, private_ip_address: Optional[pulumi.Input[str]] = None, private_ip_address_version: Optional[pulumi.Input[str]] = None, public_ip_address_id: Optional[pulumi.Input[str]] = None, subnet_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: A name used for this IP Configuration.
        :param pulumi.Input[str] private_ip_address_allocation: The allocation method used for the Private IP Address. Possible values are `Dynamic` and `Static`.
        :param pulumi.Input[bool] primary: Is this the Primary IP Configuration? Must be `true` for the first `ip_configuration` when multiple are specified. Defaults to `false`.
        :param pulumi.Input[str] private_ip_address: The Static IP Address which should be used.
        :param pulumi.Input[str] private_ip_address_version: The IP Version to use. Possible values are `IPv4` or `IPv6`. Defaults to `IPv4`.
        :param pulumi.Input[str] public_ip_address_id: Reference to a Public IP Address to associate with this NIC
        :param pulumi.Input[str] subnet_id: The ID of the Subnet where this Network Interface should be located in.
        """
        __self__.name = name
        __self__.private_ip_address_allocation = private_ip_address_allocation
        __self__.primary = primary
        __self__.private_ip_address = private_ip_address
        __self__.private_ip_address_version = private_ip_address_version
        __self__.public_ip_address_id = public_ip_address_id
        __self__.subnet_id = subnet_id

@pulumi.input_type
class NetworkPacketCaptureFilterArgs:
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
    """
    local_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("localIpAddress")
    """
    The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    local_port: Optional[pulumi.Input[str]] = pulumi.input_property("localPort")
    """
    The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    remote_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("remoteIpAddress")
    """
    The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
    """
    remote_port: Optional[pulumi.Input[str]] = pulumi.input_property("remotePort")
    """
    The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, protocol: pulumi.Input[str], local_ip_address: Optional[pulumi.Input[str]] = None, local_port: Optional[pulumi.Input[str]] = None, remote_ip_address: Optional[pulumi.Input[str]] = None, remote_port: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] protocol: The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] local_ip_address: The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        :param pulumi.Input[str] local_port: The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        :param pulumi.Input[str] remote_ip_address: The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
        :param pulumi.Input[str] remote_port: The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        __self__.protocol = protocol
        __self__.local_ip_address = local_ip_address
        __self__.local_port = local_port
        __self__.remote_ip_address = remote_ip_address
        __self__.remote_port = remote_port

@pulumi.input_type
class NetworkPacketCaptureStorageLocationArgs:
    file_path: Optional[pulumi.Input[str]] = pulumi.input_property("filePath")
    """
    A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
    """
    storage_account_id: Optional[pulumi.Input[str]] = pulumi.input_property("storageAccountId")
    """
    The ID of the storage account to save the packet capture session
    """
    storage_path: Optional[pulumi.Input[str]] = pulumi.input_property("storagePath")
    """
    The URI of the storage path to save the packet capture.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, file_path: Optional[pulumi.Input[str]] = None, storage_account_id: Optional[pulumi.Input[str]] = None, storage_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] file_path: A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
        :param pulumi.Input[str] storage_account_id: The ID of the storage account to save the packet capture session
        :param pulumi.Input[str] storage_path: The URI of the storage path to save the packet capture.
        """
        __self__.file_path = file_path
        __self__.storage_account_id = storage_account_id
        __self__.storage_path = storage_path

@pulumi.input_type
class NetworkSecurityGroupSecurityRuleArgs:
    access: pulumi.Input[str] = pulumi.input_property("access")
    """
    Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
    """
    direction: pulumi.Input[str] = pulumi.input_property("direction")
    """
    The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the security rule.
    """
    priority: pulumi.Input[float] = pulumi.input_property("priority")
    """
    Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    Network protocol this rule applies to. Can be `Tcp`, `Udp`, `Icmp`, or `*` to match all.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description for this rule. Restricted to 140 characters.
    """
    destination_address_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("destinationAddressPrefix")
    """
    CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
    """
    destination_address_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("destinationAddressPrefixes")
    """
    List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
    """
    destination_application_security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("destinationApplicationSecurityGroupIds")
    """
    A List of destination Application Security Group ID's
    """
    destination_port_range: Optional[pulumi.Input[str]] = pulumi.input_property("destinationPortRange")
    """
    Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
    """
    destination_port_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("destinationPortRanges")
    """
    List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
    """
    source_address_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("sourceAddressPrefix")
    """
    CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
    """
    source_address_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sourceAddressPrefixes")
    """
    List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
    """
    source_application_security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sourceApplicationSecurityGroupIds")
    """
    A List of source Application Security Group ID's
    """
    source_port_range: Optional[pulumi.Input[str]] = pulumi.input_property("sourcePortRange")
    """
    Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
    """
    source_port_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sourcePortRanges")
    """
    List of source ports or port ranges. This is required if `source_port_range` is not specified.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access: pulumi.Input[str], direction: pulumi.Input[str], name: pulumi.Input[str], priority: pulumi.Input[float], protocol: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None, destination_address_prefix: Optional[pulumi.Input[str]] = None, destination_address_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, destination_application_security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, destination_port_range: Optional[pulumi.Input[str]] = None, destination_port_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, source_address_prefix: Optional[pulumi.Input[str]] = None, source_address_prefixes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, source_application_security_group_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, source_port_range: Optional[pulumi.Input[str]] = None, source_port_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] access: Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
        :param pulumi.Input[str] direction: The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
        :param pulumi.Input[str] name: The name of the security rule.
        :param pulumi.Input[float] priority: Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        :param pulumi.Input[str] protocol: Network protocol this rule applies to. Can be `Tcp`, `Udp`, `Icmp`, or `*` to match all.
        :param pulumi.Input[str] description: A description for this rule. Restricted to 140 characters.
        :param pulumi.Input[str] destination_address_prefix: CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] destination_address_prefixes: List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] destination_application_security_group_ids: A List of destination Application Security Group ID's
        :param pulumi.Input[str] destination_port_range: Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] destination_port_ranges: List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
        :param pulumi.Input[str] source_address_prefix: CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] source_address_prefixes: List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] source_application_security_group_ids: A List of source Application Security Group ID's
        :param pulumi.Input[str] source_port_range: Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
        :param pulumi.Input[List[pulumi.Input[str]]] source_port_ranges: List of source ports or port ranges. This is required if `source_port_range` is not specified.
        """
        __self__.access = access
        __self__.direction = direction
        __self__.name = name
        __self__.priority = priority
        __self__.protocol = protocol
        __self__.description = description
        __self__.destination_address_prefix = destination_address_prefix
        __self__.destination_address_prefixes = destination_address_prefixes
        __self__.destination_application_security_group_ids = destination_application_security_group_ids
        __self__.destination_port_range = destination_port_range
        __self__.destination_port_ranges = destination_port_ranges
        __self__.source_address_prefix = source_address_prefix
        __self__.source_address_prefixes = source_address_prefixes
        __self__.source_application_security_group_ids = source_application_security_group_ids
        __self__.source_port_range = source_port_range
        __self__.source_port_ranges = source_port_ranges

@pulumi.input_type
class NetworkWatcherFlowLogRetentionPolicyArgs:
    days: pulumi.Input[float] = pulumi.input_property("days")
    """
    The number of days to retain flow log records.
    """
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Boolean flag to enable/disable traffic analytics.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, days: pulumi.Input[float], enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[float] days: The number of days to retain flow log records.
        :param pulumi.Input[bool] enabled: Boolean flag to enable/disable traffic analytics.
        """
        __self__.days = days
        __self__.enabled = enabled

@pulumi.input_type
class NetworkWatcherFlowLogTrafficAnalyticsArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Boolean flag to enable/disable traffic analytics.
    """
    workspace_id: pulumi.Input[str] = pulumi.input_property("workspaceId")
    """
    The resource guid of the attached workspace.
    """
    workspace_region: pulumi.Input[str] = pulumi.input_property("workspaceRegion")
    """
    The location of the attached workspace.
    """
    workspace_resource_id: pulumi.Input[str] = pulumi.input_property("workspaceResourceId")
    """
    The resource ID of the attached workspace.
    """
    interval_in_minutes: Optional[pulumi.Input[float]] = pulumi.input_property("intervalInMinutes")
    """
    How frequently service should do flow analytics in minutes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], workspace_id: pulumi.Input[str], workspace_region: pulumi.Input[str], workspace_resource_id: pulumi.Input[str], interval_in_minutes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[bool] enabled: Boolean flag to enable/disable traffic analytics.
        :param pulumi.Input[str] workspace_id: The resource guid of the attached workspace.
        :param pulumi.Input[str] workspace_region: The location of the attached workspace.
        :param pulumi.Input[str] workspace_resource_id: The resource ID of the attached workspace.
        :param pulumi.Input[float] interval_in_minutes: How frequently service should do flow analytics in minutes.
        """
        __self__.enabled = enabled
        __self__.workspace_id = workspace_id
        __self__.workspace_region = workspace_region
        __self__.workspace_resource_id = workspace_resource_id
        __self__.interval_in_minutes = interval_in_minutes

@pulumi.input_type
class PacketCaptureFilterArgs:
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
    """
    local_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("localIpAddress")
    """
    The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    local_port: Optional[pulumi.Input[str]] = pulumi.input_property("localPort")
    """
    The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    remote_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("remoteIpAddress")
    """
    The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
    """
    remote_port: Optional[pulumi.Input[str]] = pulumi.input_property("remotePort")
    """
    The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, protocol: pulumi.Input[str], local_ip_address: Optional[pulumi.Input[str]] = None, local_port: Optional[pulumi.Input[str]] = None, remote_ip_address: Optional[pulumi.Input[str]] = None, remote_port: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] protocol: The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] local_ip_address: The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        :param pulumi.Input[str] local_port: The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        :param pulumi.Input[str] remote_ip_address: The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
        :param pulumi.Input[str] remote_port: The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        __self__.protocol = protocol
        __self__.local_ip_address = local_ip_address
        __self__.local_port = local_port
        __self__.remote_ip_address = remote_ip_address
        __self__.remote_port = remote_port

@pulumi.input_type
class PacketCaptureStorageLocationArgs:
    file_path: Optional[pulumi.Input[str]] = pulumi.input_property("filePath")
    """
    A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
    """
    storage_account_id: Optional[pulumi.Input[str]] = pulumi.input_property("storageAccountId")
    """
    The ID of the storage account to save the packet capture session
    """
    storage_path: Optional[pulumi.Input[str]] = pulumi.input_property("storagePath")
    """
    The URI of the storage path to save the packet capture.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, file_path: Optional[pulumi.Input[str]] = None, storage_account_id: Optional[pulumi.Input[str]] = None, storage_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] file_path: A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
        :param pulumi.Input[str] storage_account_id: The ID of the storage account to save the packet capture session
        :param pulumi.Input[str] storage_path: The URI of the storage path to save the packet capture.
        """
        __self__.file_path = file_path
        __self__.storage_account_id = storage_account_id
        __self__.storage_path = storage_path

@pulumi.input_type
class PointToPointVpnGatewayConnectionConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name which should be used for this Connection Configuration.
    """
    vpn_client_address_pool: pulumi.Input['PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPoolArgs'] = pulumi.input_property("vpnClientAddressPool")
    """
    A `vpn_client_address_pool` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], vpn_client_address_pool: pulumi.Input['PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPoolArgs']) -> None:
        """
        :param pulumi.Input[str] name: The Name which should be used for this Connection Configuration.
        :param pulumi.Input['PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPoolArgs'] vpn_client_address_pool: A `vpn_client_address_pool` block as defined below.
        """
        __self__.name = name
        __self__.vpn_client_address_pool = vpn_client_address_pool

@pulumi.input_type
class PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPoolArgs:
    address_prefixes: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("addressPrefixes")
    """
    A list of CIDR Ranges which should be used as Address Prefixes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address_prefixes: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] address_prefixes: A list of CIDR Ranges which should be used as Address Prefixes.
        """
        __self__.address_prefixes = address_prefixes

@pulumi.input_type
class ProfileContainerNetworkInterfaceArgs:
    ip_configurations: pulumi.Input[List[pulumi.Input['ProfileContainerNetworkInterfaceIpConfigurationArgs']]] = pulumi.input_property("ipConfigurations")
    """
    One or more `ip_configuration` blocks as documented below.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the IP Configuration.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ip_configurations: pulumi.Input[List[pulumi.Input['ProfileContainerNetworkInterfaceIpConfigurationArgs']]], name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ProfileContainerNetworkInterfaceIpConfigurationArgs']]] ip_configurations: One or more `ip_configuration` blocks as documented below.
        :param pulumi.Input[str] name: Specifies the name of the IP Configuration.
        """
        __self__.ip_configurations = ip_configurations
        __self__.name = name

@pulumi.input_type
class ProfileContainerNetworkInterfaceIpConfigurationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the IP Configuration.
    """
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    Reference to the subnet associated with the IP Configuration.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], subnet_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the IP Configuration.
        :param pulumi.Input[str] subnet_id: Reference to the subnet associated with the IP Configuration.
        """
        __self__.name = name
        __self__.subnet_id = subnet_id

@pulumi.input_type
class RouteFilterRuleArgs:
    access: pulumi.Input[str] = pulumi.input_property("access")
    """
    The access type of the rule. The only possible value is `Allow`.
    """
    communities: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("communities")
    """
    The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the route filter rule.
    """
    rule_type: pulumi.Input[str] = pulumi.input_property("ruleType")
    """
    The rule type of the rule. The only possible value is `Community`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access: pulumi.Input[str], communities: pulumi.Input[List[pulumi.Input[str]]], name: pulumi.Input[str], rule_type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] access: The access type of the rule. The only possible value is `Allow`.
        :param pulumi.Input[List[pulumi.Input[str]]] communities: The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
        :param pulumi.Input[str] name: The name of the route filter rule.
        :param pulumi.Input[str] rule_type: The rule type of the rule. The only possible value is `Community`.
        """
        __self__.access = access
        __self__.communities = communities
        __self__.name = name
        __self__.rule_type = rule_type

@pulumi.input_type
class RouteTableRouteArgs:
    address_prefix: pulumi.Input[str] = pulumi.input_property("addressPrefix")
    """
    The destination CIDR to which the route applies, such as 10.1.0.0/16
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the route.
    """
    next_hop_type: pulumi.Input[str] = pulumi.input_property("nextHopType")
    """
    The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`.
    """
    next_hop_in_ip_address: Optional[pulumi.Input[str]] = pulumi.input_property("nextHopInIpAddress")
    """
    Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address_prefix: pulumi.Input[str], name: pulumi.Input[str], next_hop_type: pulumi.Input[str], next_hop_in_ip_address: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] address_prefix: The destination CIDR to which the route applies, such as 10.1.0.0/16
        :param pulumi.Input[str] name: The name of the route.
        :param pulumi.Input[str] next_hop_type: The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`.
        :param pulumi.Input[str] next_hop_in_ip_address: Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
        """
        __self__.address_prefix = address_prefix
        __self__.name = name
        __self__.next_hop_type = next_hop_type
        __self__.next_hop_in_ip_address = next_hop_in_ip_address

@pulumi.input_type
class SubnetDelegationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name for this delegation.
    """
    service_delegation: pulumi.Input['SubnetDelegationServiceDelegationArgs'] = pulumi.input_property("serviceDelegation")
    """
    A `service_delegation` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], service_delegation: pulumi.Input['SubnetDelegationServiceDelegationArgs']) -> None:
        """
        :param pulumi.Input[str] name: A name for this delegation.
        :param pulumi.Input['SubnetDelegationServiceDelegationArgs'] service_delegation: A `service_delegation` block as defined below.
        """
        __self__.name = name
        __self__.service_delegation = service_delegation

@pulumi.input_type
class SubnetDelegationServiceDelegationArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of service to delegate to. Possible values include `Microsoft.BareMetal/AzureVMware`, `Microsoft.BareMetal/CrayServers`, `Microsoft.Batch/batchAccounts`, `Microsoft.ContainerInstance/containerGroups`, `Microsoft.Databricks/workspaces`, `Microsoft.DBforPostgreSQL/serversv2`, `Microsoft.HardwareSecurityModules/dedicatedHSMs`, `Microsoft.Logic/integrationServiceEnvironments`, `Microsoft.Netapp/volumes`, `Microsoft.ServiceFabricMesh/networks`, `Microsoft.Sql/managedInstances`, `Microsoft.Sql/servers`, `Microsoft.StreamAnalytics/streamingJobs`, `Microsoft.Web/hostingEnvironments` and `Microsoft.Web/serverFarms`.
    """
    actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("actions")
    """
    A list of Actions which should be delegated. This list is specific to the service to delegate to. Possible values include `Microsoft.Network/networkinterfaces/*`, `Microsoft.Network/virtualNetworks/subnets/action`, `Microsoft.Network/virtualNetworks/subnets/join/action`, `Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action` and `Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], actions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The name of service to delegate to. Possible values include `Microsoft.BareMetal/AzureVMware`, `Microsoft.BareMetal/CrayServers`, `Microsoft.Batch/batchAccounts`, `Microsoft.ContainerInstance/containerGroups`, `Microsoft.Databricks/workspaces`, `Microsoft.DBforPostgreSQL/serversv2`, `Microsoft.HardwareSecurityModules/dedicatedHSMs`, `Microsoft.Logic/integrationServiceEnvironments`, `Microsoft.Netapp/volumes`, `Microsoft.ServiceFabricMesh/networks`, `Microsoft.Sql/managedInstances`, `Microsoft.Sql/servers`, `Microsoft.StreamAnalytics/streamingJobs`, `Microsoft.Web/hostingEnvironments` and `Microsoft.Web/serverFarms`.
        :param pulumi.Input[List[pulumi.Input[str]]] actions: A list of Actions which should be delegated. This list is specific to the service to delegate to. Possible values include `Microsoft.Network/networkinterfaces/*`, `Microsoft.Network/virtualNetworks/subnets/action`, `Microsoft.Network/virtualNetworks/subnets/join/action`, `Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action` and `Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action`.
        """
        __self__.name = name
        __self__.actions = actions

@pulumi.input_type
class TrafficManagerEndpointCustomHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the custom header.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The value of custom header. Applicable for Http and Https protocol.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the custom header.
        :param pulumi.Input[str] value: The value of custom header. Applicable for Http and Https protocol.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class TrafficManagerEndpointSubnetArgs:
    first: pulumi.Input[str] = pulumi.input_property("first")
    """
    The First IP....
    """
    last: Optional[pulumi.Input[str]] = pulumi.input_property("last")
    """
    The Last IP...
    """
    scope: Optional[pulumi.Input[float]] = pulumi.input_property("scope")
    """
    The Scope...
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, first: pulumi.Input[str], last: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] first: The First IP....
        :param pulumi.Input[str] last: The Last IP...
        :param pulumi.Input[float] scope: The Scope...
        """
        __self__.first = first
        __self__.last = last
        __self__.scope = scope

@pulumi.input_type
class TrafficManagerProfileDnsConfigArgs:
    relative_name: pulumi.Input[str] = pulumi.input_property("relativeName")
    """
    The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
    """
    ttl: pulumi.Input[float] = pulumi.input_property("ttl")
    """
    The TTL value of the Profile used by Local DNS resolvers and clients.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, relative_name: pulumi.Input[str], ttl: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] relative_name: The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
        :param pulumi.Input[float] ttl: The TTL value of the Profile used by Local DNS resolvers and clients.
        """
        __self__.relative_name = relative_name
        __self__.ttl = ttl

@pulumi.input_type
class TrafficManagerProfileMonitorConfigArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port number used by the monitoring checks.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
    """
    custom_headers: Optional[pulumi.Input[List[pulumi.Input['TrafficManagerProfileMonitorConfigCustomHeaderArgs']]]] = pulumi.input_property("customHeaders")
    """
    One or more `custom_header` blocks as defined below.
    """
    expected_status_code_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("expectedStatusCodeRanges")
    """
    A list of status code ranges in the format of `100-101`.
    """
    interval_in_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("intervalInSeconds")
    """
    The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
    """
    timeout_in_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("timeoutInSeconds")
    """
    The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
    """
    tolerated_number_of_failures: Optional[pulumi.Input[float]] = pulumi.input_property("toleratedNumberOfFailures")
    """
    The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], protocol: pulumi.Input[str], custom_headers: Optional[pulumi.Input[List[pulumi.Input['TrafficManagerProfileMonitorConfigCustomHeaderArgs']]]] = None, expected_status_code_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, interval_in_seconds: Optional[pulumi.Input[float]] = None, path: Optional[pulumi.Input[str]] = None, timeout_in_seconds: Optional[pulumi.Input[float]] = None, tolerated_number_of_failures: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[float] port: The port number used by the monitoring checks.
        :param pulumi.Input[str] protocol: The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
        :param pulumi.Input[List[pulumi.Input['TrafficManagerProfileMonitorConfigCustomHeaderArgs']]] custom_headers: One or more `custom_header` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] expected_status_code_ranges: A list of status code ranges in the format of `100-101`.
        :param pulumi.Input[float] interval_in_seconds: The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
        :param pulumi.Input[str] path: The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
        :param pulumi.Input[float] timeout_in_seconds: The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
        :param pulumi.Input[float] tolerated_number_of_failures: The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
        """
        __self__.port = port
        __self__.protocol = protocol
        __self__.custom_headers = custom_headers
        __self__.expected_status_code_ranges = expected_status_code_ranges
        __self__.interval_in_seconds = interval_in_seconds
        __self__.path = path
        __self__.timeout_in_seconds = timeout_in_seconds
        __self__.tolerated_number_of_failures = tolerated_number_of_failures

@pulumi.input_type
class TrafficManagerProfileMonitorConfigCustomHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the custom header.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The value of custom header. Applicable for Http and Https protocol.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the custom header.
        :param pulumi.Input[str] value: The value of custom header. Applicable for Http and Https protocol.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class VirtualHubRouteArgs:
    address_prefixes: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("addressPrefixes")
    """
    A list of Address Prefixes.
    """
    next_hop_ip_address: pulumi.Input[str] = pulumi.input_property("nextHopIpAddress")
    """
    The IP Address that Packets should be forwarded to as the Next Hop.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address_prefixes: pulumi.Input[List[pulumi.Input[str]]], next_hop_ip_address: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] address_prefixes: A list of Address Prefixes.
        :param pulumi.Input[str] next_hop_ip_address: The IP Address that Packets should be forwarded to as the Next Hop.
        """
        __self__.address_prefixes = address_prefixes
        __self__.next_hop_ip_address = next_hop_ip_address

@pulumi.input_type
class VirtualNetworkDdosProtectionPlanArgs:
    enable: pulumi.Input[bool] = pulumi.input_property("enable")
    """
    Enable/disable DDoS Protection Plan on Virtual Network.
    """
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The Resource ID of DDoS Protection Plan.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enable: pulumi.Input[bool], id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] enable: Enable/disable DDoS Protection Plan on Virtual Network.
        :param pulumi.Input[str] id: The Resource ID of DDoS Protection Plan.
        """
        __self__.enable = enable
        __self__.id = id

@pulumi.input_type
class VirtualNetworkGatewayBgpSettingsArgs:
    asn: Optional[pulumi.Input[float]] = pulumi.input_property("asn")
    """
    The Autonomous System Number (ASN) to use as part of the BGP.
    """
    peer_weight: Optional[pulumi.Input[float]] = pulumi.input_property("peerWeight")
    """
    The weight added to routes which have been learned
    through BGP peering. Valid values can be between `0` and `100`.
    """
    peering_address: Optional[pulumi.Input[str]] = pulumi.input_property("peeringAddress")
    """
    The BGP peer IP address of the virtual network
    gateway. This address is needed to configure the created gateway as a BGP Peer
    on the on-premises VPN devices. The IP address must be part of the subnet of
    the Virtual Network Gateway. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, asn: Optional[pulumi.Input[float]] = None, peer_weight: Optional[pulumi.Input[float]] = None, peering_address: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] asn: The Autonomous System Number (ASN) to use as part of the BGP.
        :param pulumi.Input[float] peer_weight: The weight added to routes which have been learned
               through BGP peering. Valid values can be between `0` and `100`.
        :param pulumi.Input[str] peering_address: The BGP peer IP address of the virtual network
               gateway. This address is needed to configure the created gateway as a BGP Peer
               on the on-premises VPN devices. The IP address must be part of the subnet of
               the Virtual Network Gateway. Changing this forces a new resource to be created.
        """
        __self__.asn = asn
        __self__.peer_weight = peer_weight
        __self__.peering_address = peering_address

@pulumi.input_type
class VirtualNetworkGatewayConnectionIpsecPolicyArgs:
    dh_group: pulumi.Input[str] = pulumi.input_property("dhGroup")
    """
    The DH group used in IKE phase 1 for initial SA. Valid
    options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
    `ECP256`, `ECP384`, or `None`.
    """
    ike_encryption: pulumi.Input[str] = pulumi.input_property("ikeEncryption")
    """
    The IKE encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
    """
    ike_integrity: pulumi.Input[str] = pulumi.input_property("ikeIntegrity")
    """
    The IKE integrity algorithm. Valid
    options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
    """
    ipsec_encryption: pulumi.Input[str] = pulumi.input_property("ipsecEncryption")
    """
    The IPSec encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
    """
    ipsec_integrity: pulumi.Input[str] = pulumi.input_property("ipsecIntegrity")
    """
    The IPSec integrity algorithm. Valid
    options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
    """
    pfs_group: pulumi.Input[str] = pulumi.input_property("pfsGroup")
    """
    The DH group used in IKE phase 2 for new child SA.
    Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
    or `None`.
    """
    sa_datasize: Optional[pulumi.Input[float]] = pulumi.input_property("saDatasize")
    """
    The IPSec SA payload size in KB. Must be at least
    `1024` KB. Defaults to `102400000` KB.
    """
    sa_lifetime: Optional[pulumi.Input[float]] = pulumi.input_property("saLifetime")
    """
    The IPSec SA lifetime in seconds. Must be at least
    `300` seconds. Defaults to `27000` seconds.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dh_group: pulumi.Input[str], ike_encryption: pulumi.Input[str], ike_integrity: pulumi.Input[str], ipsec_encryption: pulumi.Input[str], ipsec_integrity: pulumi.Input[str], pfs_group: pulumi.Input[str], sa_datasize: Optional[pulumi.Input[float]] = None, sa_lifetime: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] dh_group: The DH group used in IKE phase 1 for initial SA. Valid
               options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
               `ECP256`, `ECP384`, or `None`.
        :param pulumi.Input[str] ike_encryption: The IKE encryption algorithm. Valid
               options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
        :param pulumi.Input[str] ike_integrity: The IKE integrity algorithm. Valid
               options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
        :param pulumi.Input[str] ipsec_encryption: The IPSec encryption algorithm. Valid
               options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
        :param pulumi.Input[str] ipsec_integrity: The IPSec integrity algorithm. Valid
               options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
        :param pulumi.Input[str] pfs_group: The DH group used in IKE phase 2 for new child SA.
               Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
               or `None`.
        :param pulumi.Input[float] sa_datasize: The IPSec SA payload size in KB. Must be at least
               `1024` KB. Defaults to `102400000` KB.
        :param pulumi.Input[float] sa_lifetime: The IPSec SA lifetime in seconds. Must be at least
               `300` seconds. Defaults to `27000` seconds.
        """
        __self__.dh_group = dh_group
        __self__.ike_encryption = ike_encryption
        __self__.ike_integrity = ike_integrity
        __self__.ipsec_encryption = ipsec_encryption
        __self__.ipsec_integrity = ipsec_integrity
        __self__.pfs_group = pfs_group
        __self__.sa_datasize = sa_datasize
        __self__.sa_lifetime = sa_lifetime

@pulumi.input_type
class VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs:
    local_address_cidrs: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("localAddressCidrs")
    remote_address_cidrs: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("remoteAddressCidrs")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, local_address_cidrs: pulumi.Input[List[pulumi.Input[str]]], remote_address_cidrs: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        __self__.local_address_cidrs = local_address_cidrs
        __self__.remote_address_cidrs = remote_address_cidrs

@pulumi.input_type
class VirtualNetworkGatewayIpConfigurationArgs:
    public_ip_address_id: pulumi.Input[str] = pulumi.input_property("publicIpAddressId")
    """
    The ID of the public ip address to associate
    with the Virtual Network Gateway.
    """
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    The ID of the gateway subnet of a virtual network in
    which the virtual network gateway will be created. It is mandatory that
    the associated subnet is named `GatewaySubnet`. Therefore, each virtual
    network can contain at most a single Virtual Network Gateway.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    private_ip_address_allocation: Optional[pulumi.Input[str]] = pulumi.input_property("privateIpAddressAllocation")
    """
    Defines how the private IP address
    of the gateways virtual interface is assigned. Valid options are `Static` or
    `Dynamic`. Defaults to `Dynamic`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, public_ip_address_id: pulumi.Input[str], subnet_id: pulumi.Input[str], name: Optional[pulumi.Input[str]] = None, private_ip_address_allocation: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] public_ip_address_id: The ID of the public ip address to associate
               with the Virtual Network Gateway.
        :param pulumi.Input[str] subnet_id: The ID of the gateway subnet of a virtual network in
               which the virtual network gateway will be created. It is mandatory that
               the associated subnet is named `GatewaySubnet`. Therefore, each virtual
               network can contain at most a single Virtual Network Gateway.
        :param pulumi.Input[str] name: A user-defined name of the revoked certificate.
        :param pulumi.Input[str] private_ip_address_allocation: Defines how the private IP address
               of the gateways virtual interface is assigned. Valid options are `Static` or
               `Dynamic`. Defaults to `Dynamic`.
        """
        __self__.public_ip_address_id = public_ip_address_id
        __self__.subnet_id = subnet_id
        __self__.name = name
        __self__.private_ip_address_allocation = private_ip_address_allocation

@pulumi.input_type
class VirtualNetworkGatewayVpnClientConfigurationArgs:
    address_spaces: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("addressSpaces")
    """
    The address space out of which ip addresses for
    vpn clients will be taken. You can provide more than one address space, e.g.
    in CIDR notation.
    """
    radius_server_address: Optional[pulumi.Input[str]] = pulumi.input_property("radiusServerAddress")
    """
    The address of the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    radius_server_secret: Optional[pulumi.Input[str]] = pulumi.input_property("radiusServerSecret")
    """
    The secret used by the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    revoked_certificates: Optional[pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs']]]] = pulumi.input_property("revokedCertificates")
    """
    One or more `revoked_certificate` blocks which
    are defined below.
    This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
    """
    root_certificates: Optional[pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs']]]] = pulumi.input_property("rootCertificates")
    """
    One or more `root_certificate` blocks which are
    defined below. These root certificates are used to sign the client certificate
    used by the VPN clients to connect to the gateway.
    This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
    """
    vpn_client_protocols: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("vpnClientProtocols")
    """
    List of the protocols supported by the vpn client.
    The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address_spaces: pulumi.Input[List[pulumi.Input[str]]], radius_server_address: Optional[pulumi.Input[str]] = None, radius_server_secret: Optional[pulumi.Input[str]] = None, revoked_certificates: Optional[pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs']]]] = None, root_certificates: Optional[pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs']]]] = None, vpn_client_protocols: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] address_spaces: The address space out of which ip addresses for
               vpn clients will be taken. You can provide more than one address space, e.g.
               in CIDR notation.
        :param pulumi.Input[str] radius_server_address: The address of the Radius server.
               This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        :param pulumi.Input[str] radius_server_secret: The secret used by the Radius server.
               This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        :param pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs']]] revoked_certificates: One or more `revoked_certificate` blocks which
               are defined below.
               This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        :param pulumi.Input[List[pulumi.Input['VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs']]] root_certificates: One or more `root_certificate` blocks which are
               defined below. These root certificates are used to sign the client certificate
               used by the VPN clients to connect to the gateway.
               This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        :param pulumi.Input[List[pulumi.Input[str]]] vpn_client_protocols: List of the protocols supported by the vpn client.
               The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        """
        __self__.address_spaces = address_spaces
        __self__.radius_server_address = radius_server_address
        __self__.radius_server_secret = radius_server_secret
        __self__.revoked_certificates = revoked_certificates
        __self__.root_certificates = root_certificates
        __self__.vpn_client_protocols = vpn_client_protocols

@pulumi.input_type
class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    thumbprint: pulumi.Input[str] = pulumi.input_property("thumbprint")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], thumbprint: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A user-defined name of the revoked certificate.
        """
        __self__.name = name
        __self__.thumbprint = thumbprint

@pulumi.input_type
class VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    public_cert_data: pulumi.Input[str] = pulumi.input_property("publicCertData")
    """
    The SHA1 thumbprint of the certificate to be
    revoked.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], public_cert_data: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A user-defined name of the revoked certificate.
        :param pulumi.Input[str] public_cert_data: The SHA1 thumbprint of the certificate to be
               revoked.
        """
        __self__.name = name
        __self__.public_cert_data = public_cert_data

@pulumi.input_type
class VirtualNetworkSubnetArgs:
    address_prefix: pulumi.Input[str] = pulumi.input_property("addressPrefix")
    """
    The address prefix to use for the subnet.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the virtual network. Changing this forces a
    new resource to be created.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The Resource ID of DDoS Protection Plan.
    """
    security_group: Optional[pulumi.Input[str]] = pulumi.input_property("securityGroup")
    """
    The Network Security Group to associate with
    the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address_prefix: pulumi.Input[str], name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, security_group: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] address_prefix: The address prefix to use for the subnet.
        :param pulumi.Input[str] name: The name of the virtual network. Changing this forces a
               new resource to be created.
        :param pulumi.Input[str] id: The Resource ID of DDoS Protection Plan.
        :param pulumi.Input[str] security_group: The Network Security Group to associate with
               the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
        """
        __self__.address_prefix = address_prefix
        __self__.name = name
        __self__.id = id
        __self__.security_group = security_group

@pulumi.input_type
class VpnGatewayBgpSettingArgs:
    asn: pulumi.Input[float] = pulumi.input_property("asn")
    """
    The ASN of the BGP Speaker. Changing this forces a new resource to be created.
    """
    peer_weight: pulumi.Input[float] = pulumi.input_property("peerWeight")
    """
    The weight added to Routes learned from this BGP Speaker. Changing this forces a new resource to be created.
    """
    bgp_peering_address: Optional[pulumi.Input[str]] = pulumi.input_property("bgpPeeringAddress")
    """
    The Address which should be used for the BGP Peering.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, asn: pulumi.Input[float], peer_weight: pulumi.Input[float], bgp_peering_address: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] asn: The ASN of the BGP Speaker. Changing this forces a new resource to be created.
        :param pulumi.Input[float] peer_weight: The weight added to Routes learned from this BGP Speaker. Changing this forces a new resource to be created.
        :param pulumi.Input[str] bgp_peering_address: The Address which should be used for the BGP Peering.
        """
        __self__.asn = asn
        __self__.peer_weight = peer_weight
        __self__.bgp_peering_address = bgp_peering_address

@pulumi.input_type
class VpnServerConfigurationAzureActiveDirectoryAuthenticationArgs:
    audience: pulumi.Input[str] = pulumi.input_property("audience")
    """
    The Audience which should be used for authentication.
    """
    issuer: pulumi.Input[str] = pulumi.input_property("issuer")
    """
    The Issuer which should be used for authentication.
    """
    tenant: pulumi.Input[str] = pulumi.input_property("tenant")
    """
    The Tenant which should be used for authentication.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, audience: pulumi.Input[str], issuer: pulumi.Input[str], tenant: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] audience: The Audience which should be used for authentication.
        :param pulumi.Input[str] issuer: The Issuer which should be used for authentication.
        :param pulumi.Input[str] tenant: The Tenant which should be used for authentication.
        """
        __self__.audience = audience
        __self__.issuer = issuer
        __self__.tenant = tenant

@pulumi.input_type
class VpnServerConfigurationClientRevokedCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    thumbprint: pulumi.Input[str] = pulumi.input_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], thumbprint: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A name used to uniquely identify this certificate.
        :param pulumi.Input[str] thumbprint: The Thumbprint of the Certificate.
        """
        __self__.name = name
        __self__.thumbprint = thumbprint

@pulumi.input_type
class VpnServerConfigurationClientRootCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    public_cert_data: pulumi.Input[str] = pulumi.input_property("publicCertData")
    """
    The Public Key Data associated with the Certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], public_cert_data: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A name used to uniquely identify this certificate.
        :param pulumi.Input[str] public_cert_data: The Public Key Data associated with the Certificate.
        """
        __self__.name = name
        __self__.public_cert_data = public_cert_data

@pulumi.input_type
class VpnServerConfigurationIpsecPolicyArgs:
    dh_group: pulumi.Input[str] = pulumi.input_property("dhGroup")
    """
    The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
    """
    ike_encryption: pulumi.Input[str] = pulumi.input_property("ikeEncryption")
    """
    The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
    """
    ike_integrity: pulumi.Input[str] = pulumi.input_property("ikeIntegrity")
    """
    The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
    """
    ipsec_encryption: pulumi.Input[str] = pulumi.input_property("ipsecEncryption")
    """
    The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
    """
    ipsec_integrity: pulumi.Input[str] = pulumi.input_property("ipsecIntegrity")
    """
    The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
    """
    pfs_group: pulumi.Input[str] = pulumi.input_property("pfsGroup")
    """
    The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
    """
    sa_data_size_kilobytes: pulumi.Input[float] = pulumi.input_property("saDataSizeKilobytes")
    """
    The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
    """
    sa_lifetime_seconds: pulumi.Input[float] = pulumi.input_property("saLifetimeSeconds")
    """
    The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dh_group: pulumi.Input[str], ike_encryption: pulumi.Input[str], ike_integrity: pulumi.Input[str], ipsec_encryption: pulumi.Input[str], ipsec_integrity: pulumi.Input[str], pfs_group: pulumi.Input[str], sa_data_size_kilobytes: pulumi.Input[float], sa_lifetime_seconds: pulumi.Input[float]) -> None:
        """
        :param pulumi.Input[str] dh_group: The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
        :param pulumi.Input[str] ike_encryption: The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
        :param pulumi.Input[str] ike_integrity: The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
        :param pulumi.Input[str] ipsec_encryption: The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
        :param pulumi.Input[str] ipsec_integrity: The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
        :param pulumi.Input[str] pfs_group: The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
        :param pulumi.Input[float] sa_data_size_kilobytes: The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
        :param pulumi.Input[float] sa_lifetime_seconds: The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
        """
        __self__.dh_group = dh_group
        __self__.ike_encryption = ike_encryption
        __self__.ike_integrity = ike_integrity
        __self__.ipsec_encryption = ipsec_encryption
        __self__.ipsec_integrity = ipsec_integrity
        __self__.pfs_group = pfs_group
        __self__.sa_data_size_kilobytes = sa_data_size_kilobytes
        __self__.sa_lifetime_seconds = sa_lifetime_seconds

@pulumi.input_type
class VpnServerConfigurationRadiusServerArgs:
    address: pulumi.Input[str] = pulumi.input_property("address")
    """
    The Address of the Radius Server.
    """
    secret: pulumi.Input[str] = pulumi.input_property("secret")
    """
    The Secret used to communicate with the Radius Server.
    """
    server_root_certificates: pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerServerRootCertificateArgs']]] = pulumi.input_property("serverRootCertificates")
    """
    One or more `server_root_certificate` blocks as defined below.
    """
    client_root_certificates: Optional[pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerClientRootCertificateArgs']]]] = pulumi.input_property("clientRootCertificates")
    """
    One or more `client_root_certificate` blocks as defined above.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address: pulumi.Input[str], secret: pulumi.Input[str], server_root_certificates: pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerServerRootCertificateArgs']]], client_root_certificates: Optional[pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerClientRootCertificateArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] address: The Address of the Radius Server.
        :param pulumi.Input[str] secret: The Secret used to communicate with the Radius Server.
        :param pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerServerRootCertificateArgs']]] server_root_certificates: One or more `server_root_certificate` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input['VpnServerConfigurationRadiusServerClientRootCertificateArgs']]] client_root_certificates: One or more `client_root_certificate` blocks as defined above.
        """
        __self__.address = address
        __self__.secret = secret
        __self__.server_root_certificates = server_root_certificates
        __self__.client_root_certificates = client_root_certificates

@pulumi.input_type
class VpnServerConfigurationRadiusServerClientRootCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    thumbprint: pulumi.Input[str] = pulumi.input_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], thumbprint: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A name used to uniquely identify this certificate.
        :param pulumi.Input[str] thumbprint: The Thumbprint of the Certificate.
        """
        __self__.name = name
        __self__.thumbprint = thumbprint

@pulumi.input_type
class VpnServerConfigurationRadiusServerServerRootCertificateArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    public_cert_data: pulumi.Input[str] = pulumi.input_property("publicCertData")
    """
    The Public Key Data associated with the Certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], public_cert_data: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: A name used to uniquely identify this certificate.
        :param pulumi.Input[str] public_cert_data: The Public Key Data associated with the Certificate.
        """
        __self__.name = name
        __self__.public_cert_data = public_cert_data

