# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApplicationGatewayAuthenticationCertificate',
    'ApplicationGatewayAutoscaleConfiguration',
    'ApplicationGatewayBackendAddressPool',
    'ApplicationGatewayBackendHttpSetting',
    'ApplicationGatewayBackendHttpSettingAuthenticationCertificate',
    'ApplicationGatewayBackendHttpSettingConnectionDraining',
    'ApplicationGatewayCustomErrorConfiguration',
    'ApplicationGatewayFrontendIpConfiguration',
    'ApplicationGatewayFrontendPort',
    'ApplicationGatewayGatewayIpConfiguration',
    'ApplicationGatewayHttpListener',
    'ApplicationGatewayHttpListenerCustomErrorConfiguration',
    'ApplicationGatewayIdentity',
    'ApplicationGatewayProbe',
    'ApplicationGatewayProbeMatch',
    'ApplicationGatewayRedirectConfiguration',
    'ApplicationGatewayRequestRoutingRule',
    'ApplicationGatewayRewriteRuleSet',
    'ApplicationGatewayRewriteRuleSetRewriteRule',
    'ApplicationGatewayRewriteRuleSetRewriteRuleCondition',
    'ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration',
    'ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration',
    'ApplicationGatewaySku',
    'ApplicationGatewaySslCertificate',
    'ApplicationGatewaySslPolicy',
    'ApplicationGatewayTrustedRootCertificate',
    'ApplicationGatewayUrlPathMap',
    'ApplicationGatewayUrlPathMapPathRule',
    'ApplicationGatewayWafConfiguration',
    'ApplicationGatewayWafConfigurationDisabledRuleGroup',
    'ApplicationGatewayWafConfigurationExclusion',
    'ExpressRouteCircuitPeeringMicrosoftPeeringConfig',
    'ExpressRouteCircuitSku',
    'FirewallApplicationRuleCollectionRule',
    'FirewallApplicationRuleCollectionRuleProtocol',
    'FirewallIpConfiguration',
    'FirewallNatRuleCollectionRule',
    'FirewallNetworkRuleCollectionRule',
    'LocalNetworkGatewayBgpSettings',
    'NetworkConnectionMonitorDestination',
    'NetworkConnectionMonitorSource',
    'NetworkInterfaceIpConfiguration',
    'NetworkPacketCaptureFilter',
    'NetworkPacketCaptureStorageLocation',
    'NetworkSecurityGroupSecurityRule',
    'NetworkWatcherFlowLogRetentionPolicy',
    'NetworkWatcherFlowLogTrafficAnalytics',
    'PacketCaptureFilter',
    'PacketCaptureStorageLocation',
    'PointToPointVpnGatewayConnectionConfiguration',
    'PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool',
    'ProfileContainerNetworkInterface',
    'ProfileContainerNetworkInterfaceIpConfiguration',
    'RouteFilterRule',
    'RouteTableRoute',
    'SubnetDelegation',
    'SubnetDelegationServiceDelegation',
    'TrafficManagerEndpointCustomHeader',
    'TrafficManagerEndpointSubnet',
    'TrafficManagerProfileDnsConfig',
    'TrafficManagerProfileMonitorConfig',
    'TrafficManagerProfileMonitorConfigCustomHeader',
    'VirtualHubRoute',
    'VirtualNetworkDdosProtectionPlan',
    'VirtualNetworkGatewayBgpSettings',
    'VirtualNetworkGatewayConnectionIpsecPolicy',
    'VirtualNetworkGatewayConnectionTrafficSelectorPolicy',
    'VirtualNetworkGatewayIpConfiguration',
    'VirtualNetworkGatewayVpnClientConfiguration',
    'VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate',
    'VirtualNetworkGatewayVpnClientConfigurationRootCertificate',
    'VirtualNetworkSubnet',
    'VpnGatewayBgpSetting',
    'VpnServerConfigurationAzureActiveDirectoryAuthentication',
    'VpnServerConfigurationClientRevokedCertificate',
    'VpnServerConfigurationClientRootCertificate',
    'VpnServerConfigurationIpsecPolicy',
    'VpnServerConfigurationRadiusServer',
    'VpnServerConfigurationRadiusServerClientRootCertificate',
    'VpnServerConfigurationRadiusServerServerRootCertificate',
    'GetExpressRouteCircuitPeering',
    'GetExpressRouteCircuitServiceProviderProperty',
    'GetExpressRouteCircuitSku',
    'GetFirewallIpConfiguration',
    'GetGatewayConnectionIpsecPolicy',
    'GetGatewayConnectionTrafficSelectorPolicy',
    'GetNetworkInterfaceIpConfiguration',
    'GetNetworkSecurityGroupSecurityRule',
    'GetPublicIPsPublicIp',
    'GetRouteFilterRule',
    'GetRouteTableRoute',
    'GetVirtualNetworkGatewayBgpSetting',
    'GetVirtualNetworkGatewayIpConfiguration',
    'GetVirtualNetworkGatewayVpnClientConfiguration',
    'GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate',
    'GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate',
]

@pulumi.output_type
class ApplicationGatewayAuthenticationCertificate(dict):
    data: str = pulumi.output_property("data")
    """
    The contents of the Authentication Certificate which should be used.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Authentication Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayAutoscaleConfiguration(dict):
    max_capacity: Optional[float] = pulumi.output_property("maxCapacity")
    """
    Maximum capacity for autoscaling. Accepted values are in the range `2` to `125`.
    """
    min_capacity: float = pulumi.output_property("minCapacity")
    """
    Minimum capacity for autoscaling. Accepted values are in the range `0` to `100`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendAddressPool(dict):
    fqdns: Optional[List[str]] = pulumi.output_property("fqdns")
    """
    A list of FQDN's which should be part of the Backend Address Pool.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    ip_addresses: Optional[List[str]] = pulumi.output_property("ipAddresses")
    """
    A list of IP Addresses which should be part of the Backend Address Pool.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Backend Address Pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSetting(dict):
    affinity_cookie_name: Optional[str] = pulumi.output_property("affinityCookieName")
    """
    The name of the affinity cookie.
    """
    authentication_certificates: Optional[List['outputs.ApplicationGatewayBackendHttpSettingAuthenticationCertificate']] = pulumi.output_property("authenticationCertificates")
    """
    One or more `authentication_certificate` blocks.
    """
    connection_draining: Optional['outputs.ApplicationGatewayBackendHttpSettingConnectionDraining'] = pulumi.output_property("connectionDraining")
    """
    A `connection_draining` block as defined below.
    """
    cookie_based_affinity: str = pulumi.output_property("cookieBasedAffinity")
    """
    Is Cookie-Based Affinity enabled? Possible values are `Enabled` and `Disabled`.
    """
    host_name: Optional[str] = pulumi.output_property("hostName")
    """
    Host header to be sent to the backend servers. Cannot be set if `pick_host_name_from_backend_address` is set to `true`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Backend HTTP Settings Collection.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The Path which should be used as a prefix for all HTTP requests.
    """
    pick_host_name_from_backend_address: Optional[bool] = pulumi.output_property("pickHostNameFromBackendAddress")
    """
    Whether host header should be picked from the host name of the backend server. Defaults to `false`.
    """
    port: float = pulumi.output_property("port")
    """
    The port which should be used for this Backend HTTP Settings Collection.
    """
    probe_id: Optional[str] = pulumi.output_property("probeId")
    """
    The ID of the associated Probe.
    """
    probe_name: Optional[str] = pulumi.output_property("probeName")
    """
    The name of an associated HTTP Probe.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol which should be used. Possible values are `Http` and `Https`.
    """
    request_timeout: Optional[float] = pulumi.output_property("requestTimeout")
    """
    The request timeout in seconds, which must be between 1 and 86400 seconds.
    """
    trusted_root_certificate_names: Optional[List[str]] = pulumi.output_property("trustedRootCertificateNames")
    """
    A list of `trusted_root_certificate` names.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSettingAuthenticationCertificate(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Authentication Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSettingConnectionDraining(dict):
    drain_timeout_sec: float = pulumi.output_property("drainTimeoutSec")
    """
    The number of seconds connection draining is active. Acceptable values are from `1` second to `3600` seconds.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    If connection draining is enabled or not.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayCustomErrorConfiguration(dict):
    custom_error_page_url: str = pulumi.output_property("customErrorPageUrl")
    """
    Error page URL of the application gateway customer error.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    status_code: str = pulumi.output_property("statusCode")
    """
    Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayFrontendIpConfiguration(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Frontend IP Configuration.
    """
    private_ip_address: Optional[str] = pulumi.output_property("privateIpAddress")
    """
    The Private IP Address to use for the Application Gateway.
    """
    private_ip_address_allocation: Optional[str] = pulumi.output_property("privateIpAddressAllocation")
    """
    The Allocation Method for the Private IP Address. Possible values are `Dynamic` and `Static`.
    """
    public_ip_address_id: Optional[str] = pulumi.output_property("publicIpAddressId")
    """
    The ID of a Public IP Address which the Application Gateway should use.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayFrontendPort(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Frontend Port.
    """
    port: float = pulumi.output_property("port")
    """
    The port used for this Frontend Port.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayGatewayIpConfiguration(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Gateway IP Configuration.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ID of the Subnet which the Application Gateway should be connected to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayHttpListener(dict):
    custom_error_configurations: Optional[List['outputs.ApplicationGatewayHttpListenerCustomErrorConfiguration']] = pulumi.output_property("customErrorConfigurations")
    """
    One or more `custom_error_configuration` blocks as defined below.
    """
    firewall_policy_id: Optional[str] = pulumi.output_property("firewallPolicyId")
    """
    The ID of the Web Application Firewall Policy which should be used as a HTTP Listener.
    """
    frontend_ip_configuration_id: Optional[str] = pulumi.output_property("frontendIpConfigurationId")
    """
    The ID of the associated Frontend Configuration.
    """
    frontend_ip_configuration_name: str = pulumi.output_property("frontendIpConfigurationName")
    """
    The Name of the Frontend IP Configuration used for this HTTP Listener.
    """
    frontend_port_id: Optional[str] = pulumi.output_property("frontendPortId")
    """
    The ID of the associated Frontend Port.
    """
    frontend_port_name: str = pulumi.output_property("frontendPortName")
    """
    The Name of the Frontend Port use for this HTTP Listener.
    """
    host_name: Optional[str] = pulumi.output_property("hostName")
    """
    The Hostname which should be used for this HTTP Listener.
    """
    host_names: Optional[List[str]] = pulumi.output_property("hostNames")
    """
    A list of Hostname(s) should be used for this HTTP Listener. It allows special wildcard characters.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the HTTP Listener.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol to use for this HTTP Listener. Possible values are `Http` and `Https`.
    """
    require_sni: Optional[bool] = pulumi.output_property("requireSni")
    """
    Should Server Name Indication be Required? Defaults to `false`.
    """
    ssl_certificate_id: Optional[str] = pulumi.output_property("sslCertificateId")
    """
    The ID of the associated SSL Certificate.
    """
    ssl_certificate_name: Optional[str] = pulumi.output_property("sslCertificateName")
    """
    The name of the associated SSL Certificate which should be used for this HTTP Listener.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayHttpListenerCustomErrorConfiguration(dict):
    custom_error_page_url: str = pulumi.output_property("customErrorPageUrl")
    """
    Error page URL of the application gateway customer error.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    status_code: str = pulumi.output_property("statusCode")
    """
    Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayIdentity(dict):
    identity_ids: str = pulumi.output_property("identityIds")
    """
    Specifies a list with a single user managed identity id to be assigned to the Application Gateway.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The Managed Service Identity Type of this Application Gateway. The only possible value is `UserAssigned`. Defaults to `UserAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayProbe(dict):
    host: Optional[str] = pulumi.output_property("host")
    """
    The Hostname used for this Probe. If the Application Gateway is configured for a single site, by default the Host name should be specified as ‘127.0.0.1’, unless otherwise configured in custom probe. Cannot be set if `pick_host_name_from_backend_http_settings` is set to `true`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    interval: float = pulumi.output_property("interval")
    """
    The Interval between two consecutive probes in seconds. Possible values range from 1 second to a maximum of 86,400 seconds.
    """
    match: Optional['outputs.ApplicationGatewayProbeMatch'] = pulumi.output_property("match")
    """
    A `match` block as defined above.
    """
    minimum_servers: Optional[float] = pulumi.output_property("minimumServers")
    """
    The minimum number of servers that are always marked as healthy. Defaults to `0`.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Probe.
    """
    path: str = pulumi.output_property("path")
    """
    The Path used for this Probe.
    """
    pick_host_name_from_backend_http_settings: Optional[bool] = pulumi.output_property("pickHostNameFromBackendHttpSettings")
    """
    Whether the host header should be picked from the backend http settings. Defaults to `false`.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol used for this Probe. Possible values are `Http` and `Https`.
    """
    timeout: float = pulumi.output_property("timeout")
    """
    The Timeout used for this Probe, which indicates when a probe becomes unhealthy. Possible values range from 1 second to a maximum of 86,400 seconds.
    """
    unhealthy_threshold: float = pulumi.output_property("unhealthyThreshold")
    """
    The Unhealthy Threshold for this Probe, which indicates the amount of retries which should be attempted before a node is deemed unhealthy. Possible values are from 1 - 20 seconds.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayProbeMatch(dict):
    body: Optional[str] = pulumi.output_property("body")
    """
    A snippet from the Response Body which must be present in the Response..
    """
    status_codes: Optional[List[str]] = pulumi.output_property("statusCodes")
    """
    A list of allowed status codes for this Health Probe.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRedirectConfiguration(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    include_path: Optional[bool] = pulumi.output_property("includePath")
    """
    Whether or not to include the path in the redirected Url. Defaults to `false`
    """
    include_query_string: Optional[bool] = pulumi.output_property("includeQueryString")
    """
    Whether or not to include the query string in the redirected Url. Default to `false`
    """
    name: str = pulumi.output_property("name")
    """
    Unique name of the redirect configuration block
    """
    redirect_type: str = pulumi.output_property("redirectType")
    """
    The type of redirect. Possible values are `Permanent`, `Temporary`, `Found` and `SeeOther`
    """
    target_listener_id: Optional[str] = pulumi.output_property("targetListenerId")
    target_listener_name: Optional[str] = pulumi.output_property("targetListenerName")
    """
    The name of the listener to redirect to. Cannot be set if `target_url` is set.
    """
    target_url: Optional[str] = pulumi.output_property("targetUrl")
    """
    The Url to redirect the request to. Cannot be set if `target_listener_name` is set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRequestRoutingRule(dict):
    backend_address_pool_id: Optional[str] = pulumi.output_property("backendAddressPoolId")
    """
    The ID of the associated Backend Address Pool.
    """
    backend_address_pool_name: Optional[str] = pulumi.output_property("backendAddressPoolName")
    """
    The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    backend_http_settings_id: Optional[str] = pulumi.output_property("backendHttpSettingsId")
    """
    The ID of the associated Backend HTTP Settings Configuration.
    """
    backend_http_settings_name: Optional[str] = pulumi.output_property("backendHttpSettingsName")
    """
    The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    http_listener_id: Optional[str] = pulumi.output_property("httpListenerId")
    """
    The ID of the associated HTTP Listener.
    """
    http_listener_name: str = pulumi.output_property("httpListenerName")
    """
    The Name of the HTTP Listener which should be used for this Routing Rule.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Request Routing Rule.
    """
    redirect_configuration_id: Optional[str] = pulumi.output_property("redirectConfigurationId")
    """
    The ID of the associated Redirect Configuration.
    """
    redirect_configuration_name: Optional[str] = pulumi.output_property("redirectConfigurationName")
    """
    The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
    """
    rewrite_rule_set_id: Optional[str] = pulumi.output_property("rewriteRuleSetId")
    """
    The ID of the associated Rewrite Rule Set.
    """
    rewrite_rule_set_name: Optional[str] = pulumi.output_property("rewriteRuleSetName")
    """
    The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
    """
    rule_type: str = pulumi.output_property("ruleType")
    """
    The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
    """
    url_path_map_id: Optional[str] = pulumi.output_property("urlPathMapId")
    """
    The ID of the associated URL Path Map.
    """
    url_path_map_name: Optional[str] = pulumi.output_property("urlPathMapName")
    """
    The Name of the URL Path Map which should be associated with this Routing Rule.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSet(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    Unique name of the rewrite rule set block
    """
    rewrite_rules: Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRule']] = pulumi.output_property("rewriteRules")
    """
    One or more `rewrite_rule` blocks as defined above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRule(dict):
    conditions: Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleCondition']] = pulumi.output_property("conditions")
    """
    One or more `condition` blocks as defined above.
    """
    name: str = pulumi.output_property("name")
    """
    Unique name of the rewrite rule block
    """
    request_header_configurations: Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration']] = pulumi.output_property("requestHeaderConfigurations")
    """
    One or more `request_header_configuration` blocks as defined above.
    """
    response_header_configurations: Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration']] = pulumi.output_property("responseHeaderConfigurations")
    """
    One or more `response_header_configuration` blocks as defined above.
    """
    rule_sequence: float = pulumi.output_property("ruleSequence")
    """
    Rule sequence of the rewrite rule that determines the order of execution in a set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleCondition(dict):
    ignore_case: Optional[bool] = pulumi.output_property("ignoreCase")
    """
    Perform a case in-sensitive comparison. Defaults to `false`
    """
    negate: Optional[bool] = pulumi.output_property("negate")
    """
    Negate the result of the condition evaluation. Defaults to `false`
    """
    pattern: str = pulumi.output_property("pattern")
    """
    The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
    """
    variable: str = pulumi.output_property("variable")
    """
    The [variable](https://docs.microsoft.com/en-us/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    Header name of the header configuration.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    Header value of the header configuration. To delete a request header set this property to an empty string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration(dict):
    header_name: str = pulumi.output_property("headerName")
    """
    Header name of the header configuration.
    """
    header_value: str = pulumi.output_property("headerValue")
    """
    Header value of the header configuration. To delete a response header set this property to an empty string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySku(dict):
    capacity: Optional[float] = pulumi.output_property("capacity")
    """
    The Capacity of the SKU to use for this Application Gateway. When using a V1 SKU this value must be between 1 and 32, and 1 to 125 for a V2 SKU. This property is optional if `autoscale_configuration` is set.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the SKU to use for this Application Gateway. Possible values are `Standard_Small`, `Standard_Medium`, `Standard_Large`, `Standard_v2`, `WAF_Medium`, `WAF_Large`, and `WAF_v2`.
    """
    tier: str = pulumi.output_property("tier")
    """
    The Tier of the SKU to use for this Application Gateway. Possible values are `Standard`, `Standard_v2`, `WAF` and `WAF_v2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySslCertificate(dict):
    data: Optional[str] = pulumi.output_property("data")
    """
    PFX certificate. Required if `key_vault_secret_id` is not set.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    key_vault_secret_id: Optional[str] = pulumi.output_property("keyVaultSecretId")
    """
    Secret Id of (base-64 encoded unencrypted pfx) `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for keyvault to use this feature. Required if `data` is not set.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the SSL certificate that is unique within this Application Gateway
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    Password for the pfx file specified in data.  Required if `data` is set.
    """
    public_cert_data: Optional[str] = pulumi.output_property("publicCertData")
    """
    The Public Certificate Data associated with the SSL Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySslPolicy(dict):
    cipher_suites: Optional[List[str]] = pulumi.output_property("cipherSuites")
    """
    A List of accepted cipher suites. Possible values are: `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_128_CBC_SHA256`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA256`, `TLS_DHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_128_GCM_SHA256`, `TLS_DHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_RSA_WITH_3DES_EDE_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_GCM_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_256_CBC_SHA256` and `TLS_RSA_WITH_AES_256_GCM_SHA384`.
    """
    disabled_protocols: Optional[List[str]] = pulumi.output_property("disabledProtocols")
    """
    A list of SSL Protocols which should be disabled on this Application Gateway. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
    """
    min_protocol_version: Optional[str] = pulumi.output_property("minProtocolVersion")
    """
    The minimal TLS version. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
    """
    policy_name: Optional[str] = pulumi.output_property("policyName")
    """
    The Name of the Policy e.g AppGwSslPolicy20170401S. Required if `policy_type` is set to `Predefined`. Possible values can change over time and
    are published here https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-ssl-policy-overview. Not compatible with `disabled_protocols`.
    """
    policy_type: Optional[str] = pulumi.output_property("policyType")
    """
    The Type of the Policy. Possible values are `Predefined` and `Custom`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayTrustedRootCertificate(dict):
    data: str = pulumi.output_property("data")
    """
    The contents of the Trusted Root Certificate which should be used.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Trusted Root Certificate to use.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayUrlPathMap(dict):
    default_backend_address_pool_id: Optional[str] = pulumi.output_property("defaultBackendAddressPoolId")
    """
    The ID of the Default Backend Address Pool.
    """
    default_backend_address_pool_name: Optional[str] = pulumi.output_property("defaultBackendAddressPoolName")
    """
    The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
    """
    default_backend_http_settings_id: Optional[str] = pulumi.output_property("defaultBackendHttpSettingsId")
    """
    The ID of the Default Backend HTTP Settings Collection.
    """
    default_backend_http_settings_name: Optional[str] = pulumi.output_property("defaultBackendHttpSettingsName")
    """
    The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
    """
    default_redirect_configuration_id: Optional[str] = pulumi.output_property("defaultRedirectConfigurationId")
    """
    The ID of the Default Redirect Configuration.
    """
    default_redirect_configuration_name: Optional[str] = pulumi.output_property("defaultRedirectConfigurationName")
    """
    The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
    """
    default_rewrite_rule_set_id: Optional[str] = pulumi.output_property("defaultRewriteRuleSetId")
    default_rewrite_rule_set_name: Optional[str] = pulumi.output_property("defaultRewriteRuleSetName")
    """
    The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the URL Path Map.
    """
    path_rules: List['outputs.ApplicationGatewayUrlPathMapPathRule'] = pulumi.output_property("pathRules")
    """
    One or more `path_rule` blocks as defined above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayUrlPathMapPathRule(dict):
    backend_address_pool_id: Optional[str] = pulumi.output_property("backendAddressPoolId")
    """
    The ID of the associated Backend Address Pool.
    """
    backend_address_pool_name: Optional[str] = pulumi.output_property("backendAddressPoolName")
    """
    The Name of the Backend Address Pool to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    backend_http_settings_id: Optional[str] = pulumi.output_property("backendHttpSettingsId")
    """
    The ID of the associated Backend HTTP Settings Configuration.
    """
    backend_http_settings_name: Optional[str] = pulumi.output_property("backendHttpSettingsName")
    """
    The Name of the Backend HTTP Settings Collection to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the Rewrite Rule Set
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Path Rule.
    """
    paths: List[str] = pulumi.output_property("paths")
    """
    A list of Paths used in this Path Rule.
    """
    redirect_configuration_id: Optional[str] = pulumi.output_property("redirectConfigurationId")
    """
    The ID of the associated Redirect Configuration.
    """
    redirect_configuration_name: Optional[str] = pulumi.output_property("redirectConfigurationName")
    """
    The Name of a Redirect Configuration to use for this Path Rule. Cannot be set if `backend_address_pool_name` or `backend_http_settings_name` is set.
    """
    rewrite_rule_set_id: Optional[str] = pulumi.output_property("rewriteRuleSetId")
    """
    The ID of the associated Rewrite Rule Set.
    """
    rewrite_rule_set_name: Optional[str] = pulumi.output_property("rewriteRuleSetName")
    """
    The Name of the Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfiguration(dict):
    disabled_rule_groups: Optional[List['outputs.ApplicationGatewayWafConfigurationDisabledRuleGroup']] = pulumi.output_property("disabledRuleGroups")
    """
    one or more `disabled_rule_group` blocks as defined below.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the Web Application Firewall be enabled?
    """
    exclusions: Optional[List['outputs.ApplicationGatewayWafConfigurationExclusion']] = pulumi.output_property("exclusions")
    """
    one or more `exclusion` blocks as defined below.
    """
    file_upload_limit_mb: Optional[float] = pulumi.output_property("fileUploadLimitMb")
    """
    The File Upload Limit in MB. Accepted values are in the range `1`MB to `500`MB. Defaults to `100`MB.
    """
    firewall_mode: str = pulumi.output_property("firewallMode")
    """
    The Web Application Firewall Mode. Possible values are `Detection` and `Prevention`.
    """
    max_request_body_size_kb: Optional[float] = pulumi.output_property("maxRequestBodySizeKb")
    """
    The Maximum Request Body Size in KB.  Accepted values are in the range `1`KB to `128`KB.  Defaults to `128`KB.
    """
    request_body_check: Optional[bool] = pulumi.output_property("requestBodyCheck")
    """
    Is Request Body Inspection enabled?  Defaults to `true`.
    """
    rule_set_type: Optional[str] = pulumi.output_property("ruleSetType")
    """
    The Type of the Rule Set used for this Web Application Firewall. Currently, only `OWASP` is supported.
    """
    rule_set_version: str = pulumi.output_property("ruleSetVersion")
    """
    The Version of the Rule Set used for this Web Application Firewall. Possible values are `2.2.9`, `3.0`, and `3.1`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfigurationDisabledRuleGroup(dict):
    rule_group_name: str = pulumi.output_property("ruleGroupName")
    """
    The rule group where specific rules should be disabled. Accepted values are:  `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `General`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`
    """
    rules: Optional[List[float]] = pulumi.output_property("rules")
    """
    A list of rules which should be disabled in that group. Disables all rules in the specified group if `rules` is not specified.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfigurationExclusion(dict):
    match_variable: str = pulumi.output_property("matchVariable")
    """
    Match variable of the exclusion rule to exclude header, cookie or GET arguments. Possible values are `RequestHeaderNames`, `RequestArgNames` and `RequestCookieNames`
    """
    selector: Optional[str] = pulumi.output_property("selector")
    """
    String value which will be used for the filter operation. If empty will exclude all traffic on this `match_variable`
    """
    selector_match_operator: Optional[str] = pulumi.output_property("selectorMatchOperator")
    """
    Operator which will be used to search in the variable content. Possible values are `Equals`, `StartsWith`, `EndsWith`, `Contains`. If empty will exclude all traffic on this `match_variable`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExpressRouteCircuitPeeringMicrosoftPeeringConfig(dict):
    advertised_public_prefixes: List[str] = pulumi.output_property("advertisedPublicPrefixes")
    """
    A list of Advertised Public Prefixes
    """
    customer_asn: Optional[float] = pulumi.output_property("customerAsn")
    """
    The CustomerASN of the peering
    """
    routing_registry_name: Optional[str] = pulumi.output_property("routingRegistryName")
    """
    The RoutingRegistryName of the configuration
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExpressRouteCircuitSku(dict):
    family: str = pulumi.output_property("family")
    """
    The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
    """
    tier: str = pulumi.output_property("tier")
    """
    The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallApplicationRuleCollectionRule(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Specifies a description for the rule.
    """
    fqdn_tags: Optional[List[str]] = pulumi.output_property("fqdnTags")
    """
    A list of FQDN tags. Possible values are `AppServiceEnvironment`, `AzureBackup`, `MicrosoftActiveProtectionService`, `WindowsDiagnostics` and `WindowsUpdate`
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the rule.
    """
    protocols: Optional[List['outputs.FirewallApplicationRuleCollectionRuleProtocol']] = pulumi.output_property("protocols")
    """
    One or more `protocol` blocks as defined below.
    """
    source_addresses: List[str] = pulumi.output_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """
    target_fqdns: Optional[List[str]] = pulumi.output_property("targetFqdns")
    """
    A list of FQDNs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallApplicationRuleCollectionRuleProtocol(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    Specify a port for the connection.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the type of connection. Possible values are `Http`, `Https` and `Mssql`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallIpConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the IP Configuration.
    """
    private_ip_address: Optional[str] = pulumi.output_property("privateIpAddress")
    """
    The private IP address of the Azure Firewall.
    """
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    """
    The Resource ID of the Public IP Address associated with the firewall.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    Reference to the subnet associated with the IP Configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallNatRuleCollectionRule(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Specifies a description for the rule.
    """
    destination_addresses: List[str] = pulumi.output_property("destinationAddresses")
    """
    A list of destination IP addresses and/or IP ranges.
    """
    destination_ports: List[str] = pulumi.output_property("destinationPorts")
    """
    A list of destination ports.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the rule.
    """
    protocols: List[str] = pulumi.output_property("protocols")
    """
    A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.  If `action` is `Dnat`, protocols can only be `TCP` and `UDP`.
    """
    source_addresses: List[str] = pulumi.output_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """
    translated_address: str = pulumi.output_property("translatedAddress")
    """
    The address of the service behind the Firewall.
    """
    translated_port: str = pulumi.output_property("translatedPort")
    """
    The port of the service behind the Firewall.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallNetworkRuleCollectionRule(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    Specifies a description for the rule.
    """
    destination_addresses: List[str] = pulumi.output_property("destinationAddresses")
    """
    A list of destination IP addresses and/or IP ranges.
    """
    destination_ports: List[str] = pulumi.output_property("destinationPorts")
    """
    A list of destination ports.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the rule.
    """
    protocols: List[str] = pulumi.output_property("protocols")
    """
    A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.
    """
    source_addresses: List[str] = pulumi.output_property("sourceAddresses")
    """
    A list of source IP addresses and/or IP ranges.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LocalNetworkGatewayBgpSettings(dict):
    asn: float = pulumi.output_property("asn")
    """
    The BGP speaker's ASN.
    """
    bgp_peering_address: str = pulumi.output_property("bgpPeeringAddress")
    """
    The BGP peering address and BGP identifier
    of this BGP speaker.
    """
    peer_weight: Optional[float] = pulumi.output_property("peerWeight")
    """
    The weight added to routes learned from this
    BGP speaker.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkConnectionMonitorDestination(dict):
    address: Optional[str] = pulumi.output_property("address")
    """
    IP address or domain name to monitor connectivity to.
    """
    port: float = pulumi.output_property("port")
    """
    The port on the destination to monitor connectivity to.
    """
    virtual_machine_id: Optional[str] = pulumi.output_property("virtualMachineId")
    """
    The ID of the Virtual Machine to monitor connectivity to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkConnectionMonitorSource(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The port on the destination to monitor connectivity to.
    """
    virtual_machine_id: str = pulumi.output_property("virtualMachineId")
    """
    The ID of the Virtual Machine to monitor connectivity to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkInterfaceIpConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    A name used for this IP Configuration.
    """
    primary: Optional[bool] = pulumi.output_property("primary")
    """
    Is this the Primary IP Configuration? Must be `true` for the first `ip_configuration` when multiple are specified. Defaults to `false`.
    """
    private_ip_address: Optional[str] = pulumi.output_property("privateIpAddress")
    """
    The Static IP Address which should be used.
    """
    private_ip_address_allocation: str = pulumi.output_property("privateIpAddressAllocation")
    """
    The allocation method used for the Private IP Address. Possible values are `Dynamic` and `Static`.
    """
    private_ip_address_version: Optional[str] = pulumi.output_property("privateIpAddressVersion")
    """
    The IP Version to use. Possible values are `IPv4` or `IPv6`. Defaults to `IPv4`.
    """
    public_ip_address_id: Optional[str] = pulumi.output_property("publicIpAddressId")
    """
    Reference to a Public IP Address to associate with this NIC
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet where this Network Interface should be located in.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkPacketCaptureFilter(dict):
    local_ip_address: Optional[str] = pulumi.output_property("localIpAddress")
    """
    The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    local_port: Optional[str] = pulumi.output_property("localPort")
    """
    The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
    """
    remote_ip_address: Optional[str] = pulumi.output_property("remoteIpAddress")
    """
    The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
    """
    remote_port: Optional[str] = pulumi.output_property("remotePort")
    """
    The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkPacketCaptureStorageLocation(dict):
    file_path: Optional[str] = pulumi.output_property("filePath")
    """
    A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
    """
    storage_account_id: Optional[str] = pulumi.output_property("storageAccountId")
    """
    The ID of the storage account to save the packet capture session
    """
    storage_path: Optional[str] = pulumi.output_property("storagePath")
    """
    The URI of the storage path to save the packet capture.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkSecurityGroupSecurityRule(dict):
    access: str = pulumi.output_property("access")
    """
    Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description for this rule. Restricted to 140 characters.
    """
    destination_address_prefix: Optional[str] = pulumi.output_property("destinationAddressPrefix")
    """
    CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
    """
    destination_address_prefixes: Optional[List[str]] = pulumi.output_property("destinationAddressPrefixes")
    """
    List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
    """
    destination_application_security_group_ids: Optional[List[str]] = pulumi.output_property("destinationApplicationSecurityGroupIds")
    """
    A List of destination Application Security Group ID's
    """
    destination_port_range: Optional[str] = pulumi.output_property("destinationPortRange")
    """
    Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
    """
    destination_port_ranges: Optional[List[str]] = pulumi.output_property("destinationPortRanges")
    """
    List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
    """
    direction: str = pulumi.output_property("direction")
    """
    The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the security rule.
    """
    priority: float = pulumi.output_property("priority")
    """
    Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    Network protocol this rule applies to. Can be `Tcp`, `Udp`, `Icmp`, or `*` to match all.
    """
    source_address_prefix: Optional[str] = pulumi.output_property("sourceAddressPrefix")
    """
    CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
    """
    source_address_prefixes: Optional[List[str]] = pulumi.output_property("sourceAddressPrefixes")
    """
    List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
    """
    source_application_security_group_ids: Optional[List[str]] = pulumi.output_property("sourceApplicationSecurityGroupIds")
    """
    A List of source Application Security Group ID's
    """
    source_port_range: Optional[str] = pulumi.output_property("sourcePortRange")
    """
    Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
    """
    source_port_ranges: Optional[List[str]] = pulumi.output_property("sourcePortRanges")
    """
    List of source ports or port ranges. This is required if `source_port_range` is not specified.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkWatcherFlowLogRetentionPolicy(dict):
    days: float = pulumi.output_property("days")
    """
    The number of days to retain flow log records.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Boolean flag to enable/disable traffic analytics.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkWatcherFlowLogTrafficAnalytics(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Boolean flag to enable/disable traffic analytics.
    """
    interval_in_minutes: Optional[float] = pulumi.output_property("intervalInMinutes")
    """
    How frequently service should do flow analytics in minutes.
    """
    workspace_id: str = pulumi.output_property("workspaceId")
    """
    The resource guid of the attached workspace.
    """
    workspace_region: str = pulumi.output_property("workspaceRegion")
    """
    The location of the attached workspace.
    """
    workspace_resource_id: str = pulumi.output_property("workspaceResourceId")
    """
    The resource ID of the attached workspace.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketCaptureFilter(dict):
    local_ip_address: Optional[str] = pulumi.output_property("localIpAddress")
    """
    The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    local_port: Optional[str] = pulumi.output_property("localPort")
    """
    The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
    """
    remote_ip_address: Optional[str] = pulumi.output_property("remoteIpAddress")
    """
    The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
    """
    remote_port: Optional[str] = pulumi.output_property("remotePort")
    """
    The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketCaptureStorageLocation(dict):
    file_path: Optional[str] = pulumi.output_property("filePath")
    """
    A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
    """
    storage_account_id: Optional[str] = pulumi.output_property("storageAccountId")
    """
    The ID of the storage account to save the packet capture session
    """
    storage_path: Optional[str] = pulumi.output_property("storagePath")
    """
    The URI of the storage path to save the packet capture.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PointToPointVpnGatewayConnectionConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    The Name which should be used for this Connection Configuration.
    """
    vpn_client_address_pool: 'outputs.PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool' = pulumi.output_property("vpnClientAddressPool")
    """
    A `vpn_client_address_pool` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool(dict):
    address_prefixes: List[str] = pulumi.output_property("addressPrefixes")
    """
    A list of CIDR Ranges which should be used as Address Prefixes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProfileContainerNetworkInterface(dict):
    ip_configurations: List['outputs.ProfileContainerNetworkInterfaceIpConfiguration'] = pulumi.output_property("ipConfigurations")
    """
    One or more `ip_configuration` blocks as documented below.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the IP Configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProfileContainerNetworkInterfaceIpConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the IP Configuration.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    Reference to the subnet associated with the IP Configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteFilterRule(dict):
    access: str = pulumi.output_property("access")
    """
    The access type of the rule. The only possible value is `Allow`.
    """
    communities: List[str] = pulumi.output_property("communities")
    """
    The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
    """
    name: str = pulumi.output_property("name")
    """
    The name of the route filter rule.
    """
    rule_type: str = pulumi.output_property("ruleType")
    """
    The rule type of the rule. The only possible value is `Community`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteTableRoute(dict):
    address_prefix: str = pulumi.output_property("addressPrefix")
    """
    The destination CIDR to which the route applies, such as 10.1.0.0/16
    """
    name: str = pulumi.output_property("name")
    """
    The name of the route.
    """
    next_hop_in_ip_address: Optional[str] = pulumi.output_property("nextHopInIpAddress")
    """
    Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
    """
    next_hop_type: str = pulumi.output_property("nextHopType")
    """
    The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetDelegation(dict):
    name: str = pulumi.output_property("name")
    """
    A name for this delegation.
    """
    service_delegation: 'outputs.SubnetDelegationServiceDelegation' = pulumi.output_property("serviceDelegation")
    """
    A `service_delegation` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetDelegationServiceDelegation(dict):
    actions: Optional[List[str]] = pulumi.output_property("actions")
    """
    A list of Actions which should be delegated. This list is specific to the service to delegate to. Possible values include `Microsoft.Network/networkinterfaces/*`, `Microsoft.Network/virtualNetworks/subnets/action`, `Microsoft.Network/virtualNetworks/subnets/join/action`, `Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action` and `Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action`.
    """
    name: str = pulumi.output_property("name")
    """
    The name of service to delegate to. Possible values include `Microsoft.BareMetal/AzureVMware`, `Microsoft.BareMetal/CrayServers`, `Microsoft.Batch/batchAccounts`, `Microsoft.ContainerInstance/containerGroups`, `Microsoft.Databricks/workspaces`, `Microsoft.DBforPostgreSQL/serversv2`, `Microsoft.HardwareSecurityModules/dedicatedHSMs`, `Microsoft.Logic/integrationServiceEnvironments`, `Microsoft.Netapp/volumes`, `Microsoft.ServiceFabricMesh/networks`, `Microsoft.Sql/managedInstances`, `Microsoft.Sql/servers`, `Microsoft.StreamAnalytics/streamingJobs`, `Microsoft.Web/hostingEnvironments` and `Microsoft.Web/serverFarms`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerEndpointCustomHeader(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the custom header.
    """
    value: str = pulumi.output_property("value")
    """
    The value of custom header. Applicable for Http and Https protocol.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerEndpointSubnet(dict):
    first: str = pulumi.output_property("first")
    """
    The First IP....
    """
    last: Optional[str] = pulumi.output_property("last")
    """
    The Last IP...
    """
    scope: Optional[float] = pulumi.output_property("scope")
    """
    The Scope...
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileDnsConfig(dict):
    relative_name: str = pulumi.output_property("relativeName")
    """
    The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
    """
    ttl: float = pulumi.output_property("ttl")
    """
    The TTL value of the Profile used by Local DNS resolvers and clients.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileMonitorConfig(dict):
    custom_headers: Optional[List['outputs.TrafficManagerProfileMonitorConfigCustomHeader']] = pulumi.output_property("customHeaders")
    """
    One or more `custom_header` blocks as defined below.
    """
    expected_status_code_ranges: Optional[List[str]] = pulumi.output_property("expectedStatusCodeRanges")
    """
    A list of status code ranges in the format of `100-101`.
    """
    interval_in_seconds: Optional[float] = pulumi.output_property("intervalInSeconds")
    """
    The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
    """
    port: float = pulumi.output_property("port")
    """
    The port number used by the monitoring checks.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
    """
    timeout_in_seconds: Optional[float] = pulumi.output_property("timeoutInSeconds")
    """
    The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
    """
    tolerated_number_of_failures: Optional[float] = pulumi.output_property("toleratedNumberOfFailures")
    """
    The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileMonitorConfigCustomHeader(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the custom header.
    """
    value: str = pulumi.output_property("value")
    """
    The value of custom header. Applicable for Http and Https protocol.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualHubRoute(dict):
    address_prefixes: List[str] = pulumi.output_property("addressPrefixes")
    """
    A list of Address Prefixes.
    """
    next_hop_ip_address: str = pulumi.output_property("nextHopIpAddress")
    """
    The IP Address that Packets should be forwarded to as the Next Hop.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkDdosProtectionPlan(dict):
    enable: bool = pulumi.output_property("enable")
    """
    Enable/disable DDoS Protection Plan on Virtual Network.
    """
    id: str = pulumi.output_property("id")
    """
    The Resource ID of DDoS Protection Plan.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayBgpSettings(dict):
    asn: Optional[float] = pulumi.output_property("asn")
    """
    The Autonomous System Number (ASN) to use as part of the BGP.
    """
    peer_weight: Optional[float] = pulumi.output_property("peerWeight")
    """
    The weight added to routes which have been learned
    through BGP peering. Valid values can be between `0` and `100`.
    """
    peering_address: Optional[str] = pulumi.output_property("peeringAddress")
    """
    The BGP peer IP address of the virtual network
    gateway. This address is needed to configure the created gateway as a BGP Peer
    on the on-premises VPN devices. The IP address must be part of the subnet of
    the Virtual Network Gateway. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayConnectionIpsecPolicy(dict):
    dh_group: str = pulumi.output_property("dhGroup")
    """
    The DH group used in IKE phase 1 for initial SA. Valid
    options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
    `ECP256`, `ECP384`, or `None`.
    """
    ike_encryption: str = pulumi.output_property("ikeEncryption")
    """
    The IKE encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
    """
    ike_integrity: str = pulumi.output_property("ikeIntegrity")
    """
    The IKE integrity algorithm. Valid
    options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
    """
    ipsec_encryption: str = pulumi.output_property("ipsecEncryption")
    """
    The IPSec encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
    """
    ipsec_integrity: str = pulumi.output_property("ipsecIntegrity")
    """
    The IPSec integrity algorithm. Valid
    options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
    """
    pfs_group: str = pulumi.output_property("pfsGroup")
    """
    The DH group used in IKE phase 2 for new child SA.
    Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
    or `None`.
    """
    sa_datasize: Optional[float] = pulumi.output_property("saDatasize")
    """
    The IPSec SA payload size in KB. Must be at least
    `1024` KB. Defaults to `102400000` KB.
    """
    sa_lifetime: Optional[float] = pulumi.output_property("saLifetime")
    """
    The IPSec SA lifetime in seconds. Must be at least
    `300` seconds. Defaults to `27000` seconds.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayConnectionTrafficSelectorPolicy(dict):
    local_address_cidrs: List[str] = pulumi.output_property("localAddressCidrs")
    remote_address_cidrs: List[str] = pulumi.output_property("remoteAddressCidrs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayIpConfiguration(dict):
    name: Optional[str] = pulumi.output_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    private_ip_address_allocation: Optional[str] = pulumi.output_property("privateIpAddressAllocation")
    """
    Defines how the private IP address
    of the gateways virtual interface is assigned. Valid options are `Static` or
    `Dynamic`. Defaults to `Dynamic`.
    """
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    """
    The ID of the public ip address to associate
    with the Virtual Network Gateway.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ID of the gateway subnet of a virtual network in
    which the virtual network gateway will be created. It is mandatory that
    the associated subnet is named `GatewaySubnet`. Therefore, each virtual
    network can contain at most a single Virtual Network Gateway.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfiguration(dict):
    address_spaces: List[str] = pulumi.output_property("addressSpaces")
    """
    The address space out of which ip addresses for
    vpn clients will be taken. You can provide more than one address space, e.g.
    in CIDR notation.
    """
    radius_server_address: Optional[str] = pulumi.output_property("radiusServerAddress")
    """
    The address of the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    radius_server_secret: Optional[str] = pulumi.output_property("radiusServerSecret")
    """
    The secret used by the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    revoked_certificates: Optional[List['outputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate']] = pulumi.output_property("revokedCertificates")
    """
    One or more `revoked_certificate` blocks which
    are defined below.
    This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
    """
    root_certificates: Optional[List['outputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificate']] = pulumi.output_property("rootCertificates")
    """
    One or more `root_certificate` blocks which are
    defined below. These root certificates are used to sign the client certificate
    used by the VPN clients to connect to the gateway.
    This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
    """
    vpn_client_protocols: Optional[List[str]] = pulumi.output_property("vpnClientProtocols")
    """
    List of the protocols supported by the vpn client.
    The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    thumbprint: str = pulumi.output_property("thumbprint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfigurationRootCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A user-defined name of the revoked certificate.
    """
    public_cert_data: str = pulumi.output_property("publicCertData")
    """
    The SHA1 thumbprint of the certificate to be
    revoked.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkSubnet(dict):
    address_prefix: str = pulumi.output_property("addressPrefix")
    """
    The address prefix to use for the subnet.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The Resource ID of DDoS Protection Plan.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the virtual network. Changing this forces a
    new resource to be created.
    """
    security_group: Optional[str] = pulumi.output_property("securityGroup")
    """
    The Network Security Group to associate with
    the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnGatewayBgpSetting(dict):
    asn: float = pulumi.output_property("asn")
    """
    The ASN of the BGP Speaker. Changing this forces a new resource to be created.
    """
    bgp_peering_address: Optional[str] = pulumi.output_property("bgpPeeringAddress")
    """
    The Address which should be used for the BGP Peering.
    """
    peer_weight: float = pulumi.output_property("peerWeight")
    """
    The weight added to Routes learned from this BGP Speaker. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationAzureActiveDirectoryAuthentication(dict):
    audience: str = pulumi.output_property("audience")
    """
    The Audience which should be used for authentication.
    """
    issuer: str = pulumi.output_property("issuer")
    """
    The Issuer which should be used for authentication.
    """
    tenant: str = pulumi.output_property("tenant")
    """
    The Tenant which should be used for authentication.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationClientRevokedCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    thumbprint: str = pulumi.output_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationClientRootCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    public_cert_data: str = pulumi.output_property("publicCertData")
    """
    The Public Key Data associated with the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationIpsecPolicy(dict):
    dh_group: str = pulumi.output_property("dhGroup")
    """
    The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
    """
    ike_encryption: str = pulumi.output_property("ikeEncryption")
    """
    The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
    """
    ike_integrity: str = pulumi.output_property("ikeIntegrity")
    """
    The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
    """
    ipsec_encryption: str = pulumi.output_property("ipsecEncryption")
    """
    The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
    """
    ipsec_integrity: str = pulumi.output_property("ipsecIntegrity")
    """
    The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
    """
    pfs_group: str = pulumi.output_property("pfsGroup")
    """
    The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
    """
    sa_data_size_kilobytes: float = pulumi.output_property("saDataSizeKilobytes")
    """
    The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
    """
    sa_lifetime_seconds: float = pulumi.output_property("saLifetimeSeconds")
    """
    The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServer(dict):
    address: str = pulumi.output_property("address")
    """
    The Address of the Radius Server.
    """
    client_root_certificates: Optional[List['outputs.VpnServerConfigurationRadiusServerClientRootCertificate']] = pulumi.output_property("clientRootCertificates")
    """
    One or more `client_root_certificate` blocks as defined above.
    """
    secret: str = pulumi.output_property("secret")
    """
    The Secret used to communicate with the Radius Server.
    """
    server_root_certificates: List['outputs.VpnServerConfigurationRadiusServerServerRootCertificate'] = pulumi.output_property("serverRootCertificates")
    """
    One or more `server_root_certificate` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServerClientRootCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    thumbprint: str = pulumi.output_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServerServerRootCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    A name used to uniquely identify this certificate.
    """
    public_cert_data: str = pulumi.output_property("publicCertData")
    """
    The Public Key Data associated with the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitPeering(dict):
    azure_asn: float = pulumi.output_property("azureAsn")
    """
    The Either a 16-bit or a 32-bit ASN for Azure.
    """
    peer_asn: float = pulumi.output_property("peerAsn")
    """
    The Either a 16-bit or a 32-bit ASN. Can either be public or private.
    """
    peering_type: str = pulumi.output_property("peeringType")
    """
    The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
    """
    primary_peer_address_prefix: str = pulumi.output_property("primaryPeerAddressPrefix")
    """
    A `/30` subnet for the primary link.
    """
    secondary_peer_address_prefix: str = pulumi.output_property("secondaryPeerAddressPrefix")
    """
    A `/30` subnet for the secondary link.
    """
    shared_key: str = pulumi.output_property("sharedKey")
    """
    The shared key. Can be a maximum of 25 characters.
    """
    vlan_id: float = pulumi.output_property("vlanId")
    """
    A valid VLAN ID to establish this peering on.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitServiceProviderProperty(dict):
    bandwidth_in_mbps: float = pulumi.output_property("bandwidthInMbps")
    """
    The bandwidth in Mbps of the ExpressRoute circuit.
    """
    peering_location: str = pulumi.output_property("peeringLocation")
    """
    The name of the peering location and **not** the Azure resource location.
    """
    service_provider_name: str = pulumi.output_property("serviceProviderName")
    """
    The name of the ExpressRoute Service Provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitSku(dict):
    family: str = pulumi.output_property("family")
    """
    The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
    """
    tier: str = pulumi.output_property("tier")
    """
    The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFirewallIpConfiguration(dict):
    internal_public_ip_address_id: str = pulumi.output_property("internalPublicIpAddressId")
    name: str = pulumi.output_property("name")
    """
    The name of the Azure Firewall.
    """
    private_ip_address: str = pulumi.output_property("privateIpAddress")
    """
    The private IP address of the Azure Firewall.
    """
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The Resource ID of the subnet where the Azure Firewall is deployed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGatewayConnectionIpsecPolicy(dict):
    dh_group: str = pulumi.output_property("dhGroup")
    """
    The DH group used in IKE phase 1 for initial SA. Valid
    options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
    `ECP256`, `ECP384`, or `None`.
    """
    ike_encryption: str = pulumi.output_property("ikeEncryption")
    """
    The IKE encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
    """
    ike_integrity: str = pulumi.output_property("ikeIntegrity")
    """
    The IKE integrity algorithm. Valid
    options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
    """
    ipsec_encryption: str = pulumi.output_property("ipsecEncryption")
    """
    The IPSec encryption algorithm. Valid
    options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
    """
    ipsec_integrity: str = pulumi.output_property("ipsecIntegrity")
    """
    The IPSec integrity algorithm. Valid
    options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
    """
    pfs_group: str = pulumi.output_property("pfsGroup")
    """
    The DH group used in IKE phase 2 for new child SA.
    Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
    or `None`.
    """
    sa_datasize: float = pulumi.output_property("saDatasize")
    """
    The IPSec SA payload size in KB. Must be at least
    `1024` KB.
    """
    sa_lifetime: float = pulumi.output_property("saLifetime")
    """
    The IPSec SA lifetime in seconds. Must be at least
    `300` seconds.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGatewayConnectionTrafficSelectorPolicy(dict):
    local_address_cidrs: List[str] = pulumi.output_property("localAddressCidrs")
    """
    List of local CIDRs.
    """
    remote_address_cidrs: List[str] = pulumi.output_property("remoteAddressCidrs")
    """
    List of remote CIDRs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceIpConfiguration(dict):
    application_gateway_backend_address_pools_ids: List[str] = pulumi.output_property("applicationGatewayBackendAddressPoolsIds")
    """
    A list of Backend Address Pool ID's within a Application Gateway that this Network Interface is connected to.
    """
    application_security_group_ids: List[str] = pulumi.output_property("applicationSecurityGroupIds")
    load_balancer_backend_address_pools_ids: List[str] = pulumi.output_property("loadBalancerBackendAddressPoolsIds")
    """
    A list of Backend Address Pool ID's within a Load Balancer that this Network Interface is connected to.
    """
    load_balancer_inbound_nat_rules_ids: List[str] = pulumi.output_property("loadBalancerInboundNatRulesIds")
    """
    A list of Inbound NAT Rule ID's within a Load Balancer that this Network Interface is connected to.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Network Interface.
    """
    primary: bool = pulumi.output_property("primary")
    """
    is this the Primary IP Configuration for this Network Interface?
    """
    private_ip_address: str = pulumi.output_property("privateIpAddress")
    """
    The Private IP Address assigned to this Network Interface.
    """
    private_ip_address_allocation: str = pulumi.output_property("privateIpAddressAllocation")
    """
    The IP Address allocation type for the Private address, such as `Dynamic` or `Static`.
    """
    private_ip_address_version: str = pulumi.output_property("privateIpAddressVersion")
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    """
    The ID of the Public IP Address which is connected to this Network Interface.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ID of the Subnet which the Network Interface is connected to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRule(dict):
    access: str = pulumi.output_property("access")
    """
    Is network traffic is allowed or denied?
    """
    description: str = pulumi.output_property("description")
    """
    The description for this rule.
    """
    destination_address_prefix: str = pulumi.output_property("destinationAddressPrefix")
    """
    CIDR or destination IP range or * to match any IP.
    """
    destination_address_prefixes: List[str] = pulumi.output_property("destinationAddressPrefixes")
    """
    A list of CIDRs or destination IP ranges.
    """
    destination_application_security_group_ids: Optional[List[str]] = pulumi.output_property("destinationApplicationSecurityGroupIds")
    """
    A List of destination Application Security Group ID's
    """
    destination_port_range: str = pulumi.output_property("destinationPortRange")
    """
    The Destination Port or Range.
    """
    destination_port_ranges: List[str] = pulumi.output_property("destinationPortRanges")
    direction: str = pulumi.output_property("direction")
    """
    The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the Name of the Network Security Group.
    """
    priority: float = pulumi.output_property("priority")
    """
    The priority of the rule
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The network protocol this rule applies to.
    """
    source_address_prefix: str = pulumi.output_property("sourceAddressPrefix")
    """
    CIDR or source IP range or * to match any IP.
    """
    source_address_prefixes: List[str] = pulumi.output_property("sourceAddressPrefixes")
    """
    A list of CIDRs or source IP ranges.
    """
    source_application_security_group_ids: Optional[List[str]] = pulumi.output_property("sourceApplicationSecurityGroupIds")
    """
    A List of source Application Security Group ID's
    """
    source_port_range: str = pulumi.output_property("sourcePortRange")
    """
    The Source Port or Range.
    """
    source_port_ranges: List[str] = pulumi.output_property("sourcePortRanges")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPublicIPsPublicIp(dict):
    domain_name_label: str = pulumi.output_property("domainNameLabel")
    """
    The Domain Name Label of the Public IP Address
    """
    fqdn: str = pulumi.output_property("fqdn")
    """
    The FQDN of the Public IP Address
    """
    id: str = pulumi.output_property("id")
    """
    The ID of the Public IP Address
    """
    ip_address: str = pulumi.output_property("ipAddress")
    name: str = pulumi.output_property("name")
    """
    The Name of the Public IP Address
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteFilterRule(dict):
    access: str = pulumi.output_property("access")
    """
    The access type of the rule
    """
    communities: List[str] = pulumi.output_property("communities")
    """
    The collection for bgp community values.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Route Filter.
    """
    rule_type: str = pulumi.output_property("ruleType")
    """
    The Route Filter Rule Type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableRoute(dict):
    address_prefix: str = pulumi.output_property("addressPrefix")
    """
    The destination CIDR to which the route applies.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Route Table.
    """
    next_hop_in_ip_address: str = pulumi.output_property("nextHopInIpAddress")
    """
    Contains the IP address packets should be forwarded to.
    """
    next_hop_type: str = pulumi.output_property("nextHopType")
    """
    The type of Azure hop the packet should be sent to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayBgpSetting(dict):
    asn: float = pulumi.output_property("asn")
    """
    The Autonomous System Number (ASN) to use as part of the BGP.
    """
    peer_weight: float = pulumi.output_property("peerWeight")
    """
    The weight added to routes which have been learned
    through BGP peering.
    """
    peering_address: str = pulumi.output_property("peeringAddress")
    """
    The BGP peer IP address of the virtual network
    gateway. This address is needed to configure the created gateway as a BGP Peer
    on the on-premises VPN devices.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayIpConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Virtual Network Gateway.
    """
    private_ip_address_allocation: str = pulumi.output_property("privateIpAddressAllocation")
    """
    Defines how the private IP address
    of the gateways virtual interface is assigned.
    """
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    """
    The ID of the Public IP Address associated
    with the Virtual Network Gateway.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ID of the gateway subnet of a virtual network in
    which the virtual network gateway will be created. It is mandatory that
    the associated subnet is named `GatewaySubnet`. Therefore, each virtual
    network can contain at most a single Virtual Network Gateway.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfiguration(dict):
    address_spaces: List[str] = pulumi.output_property("addressSpaces")
    """
    The address space out of which ip addresses for
    vpn clients will be taken. You can provide more than one address space, e.g.
    in CIDR notation.
    """
    radius_server_address: str = pulumi.output_property("radiusServerAddress")
    """
    The address of the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    radius_server_secret: str = pulumi.output_property("radiusServerSecret")
    """
    The secret used by the Radius server.
    This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
    """
    revoked_certificates: List['outputs.GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate'] = pulumi.output_property("revokedCertificates")
    """
    One or more `revoked_certificate` blocks which
    are defined below.
    """
    root_certificates: List['outputs.GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate'] = pulumi.output_property("rootCertificates")
    """
    One or more `root_certificate` blocks which are
    defined below. These root certificates are used to sign the client certificate
    used by the VPN clients to connect to the gateway.
    """
    vpn_client_protocols: List[str] = pulumi.output_property("vpnClientProtocols")
    """
    List of the protocols supported by the vpn client.
    The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Virtual Network Gateway.
    """
    thumbprint: str = pulumi.output_property("thumbprint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Virtual Network Gateway.
    """
    public_cert_data: str = pulumi.output_property("publicCertData")
    """
    The SHA1 thumbprint of the certificate to be revoked.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


