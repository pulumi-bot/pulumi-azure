# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationGatewayAuthenticationCertificate',
    'ApplicationGatewayAutoscaleConfiguration',
    'ApplicationGatewayBackendAddressPool',
    'ApplicationGatewayBackendHttpSetting',
    'ApplicationGatewayBackendHttpSettingAuthenticationCertificate',
    'ApplicationGatewayBackendHttpSettingConnectionDraining',
    'ApplicationGatewayCustomErrorConfiguration',
    'ApplicationGatewayFrontendIpConfiguration',
    'ApplicationGatewayFrontendPort',
    'ApplicationGatewayGatewayIpConfiguration',
    'ApplicationGatewayHttpListener',
    'ApplicationGatewayHttpListenerCustomErrorConfiguration',
    'ApplicationGatewayIdentity',
    'ApplicationGatewayProbe',
    'ApplicationGatewayProbeMatch',
    'ApplicationGatewayRedirectConfiguration',
    'ApplicationGatewayRequestRoutingRule',
    'ApplicationGatewayRewriteRuleSet',
    'ApplicationGatewayRewriteRuleSetRewriteRule',
    'ApplicationGatewayRewriteRuleSetRewriteRuleCondition',
    'ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration',
    'ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration',
    'ApplicationGatewaySku',
    'ApplicationGatewaySslCertificate',
    'ApplicationGatewaySslPolicy',
    'ApplicationGatewayTrustedRootCertificate',
    'ApplicationGatewayUrlPathMap',
    'ApplicationGatewayUrlPathMapPathRule',
    'ApplicationGatewayWafConfiguration',
    'ApplicationGatewayWafConfigurationDisabledRuleGroup',
    'ApplicationGatewayWafConfigurationExclusion',
    'ExpressRouteCircuitPeeringMicrosoftPeeringConfig',
    'ExpressRouteCircuitSku',
    'FirewallApplicationRuleCollectionRule',
    'FirewallApplicationRuleCollectionRuleProtocol',
    'FirewallIpConfiguration',
    'FirewallNatRuleCollectionRule',
    'FirewallNetworkRuleCollectionRule',
    'LocalNetworkGatewayBgpSettings',
    'NetworkConnectionMonitorDestination',
    'NetworkConnectionMonitorSource',
    'NetworkInterfaceIpConfiguration',
    'NetworkPacketCaptureFilter',
    'NetworkPacketCaptureStorageLocation',
    'NetworkSecurityGroupSecurityRule',
    'NetworkWatcherFlowLogRetentionPolicy',
    'NetworkWatcherFlowLogTrafficAnalytics',
    'PacketCaptureFilter',
    'PacketCaptureStorageLocation',
    'PointToPointVpnGatewayConnectionConfiguration',
    'PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool',
    'ProfileContainerNetworkInterface',
    'ProfileContainerNetworkInterfaceIpConfiguration',
    'RouteFilterRule',
    'RouteTableRoute',
    'SubnetDelegation',
    'SubnetDelegationServiceDelegation',
    'TrafficManagerEndpointCustomHeader',
    'TrafficManagerEndpointSubnet',
    'TrafficManagerProfileDnsConfig',
    'TrafficManagerProfileMonitorConfig',
    'TrafficManagerProfileMonitorConfigCustomHeader',
    'VirtualHubRoute',
    'VirtualNetworkDdosProtectionPlan',
    'VirtualNetworkGatewayBgpSettings',
    'VirtualNetworkGatewayConnectionIpsecPolicy',
    'VirtualNetworkGatewayConnectionTrafficSelectorPolicy',
    'VirtualNetworkGatewayIpConfiguration',
    'VirtualNetworkGatewayVpnClientConfiguration',
    'VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate',
    'VirtualNetworkGatewayVpnClientConfigurationRootCertificate',
    'VirtualNetworkSubnet',
    'VpnGatewayBgpSetting',
    'VpnServerConfigurationAzureActiveDirectoryAuthentication',
    'VpnServerConfigurationClientRevokedCertificate',
    'VpnServerConfigurationClientRootCertificate',
    'VpnServerConfigurationIpsecPolicy',
    'VpnServerConfigurationRadiusServer',
    'VpnServerConfigurationRadiusServerClientRootCertificate',
    'VpnServerConfigurationRadiusServerServerRootCertificate',
    'GetExpressRouteCircuitPeering',
    'GetExpressRouteCircuitServiceProviderProperty',
    'GetExpressRouteCircuitSku',
    'GetFirewallIpConfiguration',
    'GetGatewayConnectionIpsecPolicy',
    'GetGatewayConnectionTrafficSelectorPolicy',
    'GetNetworkInterfaceIpConfiguration',
    'GetNetworkSecurityGroupSecurityRule',
    'GetPublicIPsPublicIp',
    'GetRouteFilterRule',
    'GetRouteTableRoute',
    'GetVirtualNetworkGatewayBgpSetting',
    'GetVirtualNetworkGatewayIpConfiguration',
    'GetVirtualNetworkGatewayVpnClientConfiguration',
    'GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate',
    'GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate',
]

@pulumi.output_type
class ApplicationGatewayAuthenticationCertificate(dict):
    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The contents of the Authentication Certificate which should be used.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Authentication Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayAutoscaleConfiguration(dict):
    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[float]:
        """
        Maximum capacity for autoscaling. Accepted values are in the range `2` to `125`.
        """
        ...

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> float:
        """
        Minimum capacity for autoscaling. Accepted values are in the range `0` to `100`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendAddressPool(dict):
    @property
    @pulumi.getter
    def fqdns(self) -> Optional[List[str]]:
        """
        A list of FQDN's which should be part of the Backend Address Pool.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[List[str]]:
        """
        A list of IP Addresses which should be part of the Backend Address Pool.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Backend Address Pool.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSetting(dict):
    @property
    @pulumi.getter(name="affinityCookieName")
    def affinity_cookie_name(self) -> Optional[str]:
        """
        The name of the affinity cookie.
        """
        ...

    @property
    @pulumi.getter(name="authenticationCertificates")
    def authentication_certificates(self) -> Optional[List['outputs.ApplicationGatewayBackendHttpSettingAuthenticationCertificate']]:
        """
        One or more `authentication_certificate` blocks.
        """
        ...

    @property
    @pulumi.getter(name="connectionDraining")
    def connection_draining(self) -> Optional['outputs.ApplicationGatewayBackendHttpSettingConnectionDraining']:
        """
        A `connection_draining` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="cookieBasedAffinity")
    def cookie_based_affinity(self) -> str:
        """
        Is Cookie-Based Affinity enabled? Possible values are `Enabled` and `Disabled`.
        """
        ...

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        Host header to be sent to the backend servers. Cannot be set if `pick_host_name_from_backend_address` is set to `true`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Backend HTTP Settings Collection.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The Path which should be used as a prefix for all HTTP requests.
        """
        ...

    @property
    @pulumi.getter(name="pickHostNameFromBackendAddress")
    def pick_host_name_from_backend_address(self) -> Optional[bool]:
        """
        Whether host header should be picked from the host name of the backend server. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port which should be used for this Backend HTTP Settings Collection.
        """
        ...

    @property
    @pulumi.getter(name="probeId")
    def probe_id(self) -> Optional[str]:
        """
        The ID of the associated Probe.
        """
        ...

    @property
    @pulumi.getter(name="probeName")
    def probe_name(self) -> Optional[str]:
        """
        The name of an associated HTTP Probe.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The Protocol which should be used. Possible values are `Http` and `Https`.
        """
        ...

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[float]:
        """
        The request timeout in seconds, which must be between 1 and 86400 seconds.
        """
        ...

    @property
    @pulumi.getter(name="trustedRootCertificateNames")
    def trusted_root_certificate_names(self) -> Optional[List[str]]:
        """
        A list of `trusted_root_certificate` names.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSettingAuthenticationCertificate(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Authentication Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayBackendHttpSettingConnectionDraining(dict):
    @property
    @pulumi.getter(name="drainTimeoutSec")
    def drain_timeout_sec(self) -> float:
        """
        The number of seconds connection draining is active. Acceptable values are from `1` second to `3600` seconds.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        If connection draining is enabled or not.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayCustomErrorConfiguration(dict):
    @property
    @pulumi.getter(name="customErrorPageUrl")
    def custom_error_page_url(self) -> str:
        """
        Error page URL of the application gateway customer error.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayFrontendIpConfiguration(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Frontend IP Configuration.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        The Private IP Address to use for the Application Gateway.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressAllocation")
    def private_ip_address_allocation(self) -> Optional[str]:
        """
        The Allocation Method for the Private IP Address. Possible values are `Dynamic` and `Static`.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> Optional[str]:
        """
        The ID of a Public IP Address which the Application Gateway should use.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the Subnet.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayFrontendPort(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Frontend Port.
        """
        ...

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port used for this Frontend Port.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayGatewayIpConfiguration(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of this Gateway IP Configuration.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the Subnet which the Application Gateway should be connected to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayHttpListener(dict):
    @property
    @pulumi.getter(name="customErrorConfigurations")
    def custom_error_configurations(self) -> Optional[List['outputs.ApplicationGatewayHttpListenerCustomErrorConfiguration']]:
        """
        One or more `custom_error_configuration` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="firewallPolicyId")
    def firewall_policy_id(self) -> Optional[str]:
        """
        The ID of the Web Application Firewall Policy which should be used as a HTTP Listener.
        """
        ...

    @property
    @pulumi.getter(name="frontendIpConfigurationId")
    def frontend_ip_configuration_id(self) -> Optional[str]:
        """
        The ID of the associated Frontend Configuration.
        """
        ...

    @property
    @pulumi.getter(name="frontendIpConfigurationName")
    def frontend_ip_configuration_name(self) -> str:
        """
        The Name of the Frontend IP Configuration used for this HTTP Listener.
        """
        ...

    @property
    @pulumi.getter(name="frontendPortId")
    def frontend_port_id(self) -> Optional[str]:
        """
        The ID of the associated Frontend Port.
        """
        ...

    @property
    @pulumi.getter(name="frontendPortName")
    def frontend_port_name(self) -> str:
        """
        The Name of the Frontend Port use for this HTTP Listener.
        """
        ...

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        The Hostname which should be used for this HTTP Listener.
        """
        ...

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[List[str]]:
        """
        A list of Hostname(s) should be used for this HTTP Listener. It allows special wildcard characters.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the HTTP Listener.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The Protocol to use for this HTTP Listener. Possible values are `Http` and `Https`.
        """
        ...

    @property
    @pulumi.getter(name="requireSni")
    def require_sni(self) -> Optional[bool]:
        """
        Should Server Name Indication be Required? Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[str]:
        """
        The ID of the associated SSL Certificate.
        """
        ...

    @property
    @pulumi.getter(name="sslCertificateName")
    def ssl_certificate_name(self) -> Optional[str]:
        """
        The name of the associated SSL Certificate which should be used for this HTTP Listener.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayHttpListenerCustomErrorConfiguration(dict):
    @property
    @pulumi.getter(name="customErrorPageUrl")
    def custom_error_page_url(self) -> str:
        """
        Error page URL of the application gateway customer error.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        Status code of the application gateway customer error. Possible values are `HttpStatus403` and `HttpStatus502`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayIdentity(dict):
    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> str:
        """
        Specifies a list with a single user managed identity id to be assigned to the Application Gateway.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The Managed Service Identity Type of this Application Gateway. The only possible value is `UserAssigned`. Defaults to `UserAssigned`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayProbe(dict):
    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The Hostname used for this Probe. If the Application Gateway is configured for a single site, by default the Host name should be specified as ‘127.0.0.1’, unless otherwise configured in custom probe. Cannot be set if `pick_host_name_from_backend_http_settings` is set to `true`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def interval(self) -> float:
        """
        The Interval between two consecutive probes in seconds. Possible values range from 1 second to a maximum of 86,400 seconds.
        """
        ...

    @property
    @pulumi.getter
    def match(self) -> Optional['outputs.ApplicationGatewayProbeMatch']:
        """
        A `match` block as defined above.
        """
        ...

    @property
    @pulumi.getter(name="minimumServers")
    def minimum_servers(self) -> Optional[float]:
        """
        The minimum number of servers that are always marked as healthy. Defaults to `0`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the Probe.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The Path used for this Probe.
        """
        ...

    @property
    @pulumi.getter(name="pickHostNameFromBackendHttpSettings")
    def pick_host_name_from_backend_http_settings(self) -> Optional[bool]:
        """
        Whether the host header should be picked from the backend http settings. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The Protocol used for this Probe. Possible values are `Http` and `Https`.
        """
        ...

    @property
    @pulumi.getter
    def timeout(self) -> float:
        """
        The Timeout used for this Probe, which indicates when a probe becomes unhealthy. Possible values range from 1 second to a maximum of 86,400 seconds.
        """
        ...

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> float:
        """
        The Unhealthy Threshold for this Probe, which indicates the amount of retries which should be attempted before a node is deemed unhealthy. Possible values are from 1 - 20 seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayProbeMatch(dict):
    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        A snippet from the Response Body which must be present in the Response..
        """
        ...

    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> Optional[List[str]]:
        """
        A list of allowed status codes for this Health Probe.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRedirectConfiguration(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter(name="includePath")
    def include_path(self) -> Optional[bool]:
        """
        Whether or not to include the path in the redirected Url. Defaults to `false`
        """
        ...

    @property
    @pulumi.getter(name="includeQueryString")
    def include_query_string(self) -> Optional[bool]:
        """
        Whether or not to include the query string in the redirected Url. Default to `false`
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique name of the redirect configuration block
        """
        ...

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> str:
        """
        The type of redirect. Possible values are `Permanent`, `Temporary`, `Found` and `SeeOther`
        """
        ...

    @property
    @pulumi.getter(name="targetListenerId")
    def target_listener_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="targetListenerName")
    def target_listener_name(self) -> Optional[str]:
        """
        The name of the listener to redirect to. Cannot be set if `target_url` is set.
        """
        ...

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        """
        The Url to redirect the request to. Cannot be set if `target_listener_name` is set.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRequestRoutingRule(dict):
    @property
    @pulumi.getter(name="backendAddressPoolId")
    def backend_address_pool_id(self) -> Optional[str]:
        """
        The ID of the associated Backend Address Pool.
        """
        ...

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> Optional[str]:
        """
        The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="backendHttpSettingsId")
    def backend_http_settings_id(self) -> Optional[str]:
        """
        The ID of the associated Backend HTTP Settings Configuration.
        """
        ...

    @property
    @pulumi.getter(name="backendHttpSettingsName")
    def backend_http_settings_name(self) -> Optional[str]:
        """
        The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="httpListenerId")
    def http_listener_id(self) -> Optional[str]:
        """
        The ID of the associated HTTP Listener.
        """
        ...

    @property
    @pulumi.getter(name="httpListenerName")
    def http_listener_name(self) -> str:
        """
        The Name of the HTTP Listener which should be used for this Routing Rule.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of this Request Routing Rule.
        """
        ...

    @property
    @pulumi.getter(name="redirectConfigurationId")
    def redirect_configuration_id(self) -> Optional[str]:
        """
        The ID of the associated Redirect Configuration.
        """
        ...

    @property
    @pulumi.getter(name="redirectConfigurationName")
    def redirect_configuration_name(self) -> Optional[str]:
        """
        The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="rewriteRuleSetId")
    def rewrite_rule_set_id(self) -> Optional[str]:
        """
        The ID of the associated Rewrite Rule Set.
        """
        ...

    @property
    @pulumi.getter(name="rewriteRuleSetName")
    def rewrite_rule_set_name(self) -> Optional[str]:
        """
        The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
        """
        ...

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
        """
        ...

    @property
    @pulumi.getter(name="urlPathMapId")
    def url_path_map_id(self) -> Optional[str]:
        """
        The ID of the associated URL Path Map.
        """
        ...

    @property
    @pulumi.getter(name="urlPathMapName")
    def url_path_map_name(self) -> Optional[str]:
        """
        The Name of the URL Path Map which should be associated with this Routing Rule.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSet(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique name of the rewrite rule set block
        """
        ...

    @property
    @pulumi.getter(name="rewriteRules")
    def rewrite_rules(self) -> Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRule']]:
        """
        One or more `rewrite_rule` blocks as defined above.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRule(dict):
    @property
    @pulumi.getter
    def conditions(self) -> Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleCondition']]:
        """
        One or more `condition` blocks as defined above.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique name of the rewrite rule block
        """
        ...

    @property
    @pulumi.getter(name="requestHeaderConfigurations")
    def request_header_configurations(self) -> Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration']]:
        """
        One or more `request_header_configuration` blocks as defined above.
        """
        ...

    @property
    @pulumi.getter(name="responseHeaderConfigurations")
    def response_header_configurations(self) -> Optional[List['outputs.ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration']]:
        """
        One or more `response_header_configuration` blocks as defined above.
        """
        ...

    @property
    @pulumi.getter(name="ruleSequence")
    def rule_sequence(self) -> float:
        """
        Rule sequence of the rewrite rule that determines the order of execution in a set.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleCondition(dict):
    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Perform a case in-sensitive comparison. Defaults to `false`
        """
        ...

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate the result of the condition evaluation. Defaults to `false`
        """
        ...

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
        """
        ...

    @property
    @pulumi.getter
    def variable(self) -> str:
        """
        The [variable](https://docs.microsoft.com/en-us/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleRequestHeaderConfiguration(dict):
    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Header name of the header configuration.
        """
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Header value of the header configuration. To delete a request header set this property to an empty string.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayRewriteRuleSetRewriteRuleResponseHeaderConfiguration(dict):
    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Header name of the header configuration.
        """
        ...

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Header value of the header configuration. To delete a response header set this property to an empty string.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySku(dict):
    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        """
        The Capacity of the SKU to use for this Application Gateway. When using a V1 SKU this value must be between 1 and 32, and 1 to 125 for a V2 SKU. This property is optional if `autoscale_configuration` is set.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the SKU to use for this Application Gateway. Possible values are `Standard_Small`, `Standard_Medium`, `Standard_Large`, `Standard_v2`, `WAF_Medium`, `WAF_Large`, and `WAF_v2`.
        """
        ...

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The Tier of the SKU to use for this Application Gateway. Possible values are `Standard`, `Standard_v2`, `WAF` and `WAF_v2`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySslCertificate(dict):
    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        """
        PFX certificate. Required if `key_vault_secret_id` is not set.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter(name="keyVaultSecretId")
    def key_vault_secret_id(self) -> Optional[str]:
        """
        Secret Id of (base-64 encoded unencrypted pfx) `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for keyvault to use this feature. Required if `data` is not set.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the SSL certificate that is unique within this Application Gateway
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for the pfx file specified in data.  Required if `data` is set.
        """
        ...

    @property
    @pulumi.getter(name="publicCertData")
    def public_cert_data(self) -> Optional[str]:
        """
        The Public Certificate Data associated with the SSL Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewaySslPolicy(dict):
    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[List[str]]:
        """
        A List of accepted cipher suites. Possible values are: `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_128_CBC_SHA256`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA`, `TLS_DHE_DSS_WITH_AES_256_CBC_SHA256`, `TLS_DHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_128_GCM_SHA256`, `TLS_DHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_DHE_RSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384`, `TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA`, `TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384`, `TLS_RSA_WITH_3DES_EDE_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA`, `TLS_RSA_WITH_AES_128_CBC_SHA256`, `TLS_RSA_WITH_AES_128_GCM_SHA256`, `TLS_RSA_WITH_AES_256_CBC_SHA`, `TLS_RSA_WITH_AES_256_CBC_SHA256` and `TLS_RSA_WITH_AES_256_GCM_SHA384`.
        """
        ...

    @property
    @pulumi.getter(name="disabledProtocols")
    def disabled_protocols(self) -> Optional[List[str]]:
        """
        A list of SSL Protocols which should be disabled on this Application Gateway. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
        """
        ...

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[str]:
        """
        The minimal TLS version. Possible values are `TLSv1_0`, `TLSv1_1` and `TLSv1_2`.
        """
        ...

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        The Name of the Policy e.g AppGwSslPolicy20170401S. Required if `policy_type` is set to `Predefined`. Possible values can change over time and
        are published here https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-ssl-policy-overview. Not compatible with `disabled_protocols`.
        """
        ...

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        """
        The Type of the Policy. Possible values are `Predefined` and `Custom`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayTrustedRootCertificate(dict):
    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The contents of the Trusted Root Certificate which should be used.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the Trusted Root Certificate to use.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayUrlPathMap(dict):
    @property
    @pulumi.getter(name="defaultBackendAddressPoolId")
    def default_backend_address_pool_id(self) -> Optional[str]:
        """
        The ID of the Default Backend Address Pool.
        """
        ...

    @property
    @pulumi.getter(name="defaultBackendAddressPoolName")
    def default_backend_address_pool_name(self) -> Optional[str]:
        """
        The Name of the Default Backend Address Pool which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="defaultBackendHttpSettingsId")
    def default_backend_http_settings_id(self) -> Optional[str]:
        """
        The ID of the Default Backend HTTP Settings Collection.
        """
        ...

    @property
    @pulumi.getter(name="defaultBackendHttpSettingsName")
    def default_backend_http_settings_name(self) -> Optional[str]:
        """
        The Name of the Default Backend HTTP Settings Collection which should be used for this URL Path Map. Cannot be set if `default_redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="defaultRedirectConfigurationId")
    def default_redirect_configuration_id(self) -> Optional[str]:
        """
        The ID of the Default Redirect Configuration.
        """
        ...

    @property
    @pulumi.getter(name="defaultRedirectConfigurationName")
    def default_redirect_configuration_name(self) -> Optional[str]:
        """
        The Name of the Default Redirect Configuration which should be used for this URL Path Map. Cannot be set if either `default_backend_address_pool_name` or `default_backend_http_settings_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="defaultRewriteRuleSetId")
    def default_rewrite_rule_set_id(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="defaultRewriteRuleSetName")
    def default_rewrite_rule_set_name(self) -> Optional[str]:
        """
        The Name of the Default Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the URL Path Map.
        """
        ...

    @property
    @pulumi.getter(name="pathRules")
    def path_rules(self) -> List['outputs.ApplicationGatewayUrlPathMapPathRule']:
        """
        One or more `path_rule` blocks as defined above.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayUrlPathMapPathRule(dict):
    @property
    @pulumi.getter(name="backendAddressPoolId")
    def backend_address_pool_id(self) -> Optional[str]:
        """
        The ID of the associated Backend Address Pool.
        """
        ...

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> Optional[str]:
        """
        The Name of the Backend Address Pool to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="backendHttpSettingsId")
    def backend_http_settings_id(self) -> Optional[str]:
        """
        The ID of the associated Backend HTTP Settings Configuration.
        """
        ...

    @property
    @pulumi.getter(name="backendHttpSettingsName")
    def backend_http_settings_name(self) -> Optional[str]:
        """
        The Name of the Backend HTTP Settings Collection to use for this Path Rule. Cannot be set if `redirect_configuration_name` is set.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Rewrite Rule Set
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the Path Rule.
        """
        ...

    @property
    @pulumi.getter
    def paths(self) -> List[str]:
        """
        A list of Paths used in this Path Rule.
        """
        ...

    @property
    @pulumi.getter(name="redirectConfigurationId")
    def redirect_configuration_id(self) -> Optional[str]:
        """
        The ID of the associated Redirect Configuration.
        """
        ...

    @property
    @pulumi.getter(name="redirectConfigurationName")
    def redirect_configuration_name(self) -> Optional[str]:
        """
        The Name of a Redirect Configuration to use for this Path Rule. Cannot be set if `backend_address_pool_name` or `backend_http_settings_name` is set.
        """
        ...

    @property
    @pulumi.getter(name="rewriteRuleSetId")
    def rewrite_rule_set_id(self) -> Optional[str]:
        """
        The ID of the associated Rewrite Rule Set.
        """
        ...

    @property
    @pulumi.getter(name="rewriteRuleSetName")
    def rewrite_rule_set_name(self) -> Optional[str]:
        """
        The Name of the Rewrite Rule Set which should be used for this URL Path Map. Only valid for v2 SKUs.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfiguration(dict):
    @property
    @pulumi.getter(name="disabledRuleGroups")
    def disabled_rule_groups(self) -> Optional[List['outputs.ApplicationGatewayWafConfigurationDisabledRuleGroup']]:
        """
        one or more `disabled_rule_group` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is the Web Application Firewall be enabled?
        """
        ...

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List['outputs.ApplicationGatewayWafConfigurationExclusion']]:
        """
        one or more `exclusion` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="fileUploadLimitMb")
    def file_upload_limit_mb(self) -> Optional[float]:
        """
        The File Upload Limit in MB. Accepted values are in the range `1`MB to `500`MB. Defaults to `100`MB.
        """
        ...

    @property
    @pulumi.getter(name="firewallMode")
    def firewall_mode(self) -> str:
        """
        The Web Application Firewall Mode. Possible values are `Detection` and `Prevention`.
        """
        ...

    @property
    @pulumi.getter(name="maxRequestBodySizeKb")
    def max_request_body_size_kb(self) -> Optional[float]:
        """
        The Maximum Request Body Size in KB.  Accepted values are in the range `1`KB to `128`KB.  Defaults to `128`KB.
        """
        ...

    @property
    @pulumi.getter(name="requestBodyCheck")
    def request_body_check(self) -> Optional[bool]:
        """
        Is Request Body Inspection enabled?  Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="ruleSetType")
    def rule_set_type(self) -> Optional[str]:
        """
        The Type of the Rule Set used for this Web Application Firewall. Currently, only `OWASP` is supported.
        """
        ...

    @property
    @pulumi.getter(name="ruleSetVersion")
    def rule_set_version(self) -> str:
        """
        The Version of the Rule Set used for this Web Application Firewall. Possible values are `2.2.9`, `3.0`, and `3.1`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfigurationDisabledRuleGroup(dict):
    @property
    @pulumi.getter(name="ruleGroupName")
    def rule_group_name(self) -> str:
        """
        The rule group where specific rules should be disabled. Accepted values are:  `crs_20_protocol_violations`, `crs_21_protocol_anomalies`, `crs_23_request_limits`, `crs_30_http_policy`, `crs_35_bad_robots`, `crs_40_generic_attacks`, `crs_41_sql_injection_attacks`, `crs_41_xss_attacks`, `crs_42_tight_security`, `crs_45_trojans`, `General`, `REQUEST-911-METHOD-ENFORCEMENT`, `REQUEST-913-SCANNER-DETECTION`, `REQUEST-920-PROTOCOL-ENFORCEMENT`, `REQUEST-921-PROTOCOL-ATTACK`, `REQUEST-930-APPLICATION-ATTACK-LFI`, `REQUEST-931-APPLICATION-ATTACK-RFI`, `REQUEST-932-APPLICATION-ATTACK-RCE`, `REQUEST-933-APPLICATION-ATTACK-PHP`, `REQUEST-941-APPLICATION-ATTACK-XSS`, `REQUEST-942-APPLICATION-ATTACK-SQLI`, `REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION`
        """
        ...

    @property
    @pulumi.getter
    def rules(self) -> Optional[List[float]]:
        """
        A list of rules which should be disabled in that group. Disables all rules in the specified group if `rules` is not specified.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationGatewayWafConfigurationExclusion(dict):
    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        Match variable of the exclusion rule to exclude header, cookie or GET arguments. Possible values are `RequestHeaderNames`, `RequestArgNames` and `RequestCookieNames`
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        """
        String value which will be used for the filter operation. If empty will exclude all traffic on this `match_variable`
        """
        ...

    @property
    @pulumi.getter(name="selectorMatchOperator")
    def selector_match_operator(self) -> Optional[str]:
        """
        Operator which will be used to search in the variable content. Possible values are `Equals`, `StartsWith`, `EndsWith`, `Contains`. If empty will exclude all traffic on this `match_variable`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExpressRouteCircuitPeeringMicrosoftPeeringConfig(dict):
    @property
    @pulumi.getter(name="advertisedPublicPrefixes")
    def advertised_public_prefixes(self) -> List[str]:
        """
        A list of Advertised Public Prefixes
        """
        ...

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[float]:
        """
        The CustomerASN of the peering
        """
        ...

    @property
    @pulumi.getter(name="routingRegistryName")
    def routing_registry_name(self) -> Optional[str]:
        """
        The RoutingRegistryName of the configuration
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExpressRouteCircuitSku(dict):
    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
        """
        ...

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallApplicationRuleCollectionRule(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies a description for the rule.
        """
        ...

    @property
    @pulumi.getter(name="fqdnTags")
    def fqdn_tags(self) -> Optional[List[str]]:
        """
        A list of FQDN tags. Possible values are `AppServiceEnvironment`, `AzureBackup`, `MicrosoftActiveProtectionService`, `WindowsDiagnostics` and `WindowsUpdate`
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the rule.
        """
        ...

    @property
    @pulumi.getter
    def protocols(self) -> Optional[List['outputs.FirewallApplicationRuleCollectionRuleProtocol']]:
        """
        One or more `protocol` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> List[str]:
        """
        A list of source IP addresses and/or IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="targetFqdns")
    def target_fqdns(self) -> Optional[List[str]]:
        """
        A list of FQDNs.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallApplicationRuleCollectionRuleProtocol(dict):
    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        """
        Specify a port for the connection.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of connection. Possible values are `Http`, `Https` and `Mssql`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallIpConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the IP Configuration.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        The private IP address of the Azure Firewall.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> str:
        """
        The Resource ID of the Public IP Address associated with the firewall.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Reference to the subnet associated with the IP Configuration.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallNatRuleCollectionRule(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies a description for the rule.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> List[str]:
        """
        A list of destination IP addresses and/or IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> List[str]:
        """
        A list of destination ports.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the rule.
        """
        ...

    @property
    @pulumi.getter
    def protocols(self) -> List[str]:
        """
        A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.  If `action` is `Dnat`, protocols can only be `TCP` and `UDP`.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> List[str]:
        """
        A list of source IP addresses and/or IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="translatedAddress")
    def translated_address(self) -> str:
        """
        The address of the service behind the Firewall.
        """
        ...

    @property
    @pulumi.getter(name="translatedPort")
    def translated_port(self) -> str:
        """
        The port of the service behind the Firewall.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallNetworkRuleCollectionRule(dict):
    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies a description for the rule.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> List[str]:
        """
        A list of destination IP addresses and/or IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> List[str]:
        """
        A list of destination ports.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the rule.
        """
        ...

    @property
    @pulumi.getter
    def protocols(self) -> List[str]:
        """
        A list of protocols. Possible values are `Any`, `ICMP`, `TCP` and `UDP`.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> List[str]:
        """
        A list of source IP addresses and/or IP ranges.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LocalNetworkGatewayBgpSettings(dict):
    @property
    @pulumi.getter
    def asn(self) -> float:
        """
        The BGP speaker's ASN.
        """
        ...

    @property
    @pulumi.getter(name="bgpPeeringAddress")
    def bgp_peering_address(self) -> str:
        """
        The BGP peering address and BGP identifier
        of this BGP speaker.
        """
        ...

    @property
    @pulumi.getter(name="peerWeight")
    def peer_weight(self) -> Optional[float]:
        """
        The weight added to routes learned from this
        BGP speaker.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkConnectionMonitorDestination(dict):
    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        IP address or domain name to monitor connectivity to.
        """
        ...

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port on the destination to monitor connectivity to.
        """
        ...

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[str]:
        """
        The ID of the Virtual Machine to monitor connectivity to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkConnectionMonitorSource(dict):
    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        """
        The port on the destination to monitor connectivity to.
        """
        ...

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> str:
        """
        The ID of the Virtual Machine to monitor connectivity to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkInterfaceIpConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name used for this IP Configuration.
        """
        ...

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Is this the Primary IP Configuration? Must be `true` for the first `ip_configuration` when multiple are specified. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[str]:
        """
        The Static IP Address which should be used.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressAllocation")
    def private_ip_address_allocation(self) -> str:
        """
        The allocation method used for the Private IP Address. Possible values are `Dynamic` and `Static`.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressVersion")
    def private_ip_address_version(self) -> Optional[str]:
        """
        The IP Version to use. Possible values are `IPv4` or `IPv6`. Defaults to `IPv4`.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> Optional[str]:
        """
        Reference to a Public IP Address to associate with this NIC
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the Subnet where this Network Interface should be located in.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkPacketCaptureFilter(dict):
    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[str]:
        """
        The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[str]:
        """
        The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> Optional[str]:
        """
        The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[str]:
        """
        The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkPacketCaptureStorageLocation(dict):
    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[str]:
        """
        The ID of the storage account to save the packet capture session
        """
        ...

    @property
    @pulumi.getter(name="storagePath")
    def storage_path(self) -> Optional[str]:
        """
        The URI of the storage path to save the packet capture.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkSecurityGroupSecurityRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description for this rule. Restricted to 140 characters.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddressPrefix")
    def destination_address_prefix(self) -> Optional[str]:
        """
        CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddressPrefixes")
    def destination_address_prefixes(self) -> Optional[List[str]]:
        """
        List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="destinationApplicationSecurityGroupIds")
    def destination_application_security_group_ids(self) -> Optional[List[str]]:
        """
        A List of destination Application Security Group ID's
        """
        ...

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional[str]:
        """
        Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[List[str]]:
        """
        List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
        """
        ...

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the security rule.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Network protocol this rule applies to. Can be `Tcp`, `Udp`, `Icmp`, or `*` to match all.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> Optional[str]:
        """
        CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefixes")
    def source_address_prefixes(self) -> Optional[List[str]]:
        """
        List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="sourceApplicationSecurityGroupIds")
    def source_application_security_group_ids(self) -> Optional[List[str]]:
        """
        A List of source Application Security Group ID's
        """
        ...

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[str]:
        """
        Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
        """
        ...

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[List[str]]:
        """
        List of source ports or port ranges. This is required if `source_port_range` is not specified.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkWatcherFlowLogRetentionPolicy(dict):
    @property
    @pulumi.getter
    def days(self) -> float:
        """
        The number of days to retain flow log records.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean flag to enable/disable traffic analytics.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NetworkWatcherFlowLogTrafficAnalytics(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean flag to enable/disable traffic analytics.
        """
        ...

    @property
    @pulumi.getter(name="intervalInMinutes")
    def interval_in_minutes(self) -> Optional[float]:
        """
        How frequently service should do flow analytics in minutes.
        """
        ...

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The resource guid of the attached workspace.
        """
        ...

    @property
    @pulumi.getter(name="workspaceRegion")
    def workspace_region(self) -> str:
        """
        The location of the attached workspace.
        """
        ...

    @property
    @pulumi.getter(name="workspaceResourceId")
    def workspace_resource_id(self) -> str:
        """
        The resource ID of the attached workspace.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketCaptureFilter(dict):
    @property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[str]:
        """
        The local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[str]:
        """
        The local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="remoteIpAddress")
    def remote_ip_address(self) -> Optional[str]:
        """
        The remote IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported.. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[str]:
        """
        The remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PacketCaptureStorageLocation(dict):
    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with `/var/captures`.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[str]:
        """
        The ID of the storage account to save the packet capture session
        """
        ...

    @property
    @pulumi.getter(name="storagePath")
    def storage_path(self) -> Optional[str]:
        """
        The URI of the storage path to save the packet capture.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PointToPointVpnGatewayConnectionConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name which should be used for this Connection Configuration.
        """
        ...

    @property
    @pulumi.getter(name="vpnClientAddressPool")
    def vpn_client_address_pool(self) -> 'outputs.PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool':
        """
        A `vpn_client_address_pool` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PointToPointVpnGatewayConnectionConfigurationVpnClientAddressPool(dict):
    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> List[str]:
        """
        A list of CIDR Ranges which should be used as Address Prefixes.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProfileContainerNetworkInterface(dict):
    @property
    @pulumi.getter(name="ipConfigurations")
    def ip_configurations(self) -> List['outputs.ProfileContainerNetworkInterfaceIpConfiguration']:
        """
        One or more `ip_configuration` blocks as documented below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the IP Configuration.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProfileContainerNetworkInterfaceIpConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the IP Configuration.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Reference to the subnet associated with the IP Configuration.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteFilterRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The access type of the rule. The only possible value is `Allow`.
        """
        ...

    @property
    @pulumi.getter
    def communities(self) -> List[str]:
        """
        The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the route filter rule.
        """
        ...

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The rule type of the rule. The only possible value is `Community`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RouteTableRoute(dict):
    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> str:
        """
        The destination CIDR to which the route applies, such as 10.1.0.0/16
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the route.
        """
        ...

    @property
    @pulumi.getter(name="nextHopInIpAddress")
    def next_hop_in_ip_address(self) -> Optional[str]:
        """
        Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
        """
        ...

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> str:
        """
        The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetDelegation(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name for this delegation.
        """
        ...

    @property
    @pulumi.getter(name="serviceDelegation")
    def service_delegation(self) -> 'outputs.SubnetDelegationServiceDelegation':
        """
        A `service_delegation` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubnetDelegationServiceDelegation(dict):
    @property
    @pulumi.getter
    def actions(self) -> Optional[List[str]]:
        """
        A list of Actions which should be delegated. This list is specific to the service to delegate to. Possible values include `Microsoft.Network/networkinterfaces/*`, `Microsoft.Network/virtualNetworks/subnets/action`, `Microsoft.Network/virtualNetworks/subnets/join/action`, `Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action` and `Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of service to delegate to. Possible values include `Microsoft.BareMetal/AzureVMware`, `Microsoft.BareMetal/CrayServers`, `Microsoft.Batch/batchAccounts`, `Microsoft.ContainerInstance/containerGroups`, `Microsoft.Databricks/workspaces`, `Microsoft.DBforPostgreSQL/serversv2`, `Microsoft.HardwareSecurityModules/dedicatedHSMs`, `Microsoft.Logic/integrationServiceEnvironments`, `Microsoft.Netapp/volumes`, `Microsoft.ServiceFabricMesh/networks`, `Microsoft.Sql/managedInstances`, `Microsoft.Sql/servers`, `Microsoft.StreamAnalytics/streamingJobs`, `Microsoft.Web/hostingEnvironments` and `Microsoft.Web/serverFarms`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerEndpointCustomHeader(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the custom header.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of custom header. Applicable for Http and Https protocol.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerEndpointSubnet(dict):
    @property
    @pulumi.getter
    def first(self) -> str:
        """
        The First IP....
        """
        ...

    @property
    @pulumi.getter
    def last(self) -> Optional[str]:
        """
        The Last IP...
        """
        ...

    @property
    @pulumi.getter
    def scope(self) -> Optional[float]:
        """
        The Scope...
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileDnsConfig(dict):
    @property
    @pulumi.getter(name="relativeName")
    def relative_name(self) -> str:
        """
        The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def ttl(self) -> float:
        """
        The TTL value of the Profile used by Local DNS resolvers and clients.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileMonitorConfig(dict):
    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[List['outputs.TrafficManagerProfileMonitorConfigCustomHeader']]:
        """
        One or more `custom_header` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="expectedStatusCodeRanges")
    def expected_status_code_ranges(self) -> Optional[List[str]]:
        """
        A list of status code ranges in the format of `100-101`.
        """
        ...

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[float]:
        """
        The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
        """
        ...

    @property
    @pulumi.getter
    def port(self) -> float:
        """
        The port number used by the monitoring checks.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
        """
        ...

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[float]:
        """
        The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
        """
        ...

    @property
    @pulumi.getter(name="toleratedNumberOfFailures")
    def tolerated_number_of_failures(self) -> Optional[float]:
        """
        The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TrafficManagerProfileMonitorConfigCustomHeader(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the custom header.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of custom header. Applicable for Http and Https protocol.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualHubRoute(dict):
    @property
    @pulumi.getter(name="addressPrefixes")
    def address_prefixes(self) -> List[str]:
        """
        A list of Address Prefixes.
        """
        ...

    @property
    @pulumi.getter(name="nextHopIpAddress")
    def next_hop_ip_address(self) -> str:
        """
        The IP Address that Packets should be forwarded to as the Next Hop.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkDdosProtectionPlan(dict):
    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable/disable DDoS Protection Plan on Virtual Network.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Resource ID of DDoS Protection Plan.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayBgpSettings(dict):
    @property
    @pulumi.getter
    def asn(self) -> Optional[float]:
        """
        The Autonomous System Number (ASN) to use as part of the BGP.
        """
        ...

    @property
    @pulumi.getter(name="peerWeight")
    def peer_weight(self) -> Optional[float]:
        """
        The weight added to routes which have been learned
        through BGP peering. Valid values can be between `0` and `100`.
        """
        ...

    @property
    @pulumi.getter(name="peeringAddress")
    def peering_address(self) -> Optional[str]:
        """
        The BGP peer IP address of the virtual network
        gateway. This address is needed to configure the created gateway as a BGP Peer
        on the on-premises VPN devices. The IP address must be part of the subnet of
        the Virtual Network Gateway. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayConnectionIpsecPolicy(dict):
    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> str:
        """
        The DH group used in IKE phase 1 for initial SA. Valid
        options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
        `ECP256`, `ECP384`, or `None`.
        """
        ...

    @property
    @pulumi.getter(name="ikeEncryption")
    def ike_encryption(self) -> str:
        """
        The IKE encryption algorithm. Valid
        options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
        """
        ...

    @property
    @pulumi.getter(name="ikeIntegrity")
    def ike_integrity(self) -> str:
        """
        The IKE integrity algorithm. Valid
        options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> str:
        """
        The IPSec encryption algorithm. Valid
        options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecIntegrity")
    def ipsec_integrity(self) -> str:
        """
        The IPSec integrity algorithm. Valid
        options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
        """
        ...

    @property
    @pulumi.getter(name="pfsGroup")
    def pfs_group(self) -> str:
        """
        The DH group used in IKE phase 2 for new child SA.
        Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
        or `None`.
        """
        ...

    @property
    @pulumi.getter(name="saDatasize")
    def sa_datasize(self) -> Optional[float]:
        """
        The IPSec SA payload size in KB. Must be at least
        `1024` KB. Defaults to `102400000` KB.
        """
        ...

    @property
    @pulumi.getter(name="saLifetime")
    def sa_lifetime(self) -> Optional[float]:
        """
        The IPSec SA lifetime in seconds. Must be at least
        `300` seconds. Defaults to `27000` seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayConnectionTrafficSelectorPolicy(dict):
    @property
    @pulumi.getter(name="localAddressCidrs")
    def local_address_cidrs(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="remoteAddressCidrs")
    def remote_address_cidrs(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayIpConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A user-defined name of the revoked certificate.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressAllocation")
    def private_ip_address_allocation(self) -> Optional[str]:
        """
        Defines how the private IP address
        of the gateways virtual interface is assigned. Valid options are `Static` or
        `Dynamic`. Defaults to `Dynamic`.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> str:
        """
        The ID of the public ip address to associate
        with the Virtual Network Gateway.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the gateway subnet of a virtual network in
        which the virtual network gateway will be created. It is mandatory that
        the associated subnet is named `GatewaySubnet`. Therefore, each virtual
        network can contain at most a single Virtual Network Gateway.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfiguration(dict):
    @property
    @pulumi.getter(name="addressSpaces")
    def address_spaces(self) -> List[str]:
        """
        The address space out of which ip addresses for
        vpn clients will be taken. You can provide more than one address space, e.g.
        in CIDR notation.
        """
        ...

    @property
    @pulumi.getter(name="radiusServerAddress")
    def radius_server_address(self) -> Optional[str]:
        """
        The address of the Radius server.
        This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> Optional[str]:
        """
        The secret used by the Radius server.
        This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="revokedCertificates")
    def revoked_certificates(self) -> Optional[List['outputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate']]:
        """
        One or more `revoked_certificate` blocks which
        are defined below.
        This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        """
        ...

    @property
    @pulumi.getter(name="rootCertificates")
    def root_certificates(self) -> Optional[List['outputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificate']]:
        """
        One or more `root_certificate` blocks which are
        defined below. These root certificates are used to sign the client certificate
        used by the VPN clients to connect to the gateway.
        This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        """
        ...

    @property
    @pulumi.getter(name="vpnClientProtocols")
    def vpn_client_protocols(self) -> Optional[List[str]]:
        """
        List of the protocols supported by the vpn client.
        The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A user-defined name of the revoked certificate.
        """
        ...

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkGatewayVpnClientConfigurationRootCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A user-defined name of the revoked certificate.
        """
        ...

    @property
    @pulumi.getter(name="publicCertData")
    def public_cert_data(self) -> str:
        """
        The SHA1 thumbprint of the certificate to be
        revoked.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkSubnet(dict):
    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> str:
        """
        The address prefix to use for the subnet.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The Resource ID of DDoS Protection Plan.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the virtual network. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[str]:
        """
        The Network Security Group to associate with the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnGatewayBgpSetting(dict):
    @property
    @pulumi.getter
    def asn(self) -> float:
        """
        The ASN of the BGP Speaker. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="bgpPeeringAddress")
    def bgp_peering_address(self) -> Optional[str]:
        """
        The Address which should be used for the BGP Peering.
        """
        ...

    @property
    @pulumi.getter(name="peerWeight")
    def peer_weight(self) -> float:
        """
        The weight added to Routes learned from this BGP Speaker. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationAzureActiveDirectoryAuthentication(dict):
    @property
    @pulumi.getter
    def audience(self) -> str:
        """
        The Audience which should be used for authentication.
        """
        ...

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The Issuer which should be used for authentication.
        """
        ...

    @property
    @pulumi.getter
    def tenant(self) -> str:
        """
        The Tenant which should be used for authentication.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationClientRevokedCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name used to uniquely identify this certificate.
        """
        ...

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The Thumbprint of the Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationClientRootCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name used to uniquely identify this certificate.
        """
        ...

    @property
    @pulumi.getter(name="publicCertData")
    def public_cert_data(self) -> str:
        """
        The Public Key Data associated with the Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationIpsecPolicy(dict):
    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> str:
        """
        The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
        """
        ...

    @property
    @pulumi.getter(name="ikeEncryption")
    def ike_encryption(self) -> str:
        """
        The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
        """
        ...

    @property
    @pulumi.getter(name="ikeIntegrity")
    def ike_integrity(self) -> str:
        """
        The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> str:
        """
        The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecIntegrity")
    def ipsec_integrity(self) -> str:
        """
        The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
        """
        ...

    @property
    @pulumi.getter(name="pfsGroup")
    def pfs_group(self) -> str:
        """
        The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
        """
        ...

    @property
    @pulumi.getter(name="saDataSizeKilobytes")
    def sa_data_size_kilobytes(self) -> float:
        """
        The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
        """
        ...

    @property
    @pulumi.getter(name="saLifetimeSeconds")
    def sa_lifetime_seconds(self) -> float:
        """
        The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServer(dict):
    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The Address of the Radius Server.
        """
        ...

    @property
    @pulumi.getter(name="clientRootCertificates")
    def client_root_certificates(self) -> Optional[List['outputs.VpnServerConfigurationRadiusServerClientRootCertificate']]:
        """
        One or more `client_root_certificate` blocks as defined above.
        """
        ...

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The Secret used to communicate with the Radius Server.
        """
        ...

    @property
    @pulumi.getter(name="serverRootCertificates")
    def server_root_certificates(self) -> List['outputs.VpnServerConfigurationRadiusServerServerRootCertificate']:
        """
        One or more `server_root_certificate` blocks as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServerClientRootCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name used to uniquely identify this certificate.
        """
        ...

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The Thumbprint of the Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VpnServerConfigurationRadiusServerServerRootCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name used to uniquely identify this certificate.
        """
        ...

    @property
    @pulumi.getter(name="publicCertData")
    def public_cert_data(self) -> str:
        """
        The Public Key Data associated with the Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitPeering(dict):
    @property
    @pulumi.getter(name="azureAsn")
    def azure_asn(self) -> float:
        """
        The Either a 16-bit or a 32-bit ASN for Azure.
        """
        ...

    @property
    @pulumi.getter(name="peerAsn")
    def peer_asn(self) -> float:
        """
        The Either a 16-bit or a 32-bit ASN. Can either be public or private.
        """
        ...

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> str:
        """
        The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="primaryPeerAddressPrefix")
    def primary_peer_address_prefix(self) -> str:
        """
        A `/30` subnet for the primary link.
        """
        ...

    @property
    @pulumi.getter(name="secondaryPeerAddressPrefix")
    def secondary_peer_address_prefix(self) -> str:
        """
        A `/30` subnet for the secondary link.
        """
        ...

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> str:
        """
        The shared key. Can be a maximum of 25 characters.
        """
        ...

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> float:
        """
        A valid VLAN ID to establish this peering on.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitServiceProviderProperty(dict):
    @property
    @pulumi.getter(name="bandwidthInMbps")
    def bandwidth_in_mbps(self) -> float:
        """
        The bandwidth in Mbps of the ExpressRoute circuit.
        """
        ...

    @property
    @pulumi.getter(name="peeringLocation")
    def peering_location(self) -> str:
        """
        The name of the peering location and **not** the Azure resource location.
        """
        ...

    @property
    @pulumi.getter(name="serviceProviderName")
    def service_provider_name(self) -> str:
        """
        The name of the ExpressRoute Service Provider.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetExpressRouteCircuitSku(dict):
    @property
    @pulumi.getter
    def family(self) -> str:
        """
        The billing mode for bandwidth. Possible values are `MeteredData` or `UnlimitedData`.
        """
        ...

    @property
    @pulumi.getter
    def tier(self) -> str:
        """
        The service tier. Possible values are `Basic`, `Local`, `Standard` or `Premium`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFirewallIpConfiguration(dict):
    @property
    @pulumi.getter(name="internalPublicIpAddressId")
    def internal_public_ip_address_id(self) -> str:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure Firewall.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        """
        The private IP address of the Azure Firewall.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The Resource ID of the subnet where the Azure Firewall is deployed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGatewayConnectionIpsecPolicy(dict):
    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> str:
        """
        The DH group used in IKE phase 1 for initial SA. Valid
        options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
        `ECP256`, `ECP384`, or `None`.
        """
        ...

    @property
    @pulumi.getter(name="ikeEncryption")
    def ike_encryption(self) -> str:
        """
        The IKE encryption algorithm. Valid
        options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
        """
        ...

    @property
    @pulumi.getter(name="ikeIntegrity")
    def ike_integrity(self) -> str:
        """
        The IKE integrity algorithm. Valid
        options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> str:
        """
        The IPSec encryption algorithm. Valid
        options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
        """
        ...

    @property
    @pulumi.getter(name="ipsecIntegrity")
    def ipsec_integrity(self) -> str:
        """
        The IPSec integrity algorithm. Valid
        options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
        """
        ...

    @property
    @pulumi.getter(name="pfsGroup")
    def pfs_group(self) -> str:
        """
        The DH group used in IKE phase 2 for new child SA.
        Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
        or `None`.
        """
        ...

    @property
    @pulumi.getter(name="saDatasize")
    def sa_datasize(self) -> float:
        """
        The IPSec SA payload size in KB. Must be at least
        `1024` KB.
        """
        ...

    @property
    @pulumi.getter(name="saLifetime")
    def sa_lifetime(self) -> float:
        """
        The IPSec SA lifetime in seconds. Must be at least
        `300` seconds.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetGatewayConnectionTrafficSelectorPolicy(dict):
    @property
    @pulumi.getter(name="localAddressCidrs")
    def local_address_cidrs(self) -> List[str]:
        """
        List of local CIDRs.
        """
        ...

    @property
    @pulumi.getter(name="remoteAddressCidrs")
    def remote_address_cidrs(self) -> List[str]:
        """
        List of remote CIDRs.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkInterfaceIpConfiguration(dict):
    @property
    @pulumi.getter(name="applicationGatewayBackendAddressPoolsIds")
    def application_gateway_backend_address_pools_ids(self) -> List[str]:
        """
        A list of Backend Address Pool ID's within a Application Gateway that this Network Interface is connected to.
        """
        ...

    @property
    @pulumi.getter(name="applicationSecurityGroupIds")
    def application_security_group_ids(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="loadBalancerBackendAddressPoolsIds")
    def load_balancer_backend_address_pools_ids(self) -> List[str]:
        """
        A list of Backend Address Pool ID's within a Load Balancer that this Network Interface is connected to.
        """
        ...

    @property
    @pulumi.getter(name="loadBalancerInboundNatRulesIds")
    def load_balancer_inbound_nat_rules_ids(self) -> List[str]:
        """
        A list of Inbound NAT Rule ID's within a Load Balancer that this Network Interface is connected to.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Network Interface.
        """
        ...

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        is this the Primary IP Configuration for this Network Interface?
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        """
        The Private IP Address assigned to this Network Interface.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressAllocation")
    def private_ip_address_allocation(self) -> str:
        """
        The IP Address allocation type for the Private address, such as `Dynamic` or `Static`.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressVersion")
    def private_ip_address_version(self) -> str:
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> str:
        """
        The ID of the Public IP Address which is connected to this Network Interface.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the Subnet which the Network Interface is connected to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        Is network traffic is allowed or denied?
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description for this rule.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddressPrefix")
    def destination_address_prefix(self) -> str:
        """
        CIDR or destination IP range or * to match any IP.
        """
        ...

    @property
    @pulumi.getter(name="destinationAddressPrefixes")
    def destination_address_prefixes(self) -> List[str]:
        """
        A list of CIDRs or destination IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="destinationApplicationSecurityGroupIds")
    def destination_application_security_group_ids(self) -> Optional[List[str]]:
        """
        A List of destination Application Security Group ID's
        """
        ...

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> str:
        """
        The Destination Port or Range.
        """
        ...

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> List[str]:
        ...

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The direction specifies if rule will be evaluated on incoming or outgoing traffic.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the Name of the Network Security Group.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        The priority of the rule
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The network protocol this rule applies to.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> str:
        """
        CIDR or source IP range or * to match any IP.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefixes")
    def source_address_prefixes(self) -> List[str]:
        """
        A list of CIDRs or source IP ranges.
        """
        ...

    @property
    @pulumi.getter(name="sourceApplicationSecurityGroupIds")
    def source_application_security_group_ids(self) -> Optional[List[str]]:
        """
        A List of source Application Security Group ID's
        """
        ...

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> str:
        """
        The Source Port or Range.
        """
        ...

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPublicIPsPublicIp(dict):
    @property
    @pulumi.getter(name="domainNameLabel")
    def domain_name_label(self) -> str:
        """
        The Domain Name Label of the Public IP Address
        """
        ...

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        The FQDN of the Public IP Address
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Public IP Address
        """
        ...

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of the Public IP Address
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteFilterRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The access type of the rule
        """
        ...

    @property
    @pulumi.getter
    def communities(self) -> List[str]:
        """
        The collection for bgp community values.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of this Route Filter.
        """
        ...

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The Route Filter Rule Type.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRouteTableRoute(dict):
    @property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> str:
        """
        The destination CIDR to which the route applies.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Route Table.
        """
        ...

    @property
    @pulumi.getter(name="nextHopInIpAddress")
    def next_hop_in_ip_address(self) -> str:
        """
        Contains the IP address packets should be forwarded to.
        """
        ...

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> str:
        """
        The type of Azure hop the packet should be sent to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayBgpSetting(dict):
    @property
    @pulumi.getter
    def asn(self) -> float:
        """
        The Autonomous System Number (ASN) to use as part of the BGP.
        """
        ...

    @property
    @pulumi.getter(name="peerWeight")
    def peer_weight(self) -> float:
        """
        The weight added to routes which have been learned
        through BGP peering.
        """
        ...

    @property
    @pulumi.getter(name="peeringAddress")
    def peering_address(self) -> str:
        """
        The BGP peer IP address of the virtual network
        gateway. This address is needed to configure the created gateway as a BGP Peer
        on the on-premises VPN devices.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayIpConfiguration(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Virtual Network Gateway.
        """
        ...

    @property
    @pulumi.getter(name="privateIpAddressAllocation")
    def private_ip_address_allocation(self) -> str:
        """
        Defines how the private IP address
        of the gateways virtual interface is assigned.
        """
        ...

    @property
    @pulumi.getter(name="publicIpAddressId")
    def public_ip_address_id(self) -> str:
        """
        The ID of the Public IP Address associated
        with the Virtual Network Gateway.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the gateway subnet of a virtual network in
        which the virtual network gateway will be created. It is mandatory that
        the associated subnet is named `GatewaySubnet`. Therefore, each virtual
        network can contain at most a single Virtual Network Gateway.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfiguration(dict):
    @property
    @pulumi.getter(name="addressSpaces")
    def address_spaces(self) -> List[str]:
        """
        The address space out of which ip addresses for
        vpn clients will be taken. You can provide more than one address space, e.g.
        in CIDR notation.
        """
        ...

    @property
    @pulumi.getter(name="radiusServerAddress")
    def radius_server_address(self) -> str:
        """
        The address of the Radius server.
        This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> str:
        """
        The secret used by the Radius server.
        This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        """
        ...

    @property
    @pulumi.getter(name="revokedCertificates")
    def revoked_certificates(self) -> List['outputs.GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate']:
        """
        One or more `revoked_certificate` blocks which
        are defined below.
        """
        ...

    @property
    @pulumi.getter(name="rootCertificates")
    def root_certificates(self) -> List['outputs.GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate']:
        """
        One or more `root_certificate` blocks which are
        defined below. These root certificates are used to sign the client certificate
        used by the VPN clients to connect to the gateway.
        """
        ...

    @property
    @pulumi.getter(name="vpnClientProtocols")
    def vpn_client_protocols(self) -> List[str]:
        """
        List of the protocols supported by the vpn client.
        The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Virtual Network Gateway.
        """
        ...

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Virtual Network Gateway.
        """
        ...

    @property
    @pulumi.getter(name="publicCertData")
    def public_cert_data(self) -> str:
        """
        The SHA1 thumbprint of the certificate to be revoked.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


