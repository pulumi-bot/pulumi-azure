# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ReplicatedVMManagedDiskArgs',
    'ReplicatedVMNetworkInterfaceArgs',
]

@pulumi.input_type
class ReplicatedVMManagedDiskArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 staging_storage_account_id: pulumi.Input[str],
                 target_disk_type: pulumi.Input[str],
                 target_replica_disk_type: pulumi.Input[str],
                 target_resource_group_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] disk_id: Id of disk that should be replicated.
        :param pulumi.Input[str] staging_storage_account_id: Storage account that should be used for caching.
        :param pulumi.Input[str] target_disk_type: What type should the disk be when a failover is done.
        :param pulumi.Input[str] target_replica_disk_type: What type should the disk be that holds the replication data.
        :param pulumi.Input[str] target_resource_group_id: Resource group disk should belong to when a failover is done.
        """
        pulumi.set(__self__, "diskId", disk_id)
        pulumi.set(__self__, "stagingStorageAccountId", staging_storage_account_id)
        pulumi.set(__self__, "targetDiskType", target_disk_type)
        pulumi.set(__self__, "targetReplicaDiskType", target_replica_disk_type)
        pulumi.set(__self__, "targetResourceGroupId", target_resource_group_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        Id of disk that should be replicated.
        """
        ...

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="stagingStorageAccountId")
    def staging_storage_account_id(self) -> pulumi.Input[str]:
        """
        Storage account that should be used for caching.
        """
        ...

    @staging_storage_account_id.setter
    def staging_storage_account_id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetDiskType")
    def target_disk_type(self) -> pulumi.Input[str]:
        """
        What type should the disk be when a failover is done.
        """
        ...

    @target_disk_type.setter
    def target_disk_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetReplicaDiskType")
    def target_replica_disk_type(self) -> pulumi.Input[str]:
        """
        What type should the disk be that holds the replication data.
        """
        ...

    @target_replica_disk_type.setter
    def target_replica_disk_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Input[str]:
        """
        Resource group disk should belong to when a failover is done.
        """
        ...

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ReplicatedVMNetworkInterfaceArgs:
    def __init__(__self__, *,
                 source_network_interface_id: Optional[pulumi.Input[str]] = None,
                 target_static_ip: Optional[pulumi.Input[str]] = None,
                 target_subnet_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_network_interface_id: Id source network interface.
        :param pulumi.Input[str] target_static_ip: Static IP to assign when a failover is done.
        :param pulumi.Input[str] target_subnet_name: Name of the subnet to to use when a failover is done.
        """
        pulumi.set(__self__, "sourceNetworkInterfaceId", source_network_interface_id)
        pulumi.set(__self__, "targetStaticIp", target_static_ip)
        pulumi.set(__self__, "targetSubnetName", target_subnet_name)

    @property
    @pulumi.getter(name="sourceNetworkInterfaceId")
    def source_network_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id source network interface.
        """
        ...

    @source_network_interface_id.setter
    def source_network_interface_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="targetStaticIp")
    def target_static_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Static IP to assign when a failover is done.
        """
        ...

    @target_static_ip.setter
    def target_static_ip(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="targetSubnetName")
    def target_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the subnet to to use when a failover is done.
        """
        ...

    @target_subnet_name.setter
    def target_subnet_name(self, value: Optional[pulumi.Input[str]]):
        ...


