# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ClusterAzureActiveDirectory',
    'ClusterCertificate',
    'ClusterCertificateCommonNames',
    'ClusterCertificateCommonNamesCommonName',
    'ClusterClientCertificateCommonName',
    'ClusterClientCertificateThumbprint',
    'ClusterDiagnosticsConfig',
    'ClusterFabricSetting',
    'ClusterNodeType',
    'ClusterNodeTypeApplicationPorts',
    'ClusterNodeTypeEphemeralPorts',
    'ClusterReverseProxyCertificate',
]

@pulumi.output_type
class ClusterAzureActiveDirectory(dict):
    client_application_id: str = pulumi.output_property("clientApplicationId")
    """
    The Azure Active Directory Client ID which should be used for the Client Application.
    """
    cluster_application_id: str = pulumi.output_property("clusterApplicationId")
    """
    The Azure Active Directory Cluster Application ID.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The Azure Active Directory Tenant ID.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterCertificate(dict):
    thumbprint: str = pulumi.output_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """
    thumbprint_secondary: Optional[str] = pulumi.output_property("thumbprintSecondary")
    """
    The Secondary Thumbprint of the Certificate.
    """
    x509_store_name: str = pulumi.output_property("x509StoreName")
    """
    The X509 Store where the Certificate Exists, such as `My`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterCertificateCommonNames(dict):
    common_names: List['outputs.ClusterCertificateCommonNamesCommonName'] = pulumi.output_property("commonNames")
    """
    A `common_names` block as defined below.
    """
    x509_store_name: str = pulumi.output_property("x509StoreName")
    """
    The X509 Store where the Certificate Exists, such as `My`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterCertificateCommonNamesCommonName(dict):
    certificate_common_name: str = pulumi.output_property("certificateCommonName")
    """
    The common or subject name of the certificate.
    """
    certificate_issuer_thumbprint: Optional[str] = pulumi.output_property("certificateIssuerThumbprint")
    """
    The Issuer Thumbprint of the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClientCertificateCommonName(dict):
    common_name: str = pulumi.output_property("commonName")
    is_admin: bool = pulumi.output_property("isAdmin")
    """
    Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
    """
    issuer_thumbprint: Optional[str] = pulumi.output_property("issuerThumbprint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClientCertificateThumbprint(dict):
    is_admin: bool = pulumi.output_property("isAdmin")
    """
    Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
    """
    thumbprint: str = pulumi.output_property("thumbprint")
    """
    The Thumbprint associated with the Client Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDiagnosticsConfig(dict):
    blob_endpoint: str = pulumi.output_property("blobEndpoint")
    """
    The Blob Endpoint of the Storage Account.
    """
    protected_account_key_name: str = pulumi.output_property("protectedAccountKeyName")
    """
    The protected diagnostics storage key name, such as `StorageAccountKey1`.
    """
    queue_endpoint: str = pulumi.output_property("queueEndpoint")
    """
    The Queue Endpoint of the Storage Account.
    """
    storage_account_name: str = pulumi.output_property("storageAccountName")
    """
    The name of the Storage Account where the Diagnostics should be sent to.
    """
    table_endpoint: str = pulumi.output_property("tableEndpoint")
    """
    The Table Endpoint of the Storage Account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterFabricSetting(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Fabric Setting, such as `Security` or `Federation`.
    """
    parameters: Optional[Dict[str, str]] = pulumi.output_property("parameters")
    """
    A map containing settings for the specified Fabric Setting.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeType(dict):
    application_ports: Optional['outputs.ClusterNodeTypeApplicationPorts'] = pulumi.output_property("applicationPorts")
    """
    A `application_ports` block as defined below.
    """
    capacities: Optional[Dict[str, str]] = pulumi.output_property("capacities")
    """
    The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
    """
    client_endpoint_port: float = pulumi.output_property("clientEndpointPort")
    """
    The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
    """
    durability_level: Optional[str] = pulumi.output_property("durabilityLevel")
    """
    The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
    """
    ephemeral_ports: Optional['outputs.ClusterNodeTypeEphemeralPorts'] = pulumi.output_property("ephemeralPorts")
    """
    A `ephemeral_ports` block as defined below.
    """
    http_endpoint_port: float = pulumi.output_property("httpEndpointPort")
    """
    The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
    """
    instance_count: float = pulumi.output_property("instanceCount")
    """
    The number of nodes for this Node Type.
    """
    is_primary: bool = pulumi.output_property("isPrimary")
    """
    Is this the Primary Node Type? Changing this forces a new resource to be created.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Node Type. Changing this forces a new resource to be created.
    """
    placement_properties: Optional[Dict[str, str]] = pulumi.output_property("placementProperties")
    """
    The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
    """
    reverse_proxy_endpoint_port: Optional[float] = pulumi.output_property("reverseProxyEndpointPort")
    """
    The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeTypeApplicationPorts(dict):
    end_port: float = pulumi.output_property("endPort")
    """
    The end of the Application Port Range on this Node Type.
    """
    start_port: float = pulumi.output_property("startPort")
    """
    The start of the Application Port Range on this Node Type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterNodeTypeEphemeralPorts(dict):
    end_port: float = pulumi.output_property("endPort")
    """
    The end of the Ephemeral Port Range on this Node Type.
    """
    start_port: float = pulumi.output_property("startPort")
    """
    The start of the Ephemeral Port Range on this Node Type.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterReverseProxyCertificate(dict):
    thumbprint: str = pulumi.output_property("thumbprint")
    """
    The Thumbprint of the Certificate.
    """
    thumbprint_secondary: Optional[str] = pulumi.output_property("thumbprintSecondary")
    """
    The Secondary Thumbprint of the Certificate.
    """
    x509_store_name: str = pulumi.output_property("x509StoreName")
    """
    The X509 Store where the Certificate Exists, such as `My`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


