# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *


class Cluster(pulumi.CustomResource):
    add_on_features: pulumi.Output[Optional[List[str]]] = pulumi.output_property("addOnFeatures")
    """
    A List of one or more features which should be enabled, such as `DnsService`.
    """
    azure_active_directory: pulumi.Output[Optional['outputs.ClusterAzureActiveDirectory']] = pulumi.output_property("azureActiveDirectory")
    """
    An `azure_active_directory` block as defined below.
    """
    certificate: pulumi.Output[Optional['outputs.ClusterCertificate']] = pulumi.output_property("certificate")
    """
    A `certificate` block as defined below. Conflicts with `certificate_common_names`.
    """
    certificate_common_names: pulumi.Output[Optional['outputs.ClusterCertificateCommonNames']] = pulumi.output_property("certificateCommonNames")
    """
    A `certificate_common_names` block as defined below. Conflicts with `certificate`.
    """
    client_certificate_common_names: pulumi.Output[Optional[List['outputs.ClusterClientCertificateCommonName']]] = pulumi.output_property("clientCertificateCommonNames")
    """
    A `client_certificate_common_name` block as defined below.
    """
    client_certificate_thumbprints: pulumi.Output[Optional[List['outputs.ClusterClientCertificateThumbprint']]] = pulumi.output_property("clientCertificateThumbprints")
    """
    One or two `client_certificate_thumbprint` blocks as defined below.
    """
    cluster_code_version: pulumi.Output[str] = pulumi.output_property("clusterCodeVersion")
    """
    Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
    """
    cluster_endpoint: pulumi.Output[str] = pulumi.output_property("clusterEndpoint")
    """
    The Cluster Endpoint for this Service Fabric Cluster.
    """
    diagnostics_config: pulumi.Output[Optional['outputs.ClusterDiagnosticsConfig']] = pulumi.output_property("diagnosticsConfig")
    """
    A `diagnostics_config` block as defined below. Changing this forces a new resource to be created.
    """
    fabric_settings: pulumi.Output[Optional[List['outputs.ClusterFabricSetting']]] = pulumi.output_property("fabricSettings")
    """
    One or more `fabric_settings` blocks as defined below.
    """
    location: pulumi.Output[str] = pulumi.output_property("location")
    """
    Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
    """
    management_endpoint: pulumi.Output[str] = pulumi.output_property("managementEndpoint")
    """
    Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
    """
    node_types: pulumi.Output[List['outputs.ClusterNodeType']] = pulumi.output_property("nodeTypes")
    """
    One or more `node_type` blocks as defined below.
    """
    reliability_level: pulumi.Output[str] = pulumi.output_property("reliabilityLevel")
    """
    Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
    """
    resource_group_name: pulumi.Output[str] = pulumi.output_property("resourceGroupName")
    """
    The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
    """
    reverse_proxy_certificate: pulumi.Output[Optional['outputs.ClusterReverseProxyCertificate']] = pulumi.output_property("reverseProxyCertificate")
    """
    A `reverse_proxy_certificate` block as defined below.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    A mapping of tags to assign to the resource.
    """
    upgrade_mode: pulumi.Output[str] = pulumi.output_property("upgradeMode")
    """
    Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
    """
    vm_image: pulumi.Output[str] = pulumi.output_property("vmImage")
    """
    Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, add_on_features=None, azure_active_directory=None, certificate=None, certificate_common_names=None, client_certificate_common_names=None, client_certificate_thumbprints=None, cluster_code_version=None, diagnostics_config=None, fabric_settings=None, location=None, management_endpoint=None, name=None, node_types=None, reliability_level=None, resource_group_name=None, reverse_proxy_certificate=None, tags=None, upgrade_mode=None, vm_image=None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Manages a Service Fabric Cluster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_cluster = azure.servicefabric.Cluster("exampleCluster",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            reliability_level="Bronze",
            upgrade_mode="Manual",
            cluster_code_version="6.5.639.9590",
            vm_image="Windows",
            management_endpoint="https://example:80",
            node_types=[{
                "name": "first",
                "instanceCount": 3,
                "isPrimary": True,
                "clientEndpointPort": 2020,
                "httpEndpointPort": 80,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] add_on_features: A List of one or more features which should be enabled, such as `DnsService`.
        :param pulumi.Input['ClusterAzureActiveDirectoryArgs'] azure_active_directory: An `azure_active_directory` block as defined below.
        :param pulumi.Input['ClusterCertificateArgs'] certificate: A `certificate` block as defined below. Conflicts with `certificate_common_names`.
        :param pulumi.Input['ClusterCertificateCommonNamesArgs'] certificate_common_names: A `certificate_common_names` block as defined below. Conflicts with `certificate`.
        :param pulumi.Input[List[pulumi.Input['ClusterClientCertificateCommonNameArgs']]] client_certificate_common_names: A `client_certificate_common_name` block as defined below.
        :param pulumi.Input[List[pulumi.Input['ClusterClientCertificateThumbprintArgs']]] client_certificate_thumbprints: One or two `client_certificate_thumbprint` blocks as defined below.
        :param pulumi.Input[str] cluster_code_version: Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
        :param pulumi.Input['ClusterDiagnosticsConfigArgs'] diagnostics_config: A `diagnostics_config` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['ClusterFabricSettingArgs']]] fabric_settings: One or more `fabric_settings` blocks as defined below.
        :param pulumi.Input[str] location: Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] management_endpoint: Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['ClusterNodeTypeArgs']]] node_types: One or more `node_type` blocks as defined below.
        :param pulumi.Input[str] reliability_level: Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
        :param pulumi.Input['ClusterReverseProxyCertificateArgs'] reverse_proxy_certificate: A `reverse_proxy_certificate` block as defined below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] upgrade_mode: Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
        :param pulumi.Input[str] vm_image: Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['add_on_features'] = add_on_features
            __props__['azure_active_directory'] = azure_active_directory
            __props__['certificate'] = certificate
            __props__['certificate_common_names'] = certificate_common_names
            __props__['client_certificate_common_names'] = client_certificate_common_names
            __props__['client_certificate_thumbprints'] = client_certificate_thumbprints
            __props__['cluster_code_version'] = cluster_code_version
            __props__['diagnostics_config'] = diagnostics_config
            __props__['fabric_settings'] = fabric_settings
            __props__['location'] = location
            if management_endpoint is None:
                raise TypeError("Missing required property 'management_endpoint'")
            __props__['management_endpoint'] = management_endpoint
            __props__['name'] = name
            if node_types is None:
                raise TypeError("Missing required property 'node_types'")
            __props__['node_types'] = node_types
            if reliability_level is None:
                raise TypeError("Missing required property 'reliability_level'")
            __props__['reliability_level'] = reliability_level
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['reverse_proxy_certificate'] = reverse_proxy_certificate
            __props__['tags'] = tags
            if upgrade_mode is None:
                raise TypeError("Missing required property 'upgrade_mode'")
            __props__['upgrade_mode'] = upgrade_mode
            if vm_image is None:
                raise TypeError("Missing required property 'vm_image'")
            __props__['vm_image'] = vm_image
            __props__['cluster_endpoint'] = None
        super(Cluster, __self__).__init__(
            'azure:servicefabric/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, add_on_features=None, azure_active_directory=None, certificate=None, certificate_common_names=None, client_certificate_common_names=None, client_certificate_thumbprints=None, cluster_code_version=None, cluster_endpoint=None, diagnostics_config=None, fabric_settings=None, location=None, management_endpoint=None, name=None, node_types=None, reliability_level=None, resource_group_name=None, reverse_proxy_certificate=None, tags=None, upgrade_mode=None, vm_image=None):
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] add_on_features: A List of one or more features which should be enabled, such as `DnsService`.
        :param pulumi.Input['ClusterAzureActiveDirectoryArgs'] azure_active_directory: An `azure_active_directory` block as defined below.
        :param pulumi.Input['ClusterCertificateArgs'] certificate: A `certificate` block as defined below. Conflicts with `certificate_common_names`.
        :param pulumi.Input['ClusterCertificateCommonNamesArgs'] certificate_common_names: A `certificate_common_names` block as defined below. Conflicts with `certificate`.
        :param pulumi.Input[List[pulumi.Input['ClusterClientCertificateCommonNameArgs']]] client_certificate_common_names: A `client_certificate_common_name` block as defined below.
        :param pulumi.Input[List[pulumi.Input['ClusterClientCertificateThumbprintArgs']]] client_certificate_thumbprints: One or two `client_certificate_thumbprint` blocks as defined below.
        :param pulumi.Input[str] cluster_code_version: Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
        :param pulumi.Input[str] cluster_endpoint: The Cluster Endpoint for this Service Fabric Cluster.
        :param pulumi.Input['ClusterDiagnosticsConfigArgs'] diagnostics_config: A `diagnostics_config` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['ClusterFabricSettingArgs']]] fabric_settings: One or more `fabric_settings` blocks as defined below.
        :param pulumi.Input[str] location: Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[str] management_endpoint: Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['ClusterNodeTypeArgs']]] node_types: One or more `node_type` blocks as defined below.
        :param pulumi.Input[str] reliability_level: Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
        :param pulumi.Input[str] resource_group_name: The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
        :param pulumi.Input['ClusterReverseProxyCertificateArgs'] reverse_proxy_certificate: A `reverse_proxy_certificate` block as defined below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[str] upgrade_mode: Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
        :param pulumi.Input[str] vm_image: Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["add_on_features"] = add_on_features
        __props__["azure_active_directory"] = azure_active_directory
        __props__["certificate"] = certificate
        __props__["certificate_common_names"] = certificate_common_names
        __props__["client_certificate_common_names"] = client_certificate_common_names
        __props__["client_certificate_thumbprints"] = client_certificate_thumbprints
        __props__["cluster_code_version"] = cluster_code_version
        __props__["cluster_endpoint"] = cluster_endpoint
        __props__["diagnostics_config"] = diagnostics_config
        __props__["fabric_settings"] = fabric_settings
        __props__["location"] = location
        __props__["management_endpoint"] = management_endpoint
        __props__["name"] = name
        __props__["node_types"] = node_types
        __props__["reliability_level"] = reliability_level
        __props__["resource_group_name"] = resource_group_name
        __props__["reverse_proxy_certificate"] = reverse_proxy_certificate
        __props__["tags"] = tags
        __props__["upgrade_mode"] = upgrade_mode
        __props__["vm_image"] = vm_image
        return Cluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

