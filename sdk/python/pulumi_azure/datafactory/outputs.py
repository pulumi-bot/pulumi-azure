# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class DatasetAzureBlobSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetCosmosDBApiSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetDelimitedTextAzureBlobStorageLocation(dict):
    container: str = pulumi.output_property("container")
    """
    The container on the Azure Blob Storage Account hosting the file.
    """
    filename: str = pulumi.output_property("filename")
    """
    The filename of the file on the web server.
    """
    path: str = pulumi.output_property("path")
    """
    The folder path to the file on the web server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetDelimitedTextHttpServerLocation(dict):
    filename: str = pulumi.output_property("filename")
    """
    The filename of the file on the web server.
    """
    path: str = pulumi.output_property("path")
    """
    The folder path to the file on the web server.
    """
    relative_url: str = pulumi.output_property("relativeUrl")
    """
    The base URL to the web server hosting the file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetDelimitedTextSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetHttpSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetJsonAzureBlobStorageLocation(dict):
    container: str = pulumi.output_property("container")
    filename: str = pulumi.output_property("filename")
    """
    The filename of the file on the web server.
    """
    path: str = pulumi.output_property("path")
    """
    The folder path to the file on the web server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetJsonHttpServerLocation(dict):
    filename: str = pulumi.output_property("filename")
    """
    The filename of the file on the web server.
    """
    path: str = pulumi.output_property("path")
    """
    The folder path to the file on the web server.
    """
    relative_url: str = pulumi.output_property("relativeUrl")
    """
    The base URL to the web server hosting the file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetJsonSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetMysqlSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetPostgresqlSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatasetSqlServerTableSchemaColumn(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    The description of the column.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the column.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FactoryGithubConfiguration(dict):
    account_name: str = pulumi.output_property("accountName")
    """
    Specifies the GitHub account name.
    """
    branch_name: str = pulumi.output_property("branchName")
    """
    Specifies the branch of the repository to get code from.
    """
    git_url: str = pulumi.output_property("gitUrl")
    """
    Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
    """
    repository_name: str = pulumi.output_property("repositoryName")
    """
    Specifies the name of the git repository.
    """
    root_folder: str = pulumi.output_property("rootFolder")
    """
    Specifies the root folder within the repository. Set to `/` for the top level.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FactoryIdentity(dict):
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The ID of the Principal (Client) in Azure Active Directory
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    Specifies the Tenant ID associated with the VSTS account.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FactoryVstsConfiguration(dict):
    account_name: str = pulumi.output_property("accountName")
    """
    Specifies the VSTS account name.
    """
    branch_name: str = pulumi.output_property("branchName")
    """
    Specifies the branch of the repository to get code from.
    """
    project_name: str = pulumi.output_property("projectName")
    """
    Specifies the name of the VSTS project.
    """
    repository_name: str = pulumi.output_property("repositoryName")
    """
    Specifies the name of the git repository.
    """
    root_folder: str = pulumi.output_property("rootFolder")
    """
    Specifies the root folder within the repository. Set to `/` for the top level.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    Specifies the Tenant ID associated with the VSTS account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IntegrationRuntimeManagedCatalogInfo(dict):
    administrator_login: str = pulumi.output_property("administratorLogin")
    """
    Administrator login name for the SQL Server.
    """
    administrator_password: str = pulumi.output_property("administratorPassword")
    """
    Administrator login password for the SQL Server.
    """
    pricing_tier: Optional[str] = pulumi.output_property("pricingTier")
    """
    Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
    """
    server_endpoint: str = pulumi.output_property("serverEndpoint")
    """
    The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IntegrationRuntimeManagedCustomSetupScript(dict):
    blob_container_uri: str = pulumi.output_property("blobContainerUri")
    """
    The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
    """
    sas_token: str = pulumi.output_property("sasToken")
    """
    A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IntegrationRuntimeManagedVnetIntegration(dict):
    subnet_name: str = pulumi.output_property("subnetName")
    """
    Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
    """
    vnet_id: str = pulumi.output_property("vnetId")
    """
    ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IntegrationRuntimeSelfHostedRbacAuthorization(dict):
    resource_id: str = pulumi.output_property("resourceId")
    """
    The resource identifier of the integration runtime to be shared. Changing this forces a new Data Factory to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFactoryGithubConfiguration(dict):
    account_name: str = pulumi.output_property("accountName")
    """
    The VSTS account name.
    """
    branch_name: str = pulumi.output_property("branchName")
    """
    The branch of the repository to get code from.
    """
    git_url: str = pulumi.output_property("gitUrl")
    """
    The GitHub Enterprise host name.
    """
    repository_name: str = pulumi.output_property("repositoryName")
    """
    The name of the git repository.
    """
    root_folder: str = pulumi.output_property("rootFolder")
    """
    The root folder within the repository.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFactoryIdentity(dict):
    principal_id: str = pulumi.output_property("principalId")
    """
    The ID of the Principal (Client) in Azure Active Directory.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The Tenant ID associated with the VSTS account.
    """
    type: str = pulumi.output_property("type")
    """
    The identity type of the Data Factory.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFactoryVstsConfiguration(dict):
    account_name: str = pulumi.output_property("accountName")
    """
    The VSTS account name.
    """
    branch_name: str = pulumi.output_property("branchName")
    """
    The branch of the repository to get code from.
    """
    project_name: str = pulumi.output_property("projectName")
    """
    The name of the VSTS project.
    """
    repository_name: str = pulumi.output_property("repositoryName")
    """
    The name of the git repository.
    """
    root_folder: str = pulumi.output_property("rootFolder")
    """
    The root folder within the repository.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The Tenant ID associated with the VSTS account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


