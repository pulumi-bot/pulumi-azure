# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = ['LinkedServiceCosmosDb']


class LinkedServiceCosmosDb(pulumi.CustomResource):
    account_endpoint: pulumi.Output[Optional[str]] = pulumi.output_property("accountEndpoint")
    """
    The endpoint of he Azure CosmosDB account. Required if `connection_string` is unspecified.
    """
    account_key: pulumi.Output[Optional[str]] = pulumi.output_property("accountKey")
    """
    The account key of the Azure Cosmos DB account. Required if `connection_string` is unspecified.
    """
    additional_properties: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("additionalProperties")
    """
    A map of additional properties to associate with the Data Factory Linked Service.
    """
    annotations: pulumi.Output[Optional[List[str]]] = pulumi.output_property("annotations")
    """
    List of tags that can be used for describing the Data Factory Linked Service.
    """
    connection_string: pulumi.Output[Optional[str]] = pulumi.output_property("connectionString")
    """
    The connection string. Required if `account_endpoint`, `account_key`, and `database` are unspecified.
    """
    data_factory_name: pulumi.Output[str] = pulumi.output_property("dataFactoryName")
    """
    The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
    """
    database: pulumi.Output[Optional[str]] = pulumi.output_property("database")
    """
    The name of the database. Required if `connection_string` is unspecified.
    """
    description: pulumi.Output[Optional[str]] = pulumi.output_property("description")
    """
    The description for the Data Factory Linked Service.
    """
    integration_runtime_name: pulumi.Output[Optional[str]] = pulumi.output_property("integrationRuntimeName")
    """
    The integration runtime reference to associate with the Data Factory Linked Service.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
    """
    parameters: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("parameters")
    """
    A map of parameters to associate with the Data Factory Linfked Service.
    """
    resource_group_name: pulumi.Output[str] = pulumi.output_property("resourceGroupName")
    """
    The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, account_endpoint: Optional[pulumi.Input[str]] = None, account_key: Optional[pulumi.Input[str]] = None, additional_properties: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, annotations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, connection_string: Optional[pulumi.Input[str]] = None, data_factory_name: Optional[pulumi.Input[str]] = None, database: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, integration_runtime_name: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, resource_group_name: Optional[pulumi.Input[str]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Manages a Linked Service (connection) between a SFTP Server and Azure Data Factory.

        > **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_endpoint: The endpoint of he Azure CosmosDB account. Required if `connection_string` is unspecified.
        :param pulumi.Input[str] account_key: The account key of the Azure Cosmos DB account. Required if `connection_string` is unspecified.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] additional_properties: A map of additional properties to associate with the Data Factory Linked Service.
        :param pulumi.Input[List[pulumi.Input[str]]] annotations: List of tags that can be used for describing the Data Factory Linked Service.
        :param pulumi.Input[str] connection_string: The connection string. Required if `account_endpoint`, `account_key`, and `database` are unspecified.
        :param pulumi.Input[str] data_factory_name: The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
        :param pulumi.Input[str] database: The name of the database. Required if `connection_string` is unspecified.
        :param pulumi.Input[str] description: The description for the Data Factory Linked Service.
        :param pulumi.Input[str] integration_runtime_name: The integration runtime reference to associate with the Data Factory Linked Service.
        :param pulumi.Input[str] name: Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linfked Service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['account_endpoint'] = account_endpoint
            __props__['account_key'] = account_key
            __props__['additional_properties'] = additional_properties
            __props__['annotations'] = annotations
            __props__['connection_string'] = connection_string
            if data_factory_name is None:
                raise TypeError("Missing required property 'data_factory_name'")
            __props__['data_factory_name'] = data_factory_name
            __props__['database'] = database
            __props__['description'] = description
            __props__['integration_runtime_name'] = integration_runtime_name
            __props__['name'] = name
            __props__['parameters'] = parameters
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
        super(LinkedServiceCosmosDb, __self__).__init__(
            'azure:datafactory/linkedServiceCosmosDb:LinkedServiceCosmosDb',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, account_endpoint: Optional[pulumi.Input[str]] = None, account_key: Optional[pulumi.Input[str]] = None, additional_properties: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, annotations: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, connection_string: Optional[pulumi.Input[str]] = None, data_factory_name: Optional[pulumi.Input[str]] = None, database: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, integration_runtime_name: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, parameters: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, resource_group_name: Optional[pulumi.Input[str]] = None) -> 'LinkedServiceCosmosDb':
        """
        Get an existing LinkedServiceCosmosDb resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_endpoint: The endpoint of he Azure CosmosDB account. Required if `connection_string` is unspecified.
        :param pulumi.Input[str] account_key: The account key of the Azure Cosmos DB account. Required if `connection_string` is unspecified.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] additional_properties: A map of additional properties to associate with the Data Factory Linked Service.
        :param pulumi.Input[List[pulumi.Input[str]]] annotations: List of tags that can be used for describing the Data Factory Linked Service.
        :param pulumi.Input[str] connection_string: The connection string. Required if `account_endpoint`, `account_key`, and `database` are unspecified.
        :param pulumi.Input[str] data_factory_name: The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
        :param pulumi.Input[str] database: The name of the database. Required if `connection_string` is unspecified.
        :param pulumi.Input[str] description: The description for the Data Factory Linked Service.
        :param pulumi.Input[str] integration_runtime_name: The integration runtime reference to associate with the Data Factory Linked Service.
        :param pulumi.Input[str] name: Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] parameters: A map of parameters to associate with the Data Factory Linfked Service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_endpoint"] = account_endpoint
        __props__["account_key"] = account_key
        __props__["additional_properties"] = additional_properties
        __props__["annotations"] = annotations
        __props__["connection_string"] = connection_string
        __props__["data_factory_name"] = data_factory_name
        __props__["database"] = database
        __props__["description"] = description
        __props__["integration_runtime_name"] = integration_runtime_name
        __props__["name"] = name
        __props__["parameters"] = parameters
        __props__["resource_group_name"] = resource_group_name
        return LinkedServiceCosmosDb(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

