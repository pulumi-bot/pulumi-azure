# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class DomainInputMappingDefaultValues(dict):
    data_version: Optional[str] = pulumi.output_property("dataVersion")
    """
    Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_type: Optional[str] = pulumi.output_property("eventType")
    """
    Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    subject: Optional[str] = pulumi.output_property("subject")
    """
    Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DomainInputMappingFields(dict):
    data_version: Optional[str] = pulumi.output_property("dataVersion")
    """
    Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_time: Optional[str] = pulumi.output_property("eventTime")
    """
    Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_type: Optional[str] = pulumi.output_property("eventType")
    """
    Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    subject: Optional[str] = pulumi.output_property("subject")
    """
    Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    topic: Optional[str] = pulumi.output_property("topic")
    """
    Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventGridTopicInputMappingDefaultValues(dict):
    data_version: Optional[str] = pulumi.output_property("dataVersion")
    """
    Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_type: Optional[str] = pulumi.output_property("eventType")
    """
    Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    subject: Optional[str] = pulumi.output_property("subject")
    """
    Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventGridTopicInputMappingFields(dict):
    data_version: Optional[str] = pulumi.output_property("dataVersion")
    """
    Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_time: Optional[str] = pulumi.output_property("eventTime")
    """
    Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    event_type: Optional[str] = pulumi.output_property("eventType")
    """
    Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    subject: Optional[str] = pulumi.output_property("subject")
    """
    Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """
    topic: Optional[str] = pulumi.output_property("topic")
    """
    Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventHubCaptureDescription(dict):
    destination: 'outputs.EventHubCaptureDescriptionDestination' = pulumi.output_property("destination")
    """
    A `destination` block as defined below.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Specifies if the Capture Description is Enabled.
    """
    encoding: str = pulumi.output_property("encoding")
    """
    Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
    """
    interval_in_seconds: Optional[float] = pulumi.output_property("intervalInSeconds")
    """
    Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
    """
    size_limit_in_bytes: Optional[float] = pulumi.output_property("sizeLimitInBytes")
    """
    Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
    """
    skip_empty_archives: Optional[bool] = pulumi.output_property("skipEmptyArchives")
    """
    Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventHubCaptureDescriptionDestination(dict):
    archive_name_format: str = pulumi.output_property("archiveNameFormat")
    """
    The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
    """
    blob_container_name: str = pulumi.output_property("blobContainerName")
    """
    The name of the Container within the Blob Storage Account where messages should be archived.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
    """
    storage_account_id: str = pulumi.output_property("storageAccountId")
    """
    The ID of the Blob Storage Account where messages should be archived.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventHubNamespaceNetworkRulesets(dict):
    default_action: str = pulumi.output_property("defaultAction")
    """
    The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
    """
    ip_rules: Optional[List['outputs.EventHubNamespaceNetworkRulesetsIpRule']] = pulumi.output_property("ipRules")
    """
    One or more `ip_rule` blocks as defined below.
    """
    virtual_network_rules: Optional[List['outputs.EventHubNamespaceNetworkRulesetsVirtualNetworkRule']] = pulumi.output_property("virtualNetworkRules")
    """
    One or more `virtual_network_rule` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventHubNamespaceNetworkRulesetsIpRule(dict):
    action: Optional[str] = pulumi.output_property("action")
    """
    The action to take when the rule is  matched. Possible values are `Allow`.
    """
    ip_mask: str = pulumi.output_property("ipMask")
    """
    The ip mask to match on.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventHubNamespaceNetworkRulesetsVirtualNetworkRule(dict):
    ignore_missing_virtual_network_service_endpoint: Optional[bool] = pulumi.output_property("ignoreMissingVirtualNetworkServiceEndpoint")
    """
    Are missing virtual network service endpoints ignored? Defaults to `false`.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The id of the subnet to match on.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilter(dict):
    bool_equals: Optional[List['outputs.EventSubscriptionAdvancedFilterBoolEqual']] = pulumi.output_property("boolEquals")
    """
    Compares a value of an event using a single boolean value.
    """
    number_greater_than_or_equals: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual']] = pulumi.output_property("numberGreaterThanOrEquals")
    """
    Compares a value of an event using a single floating point number.
    """
    number_greater_thans: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberGreaterThan']] = pulumi.output_property("numberGreaterThans")
    """
    Compares a value of an event using a single floating point number.
    """
    number_ins: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberIn']] = pulumi.output_property("numberIns")
    """
    Compares a value of an event using multiple floating point numbers.
    """
    number_less_than_or_equals: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberLessThanOrEqual']] = pulumi.output_property("numberLessThanOrEquals")
    """
    Compares a value of an event using a single floating point number.
    """
    number_less_thans: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberLessThan']] = pulumi.output_property("numberLessThans")
    """
    Compares a value of an event using a single floating point number.
    """
    number_not_ins: Optional[List['outputs.EventSubscriptionAdvancedFilterNumberNotIn']] = pulumi.output_property("numberNotIns")
    """
    Compares a value of an event using multiple floating point numbers.
    """
    string_begins_withs: Optional[List['outputs.EventSubscriptionAdvancedFilterStringBeginsWith']] = pulumi.output_property("stringBeginsWiths")
    """
    Compares a value of an event using multiple string values.
    """
    string_contains: Optional[List['outputs.EventSubscriptionAdvancedFilterStringContain']] = pulumi.output_property("stringContains")
    """
    Compares a value of an event using multiple string values.
    """
    string_ends_withs: Optional[List['outputs.EventSubscriptionAdvancedFilterStringEndsWith']] = pulumi.output_property("stringEndsWiths")
    """
    Compares a value of an event using multiple string values.
    """
    string_ins: Optional[List['outputs.EventSubscriptionAdvancedFilterStringIn']] = pulumi.output_property("stringIns")
    """
    Compares a value of an event using multiple string values.
    """
    string_not_ins: Optional[List['outputs.EventSubscriptionAdvancedFilterStringNotIn']] = pulumi.output_property("stringNotIns")
    """
    Compares a value of an event using multiple string values.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterBoolEqual(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    value: bool = pulumi.output_property("value")
    """
    Specifies a single value to compare to when using a single value operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberGreaterThan(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    value: float = pulumi.output_property("value")
    """
    Specifies a single value to compare to when using a single value operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    value: float = pulumi.output_property("value")
    """
    Specifies a single value to compare to when using a single value operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberIn(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[float] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberLessThan(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    value: float = pulumi.output_property("value")
    """
    Specifies a single value to compare to when using a single value operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberLessThanOrEqual(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    value: float = pulumi.output_property("value")
    """
    Specifies a single value to compare to when using a single value operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterNumberNotIn(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[float] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterStringBeginsWith(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterStringContain(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterStringEndsWith(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterStringIn(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAdvancedFilterStringNotIn(dict):
    key: str = pulumi.output_property("key")
    """
    Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
    """
    values: List[str] = pulumi.output_property("values")
    """
    Specifies an array of values to compare to when using a multiple values operator.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionAzureFunctionEndpoint(dict):
    function_id: str = pulumi.output_property("functionId")
    """
    Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
    """
    max_events_per_batch: Optional[float] = pulumi.output_property("maxEventsPerBatch")
    """
    Maximum number of events per batch.
    """
    preferred_batch_size_in_kilobytes: Optional[float] = pulumi.output_property("preferredBatchSizeInKilobytes")
    """
    Preferred batch size in Kilobytes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionEventhubEndpoint(dict):
    eventhub_id: Optional[str] = pulumi.output_property("eventhubId")
    """
    Specifies the id of the eventhub where the Event Subscription will receive events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionHybridConnectionEndpoint(dict):
    hybrid_connection_id: Optional[str] = pulumi.output_property("hybridConnectionId")
    """
    Specifies the id of the hybrid connection where the Event Subscription will receive events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionRetryPolicy(dict):
    event_time_to_live: float = pulumi.output_property("eventTimeToLive")
    """
    Specifies the time to live (in minutes) for events.
    """
    max_delivery_attempts: float = pulumi.output_property("maxDeliveryAttempts")
    """
    Specifies the maximum number of delivery retry attempts for events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionStorageBlobDeadLetterDestination(dict):
    storage_account_id: str = pulumi.output_property("storageAccountId")
    """
    Specifies the id of the storage account id where the storage blob is located.
    """
    storage_blob_container_name: str = pulumi.output_property("storageBlobContainerName")
    """
    Specifies the name of the Storage blob container that is the destination of the deadletter events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionStorageQueueEndpoint(dict):
    queue_name: str = pulumi.output_property("queueName")
    """
    Specifies the name of the storage queue where the Event Subscription will receive events.
    """
    storage_account_id: str = pulumi.output_property("storageAccountId")
    """
    Specifies the id of the storage account id where the storage queue is located.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionSubjectFilter(dict):
    case_sensitive: Optional[bool] = pulumi.output_property("caseSensitive")
    """
    Specifies if `subject_begins_with` and `subject_ends_with` case sensitive. This value defaults to `false`.
    """
    subject_begins_with: Optional[str] = pulumi.output_property("subjectBeginsWith")
    """
    A string to filter events for an event subscription based on a resource path prefix.
    """
    subject_ends_with: Optional[str] = pulumi.output_property("subjectEndsWith")
    """
    A string to filter events for an event subscription based on a resource path suffix.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventSubscriptionWebhookEndpoint(dict):
    active_directory_app_id_or_uri: Optional[str] = pulumi.output_property("activeDirectoryAppIdOrUri")
    """
    The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
    """
    active_directory_tenant_id: Optional[str] = pulumi.output_property("activeDirectoryTenantId")
    """
    The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
    """
    base_url: Optional[str] = pulumi.output_property("baseUrl")
    """
    The base url of the webhook where the Event Subscription will receive events.
    """
    max_events_per_batch: Optional[float] = pulumi.output_property("maxEventsPerBatch")
    """
    Maximum number of events per batch.
    """
    preferred_batch_size_in_kilobytes: Optional[float] = pulumi.output_property("preferredBatchSizeInKilobytes")
    """
    Preferred batch size in Kilobytes.
    """
    url: str = pulumi.output_property("url")
    """
    Specifies the url of the webhook where the Event Subscription will receive events.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubscriptionRuleCorrelationFilter(dict):
    content_type: Optional[str] = pulumi.output_property("contentType")
    """
    Content type of the message.
    """
    correlation_id: Optional[str] = pulumi.output_property("correlationId")
    """
    Identifier of the correlation.
    """
    label: Optional[str] = pulumi.output_property("label")
    """
    Application specific label.
    """
    message_id: Optional[str] = pulumi.output_property("messageId")
    """
    Identifier of the message.
    """
    reply_to: Optional[str] = pulumi.output_property("replyTo")
    """
    Address of the queue to reply to.
    """
    reply_to_session_id: Optional[str] = pulumi.output_property("replyToSessionId")
    """
    Session identifier to reply to.
    """
    session_id: Optional[str] = pulumi.output_property("sessionId")
    """
    Session identifier.
    """
    to: Optional[str] = pulumi.output_property("to")
    """
    Address to send to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


