# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AccountCapability',
    'AccountConsistencyPolicy',
    'AccountGeoLocation',
    'AccountVirtualNetworkRule',
    'GremlinGraphConflictResolutionPolicy',
    'GremlinGraphIndexPolicy',
    'GremlinGraphUniqueKey',
    'MongoCollectionIndex',
    'MongoCollectionSystemIndex',
    'SqlContainerUniqueKey',
    'GetAccountCapability',
    'GetAccountConsistencyPolicy',
    'GetAccountGeoLocation',
    'GetAccountVirtualNetworkRule',
]

@pulumi.output_type
class AccountCapability(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountConsistencyPolicy(dict):
    @property
    @pulumi.getter(name="consistencyLevel")
    def consistency_level(self) -> str:
        """
        The Consistency Level to use for this CosmosDB Account - can be either `BoundedStaleness`, `Eventual`, `Session`, `Strong` or `ConsistentPrefix`.
        """
        ...

    @property
    @pulumi.getter(name="maxIntervalInSeconds")
    def max_interval_in_seconds(self) -> Optional[float]:
        """
        When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is `5` - `86400` (1 day). Defaults to `5`. Required when `consistency_level` is set to `BoundedStaleness`.
        """
        ...

    @property
    @pulumi.getter(name="maxStalenessPrefix")
    def max_staleness_prefix(self) -> Optional[float]:
        """
        When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is `10` â€“ `2147483647`. Defaults to `100`. Required when `consistency_level` is set to `BoundedStaleness`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountGeoLocation(dict):
    @property
    @pulumi.getter(name="failoverPriority")
    def failover_priority(self) -> float:
        """
        The failover priority of the region. A failover priority of `0` indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority `0`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the virtual network subnet.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The name of the Azure region to host replicated data.
        """
        ...

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The string used to generate the document endpoints for this region. If not specified it defaults to `${cosmosdb_account.name}-${location}`. Changing this causes the location to be deleted and re-provisioned and cannot be changed for the location with failover priority `0`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountVirtualNetworkRule(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the virtual network subnet.
        """
        ...

    @property
    @pulumi.getter(name="ignoreMissingVnetServiceEndpoint")
    def ignore_missing_vnet_service_endpoint(self) -> Optional[bool]:
        """
        If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphConflictResolutionPolicy(dict):
    @property
    @pulumi.getter(name="conflictResolutionPath")
    def conflict_resolution_path(self) -> Optional[str]:
        """
        The conflict resolution path in the case of LastWriterWins mode.
        """
        ...

    @property
    @pulumi.getter(name="conflictResolutionProcedure")
    def conflict_resolution_procedure(self) -> Optional[str]:
        """
        The procedure to resolve conflicts in the case of custom mode.
        """
        ...

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Indicates the conflict resolution mode. Possible values include: `LastWriterWins`, `Custom`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphIndexPolicy(dict):
    @property
    @pulumi.getter
    def automatic(self) -> Optional[bool]:
        """
        Indicates if the indexing policy is automatic. Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[List[str]]:
        """
        List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
        """
        ...

    @property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> Optional[List[str]]:
        """
        List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
        """
        ...

    @property
    @pulumi.getter(name="indexingMode")
    def indexing_mode(self) -> str:
        """
        Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphUniqueKey(dict):
    @property
    @pulumi.getter
    def paths(self) -> List[str]:
        """
        A list of paths to use for this unique key.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoCollectionIndex(dict):
    @property
    @pulumi.getter
    def keys(self) -> List[str]:
        """
        Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
        """
        ...

    @property
    @pulumi.getter
    def unique(self) -> Optional[bool]:
        """
        Is the index unique or not? Defaults to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoCollectionSystemIndex(dict):
    @property
    @pulumi.getter
    def keys(self) -> Optional[List[str]]:
        """
        Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
        """
        ...

    @property
    @pulumi.getter
    def unique(self) -> Optional[bool]:
        """
        Is the index unique or not? Defaults to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlContainerUniqueKey(dict):
    @property
    @pulumi.getter
    def paths(self) -> List[str]:
        """
        A list of paths to use for this unique key.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountCapability(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the CosmosDB Account.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountConsistencyPolicy(dict):
    @property
    @pulumi.getter(name="consistencyLevel")
    def consistency_level(self) -> str:
        """
        The Consistency Level used by this CosmosDB Account.
        """
        ...

    @property
    @pulumi.getter(name="maxIntervalInSeconds")
    def max_interval_in_seconds(self) -> float:
        """
        The amount of staleness (in seconds) tolerated when the consistency level is Bounded Staleness.
        """
        ...

    @property
    @pulumi.getter(name="maxStalenessPrefix")
    def max_staleness_prefix(self) -> float:
        """
        The number of stale requests tolerated when the consistency level is Bounded Staleness.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountGeoLocation(dict):
    @property
    @pulumi.getter(name="failoverPriority")
    def failover_priority(self) -> float:
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the virtual network subnet.
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The name of the Azure region hosting replicated data.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountVirtualNetworkRule(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the virtual network subnet.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


