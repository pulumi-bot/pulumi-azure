# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class AccountCapability(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountConsistencyPolicy(dict):
    consistency_level: str = pulumi.output_property("consistencyLevel")
    """
    The Consistency Level to use for this CosmosDB Account - can be either `BoundedStaleness`, `Eventual`, `Session`, `Strong` or `ConsistentPrefix`.
    """
    max_interval_in_seconds: Optional[float] = pulumi.output_property("maxIntervalInSeconds")
    """
    When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is `5` - `86400` (1 day). Defaults to `5`. Required when `consistency_level` is set to `BoundedStaleness`.
    """
    max_staleness_prefix: Optional[float] = pulumi.output_property("maxStalenessPrefix")
    """
    When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is `10` â€“ `2147483647`. Defaults to `100`. Required when `consistency_level` is set to `BoundedStaleness`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountGeoLocation(dict):
    failover_priority: float = pulumi.output_property("failoverPriority")
    """
    The failover priority of the region. A failover priority of `0` indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority `0`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the virtual network subnet.
    """
    location: str = pulumi.output_property("location")
    """
    The name of the Azure region to host replicated data.
    """
    prefix: Optional[str] = pulumi.output_property("prefix")
    """
    The string used to generate the document endpoints for this region. If not specified it defaults to `${cosmosdb_account.name}-${location}`. Changing this causes the location to be deleted and re-provisioned and cannot be changed for the location with failover priority `0`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountVirtualNetworkRule(dict):
    id: str = pulumi.output_property("id")
    """
    The ID of the virtual network subnet.
    """
    ignore_missing_vnet_service_endpoint: Optional[bool] = pulumi.output_property("ignoreMissingVnetServiceEndpoint")
    """
    If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphConflictResolutionPolicy(dict):
    conflict_resolution_path: Optional[str] = pulumi.output_property("conflictResolutionPath")
    """
    The conflict resolution path in the case of LastWriterWins mode.
    """
    conflict_resolution_procedure: Optional[str] = pulumi.output_property("conflictResolutionProcedure")
    """
    The procedure to resolve conflicts in the case of custom mode.
    """
    mode: str = pulumi.output_property("mode")
    """
    Indicates the conflict resolution mode. Possible values include: `LastWriterWins`, `Custom`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphIndexPolicy(dict):
    automatic: Optional[bool] = pulumi.output_property("automatic")
    """
    Indicates if the indexing policy is automatic. Defaults to `true`.
    """
    excluded_paths: Optional[List[str]] = pulumi.output_property("excludedPaths")
    """
    List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
    """
    included_paths: Optional[List[str]] = pulumi.output_property("includedPaths")
    """
    List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
    """
    indexing_mode: str = pulumi.output_property("indexingMode")
    """
    Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GremlinGraphUniqueKey(dict):
    paths: List[str] = pulumi.output_property("paths")
    """
    A list of paths to use for this unique key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoCollectionIndex(dict):
    keys: List[str] = pulumi.output_property("keys")
    """
    Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
    """
    unique: Optional[bool] = pulumi.output_property("unique")
    """
    Is the index unique or not? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MongoCollectionSystemIndex(dict):
    keys: Optional[List[str]] = pulumi.output_property("keys")
    """
    Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
    """
    unique: Optional[bool] = pulumi.output_property("unique")
    """
    Is the index unique or not? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlContainerUniqueKey(dict):
    paths: List[str] = pulumi.output_property("paths")
    """
    A list of paths to use for this unique key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountCapability(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the CosmosDB Account.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountConsistencyPolicy(dict):
    consistency_level: str = pulumi.output_property("consistencyLevel")
    """
    The Consistency Level used by this CosmosDB Account.
    """
    max_interval_in_seconds: float = pulumi.output_property("maxIntervalInSeconds")
    """
    The amount of staleness (in seconds) tolerated when the consistency level is Bounded Staleness.
    """
    max_staleness_prefix: float = pulumi.output_property("maxStalenessPrefix")
    """
    The number of stale requests tolerated when the consistency level is Bounded Staleness.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountGeoLocation(dict):
    failover_priority: float = pulumi.output_property("failoverPriority")
    id: str = pulumi.output_property("id")
    """
    The ID of the virtual network subnet.
    """
    location: str = pulumi.output_property("location")
    """
    The name of the Azure region hosting replicated data.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountVirtualNetworkRule(dict):
    id: str = pulumi.output_property("id")
    """
    The ID of the virtual network subnet.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


