# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AccountCapabilityArgs',
    'AccountConsistencyPolicyArgs',
    'AccountGeoLocationArgs',
    'AccountVirtualNetworkRuleArgs',
    'GremlinGraphConflictResolutionPolicyArgs',
    'GremlinGraphIndexPolicyArgs',
    'GremlinGraphUniqueKeyArgs',
    'MongoCollectionIndexArgs',
    'MongoCollectionSystemIndexArgs',
    'SqlContainerUniqueKeyArgs',
]

@pulumi.input_type
class AccountCapabilityArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
        """
        __self__.name = name

@pulumi.input_type
class AccountConsistencyPolicyArgs:
    consistency_level: pulumi.Input[str] = pulumi.input_property("consistencyLevel")
    """
    The Consistency Level to use for this CosmosDB Account - can be either `BoundedStaleness`, `Eventual`, `Session`, `Strong` or `ConsistentPrefix`.
    """
    max_interval_in_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("maxIntervalInSeconds")
    """
    When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is `5` - `86400` (1 day). Defaults to `5`. Required when `consistency_level` is set to `BoundedStaleness`.
    """
    max_staleness_prefix: Optional[pulumi.Input[float]] = pulumi.input_property("maxStalenessPrefix")
    """
    When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is `10` – `2147483647`. Defaults to `100`. Required when `consistency_level` is set to `BoundedStaleness`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, consistency_level: pulumi.Input[str], max_interval_in_seconds: Optional[pulumi.Input[float]] = None, max_staleness_prefix: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] consistency_level: The Consistency Level to use for this CosmosDB Account - can be either `BoundedStaleness`, `Eventual`, `Session`, `Strong` or `ConsistentPrefix`.
        :param pulumi.Input[float] max_interval_in_seconds: When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is `5` - `86400` (1 day). Defaults to `5`. Required when `consistency_level` is set to `BoundedStaleness`.
        :param pulumi.Input[float] max_staleness_prefix: When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is `10` – `2147483647`. Defaults to `100`. Required when `consistency_level` is set to `BoundedStaleness`.
        """
        __self__.consistency_level = consistency_level
        __self__.max_interval_in_seconds = max_interval_in_seconds
        __self__.max_staleness_prefix = max_staleness_prefix

@pulumi.input_type
class AccountGeoLocationArgs:
    failover_priority: pulumi.Input[float] = pulumi.input_property("failoverPriority")
    """
    The failover priority of the region. A failover priority of `0` indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority `0`.
    """
    location: pulumi.Input[str] = pulumi.input_property("location")
    """
    The name of the Azure region to host replicated data.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the virtual network subnet.
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    The string used to generate the document endpoints for this region. If not specified it defaults to `${cosmosdb_account.name}-${location}`. Changing this causes the location to be deleted and re-provisioned and cannot be changed for the location with failover priority `0`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, failover_priority: pulumi.Input[float], location: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None, prefix: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] failover_priority: The failover priority of the region. A failover priority of `0` indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority `0`.
        :param pulumi.Input[str] location: The name of the Azure region to host replicated data.
        :param pulumi.Input[str] id: The ID of the virtual network subnet.
        :param pulumi.Input[str] prefix: The string used to generate the document endpoints for this region. If not specified it defaults to `${cosmosdb_account.name}-${location}`. Changing this causes the location to be deleted and re-provisioned and cannot be changed for the location with failover priority `0`.
        """
        __self__.failover_priority = failover_priority
        __self__.location = location
        __self__.id = id
        if prefix is not None:
            warnings.warn("This is deprecated because the service no longer accepts this as an input since Apr 25, 2019", DeprecationWarning)
            pulumi.log.warn("prefix is deprecated: This is deprecated because the service no longer accepts this as an input since Apr 25, 2019")
        __self__.prefix = prefix

@pulumi.input_type
class AccountVirtualNetworkRuleArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The ID of the virtual network subnet.
    """
    ignore_missing_vnet_service_endpoint: Optional[pulumi.Input[bool]] = pulumi.input_property("ignoreMissingVnetServiceEndpoint")
    """
    If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], ignore_missing_vnet_service_endpoint: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] id: The ID of the virtual network subnet.
        :param pulumi.Input[bool] ignore_missing_vnet_service_endpoint: If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to `false`.
        """
        __self__.id = id
        __self__.ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint

@pulumi.input_type
class GremlinGraphConflictResolutionPolicyArgs:
    mode: pulumi.Input[str] = pulumi.input_property("mode")
    """
    Indicates the conflict resolution mode. Possible values include: `LastWriterWins`, `Custom`.
    """
    conflict_resolution_path: Optional[pulumi.Input[str]] = pulumi.input_property("conflictResolutionPath")
    """
    The conflict resolution path in the case of LastWriterWins mode.
    """
    conflict_resolution_procedure: Optional[pulumi.Input[str]] = pulumi.input_property("conflictResolutionProcedure")
    """
    The procedure to resolve conflicts in the case of custom mode.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mode: pulumi.Input[str], conflict_resolution_path: Optional[pulumi.Input[str]] = None, conflict_resolution_procedure: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] mode: Indicates the conflict resolution mode. Possible values include: `LastWriterWins`, `Custom`.
        :param pulumi.Input[str] conflict_resolution_path: The conflict resolution path in the case of LastWriterWins mode.
        :param pulumi.Input[str] conflict_resolution_procedure: The procedure to resolve conflicts in the case of custom mode.
        """
        __self__.mode = mode
        __self__.conflict_resolution_path = conflict_resolution_path
        __self__.conflict_resolution_procedure = conflict_resolution_procedure

@pulumi.input_type
class GremlinGraphIndexPolicyArgs:
    indexing_mode: pulumi.Input[str] = pulumi.input_property("indexingMode")
    """
    Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
    """
    automatic: Optional[pulumi.Input[bool]] = pulumi.input_property("automatic")
    """
    Indicates if the indexing policy is automatic. Defaults to `true`.
    """
    excluded_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("excludedPaths")
    """
    List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
    """
    included_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("includedPaths")
    """
    List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, indexing_mode: pulumi.Input[str], automatic: Optional[pulumi.Input[bool]] = None, excluded_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, included_paths: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] indexing_mode: Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
        :param pulumi.Input[bool] automatic: Indicates if the indexing policy is automatic. Defaults to `true`.
        :param pulumi.Input[List[pulumi.Input[str]]] excluded_paths: List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
        :param pulumi.Input[List[pulumi.Input[str]]] included_paths: List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
        """
        __self__.indexing_mode = indexing_mode
        __self__.automatic = automatic
        __self__.excluded_paths = excluded_paths
        __self__.included_paths = included_paths

@pulumi.input_type
class GremlinGraphUniqueKeyArgs:
    paths: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("paths")
    """
    A list of paths to use for this unique key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, paths: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] paths: A list of paths to use for this unique key.
        """
        __self__.paths = paths

@pulumi.input_type
class MongoCollectionIndexArgs:
    keys: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("keys")
    """
    Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
    """
    unique: Optional[pulumi.Input[bool]] = pulumi.input_property("unique")
    """
    Is the index unique or not? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, keys: pulumi.Input[List[pulumi.Input[str]]], unique: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] keys: Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
        :param pulumi.Input[bool] unique: Is the index unique or not? Defaults to `false`.
        """
        __self__.keys = keys
        __self__.unique = unique

@pulumi.input_type
class MongoCollectionSystemIndexArgs:
    keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("keys")
    """
    Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
    """
    unique: Optional[pulumi.Input[bool]] = pulumi.input_property("unique")
    """
    Is the index unique or not? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, unique: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] keys: Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
        :param pulumi.Input[bool] unique: Is the index unique or not? Defaults to `false`.
        """
        __self__.keys = keys
        __self__.unique = unique

@pulumi.input_type
class SqlContainerUniqueKeyArgs:
    paths: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("paths")
    """
    A list of paths to use for this unique key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, paths: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] paths: A list of paths to use for this unique key.
        """
        __self__.paths = paths

