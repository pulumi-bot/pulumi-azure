# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AccountIdentityArgs',
    'DatasetBlobStorageStorageAccountArgs',
    'ShareSnapshotScheduleArgs',
]

@pulumi.input_type
class AccountIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
        :param pulumi.Input[str] tenant_id: The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "principalId", principal_id)
        pulumi.set(__self__, "tenantId", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
        """
        ...

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
        """
        ...

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatasetBlobStorageStorageAccountArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 subscription_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        :param pulumi.Input[str] resource_group_name: The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        :param pulumi.Input[str] subscription_id: The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resourceGroupName", resource_group_name)
        pulumi.set(__self__, "subscriptionId", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        """
        ...

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        """
        ...

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ShareSnapshotScheduleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 recurrence: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the snapshot schedule.
        :param pulumi.Input[str] recurrence: The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
        :param pulumi.Input[str] start_time: The synchronization with the source data's start time.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "startTime", start_time)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the snapshot schedule.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def recurrence(self) -> pulumi.Input[str]:
        """
        The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
        """
        ...

    @recurrence.setter
    def recurrence(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        The synchronization with the source data's start time.
        """
        ...

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        ...


