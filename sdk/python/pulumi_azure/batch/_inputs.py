# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'AccountKeyVaultReferenceArgs',
    'PoolAutoScaleArgs',
    'PoolCertificateArgs',
    'PoolContainerConfigurationArgs',
    'PoolContainerConfigurationContainerRegistryArgs',
    'PoolFixedScaleArgs',
    'PoolNetworkConfigurationArgs',
    'PoolNetworkConfigurationEndpointConfigurationArgs',
    'PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs',
    'PoolStartTaskArgs',
    'PoolStartTaskResourceFileArgs',
    'PoolStartTaskUserIdentityArgs',
    'PoolStartTaskUserIdentityAutoUserArgs',
    'PoolStorageImageReferenceArgs',
    'GetPoolCertificateArgs',
    'GetPoolNetworkConfigurationArgs',
    'GetPoolNetworkConfigurationEndpointConfigurationArgs',
    'GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs',
    'GetPoolStartTaskArgs',
    'GetPoolStartTaskResourceFileArgs',
    'GetPoolStartTaskUserIdentityArgs',
    'GetPoolStartTaskUserIdentityAutoUserArgs',
]

@pulumi.input_type
class AccountKeyVaultReferenceArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The Azure identifier of the Azure KeyVault to use.
    """
    url: pulumi.Input[str] = pulumi.input_property("url")
    """
    The HTTPS URL of the Azure KeyVault to use.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], url: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] id: The Azure identifier of the Azure KeyVault to use.
        :param pulumi.Input[str] url: The HTTPS URL of the Azure KeyVault to use.
        """
        __self__.id = id
        __self__.url = url

@pulumi.input_type
class PoolAutoScaleArgs:
    formula: pulumi.Input[str] = pulumi.input_property("formula")
    """
    The autoscale formula that needs to be used for scaling the Batch pool.
    """
    evaluation_interval: Optional[pulumi.Input[str]] = pulumi.input_property("evaluationInterval")
    """
    The interval to wait before evaluating if the pool needs to be scaled. Defaults to `PT15M`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, formula: pulumi.Input[str], evaluation_interval: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] formula: The autoscale formula that needs to be used for scaling the Batch pool.
        :param pulumi.Input[str] evaluation_interval: The interval to wait before evaluating if the pool needs to be scaled. Defaults to `PT15M`.
        """
        __self__.formula = formula
        __self__.evaluation_interval = evaluation_interval

@pulumi.input_type
class PoolCertificateArgs:
    id: pulumi.Input[str] = pulumi.input_property("id")
    """
    The ID of the Batch Certificate to install on the Batch Pool, which must be inside the same Batch Account.
    """
    store_location: pulumi.Input[str] = pulumi.input_property("storeLocation")
    """
    The location of the certificate store on the compute node into which to install the certificate. Possible values are `CurrentUser` or `LocalMachine`.
    """
    store_name: Optional[pulumi.Input[str]] = pulumi.input_property("storeName")
    """
    The name of the certificate store on the compute node into which to install the certificate. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: `My`, `Root`, `CA`, `Trust`, `Disallowed`, `TrustedPeople`, `TrustedPublisher`, `AuthRoot`, `AddressBook`, but any custom store name can also be used. The default value is `My`.
    """
    visibilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("visibilities")
    """
    Which user accounts on the compute node should have access to the private data of the certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: pulumi.Input[str], store_location: pulumi.Input[str], store_name: Optional[pulumi.Input[str]] = None, visibilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] id: The ID of the Batch Certificate to install on the Batch Pool, which must be inside the same Batch Account.
        :param pulumi.Input[str] store_location: The location of the certificate store on the compute node into which to install the certificate. Possible values are `CurrentUser` or `LocalMachine`.
        :param pulumi.Input[str] store_name: The name of the certificate store on the compute node into which to install the certificate. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: `My`, `Root`, `CA`, `Trust`, `Disallowed`, `TrustedPeople`, `TrustedPublisher`, `AuthRoot`, `AddressBook`, but any custom store name can also be used. The default value is `My`.
        :param pulumi.Input[List[pulumi.Input[str]]] visibilities: Which user accounts on the compute node should have access to the private data of the certificate.
        """
        __self__.id = id
        __self__.store_location = store_location
        __self__.store_name = store_name
        __self__.visibilities = visibilities

@pulumi.input_type
class PoolContainerConfigurationArgs:
    container_image_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("containerImageNames")
    """
    A list of container image names to use, as would be specified by `docker pull`.
    """
    container_registries: Optional[pulumi.Input[List[pulumi.Input['PoolContainerConfigurationContainerRegistryArgs']]]] = pulumi.input_property("containerRegistries")
    """
    Additional container registries from which container images can be pulled by the pool's VMs.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    The type of container configuration. Possible value is `DockerCompatible`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, container_image_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, container_registries: Optional[pulumi.Input[List[pulumi.Input['PoolContainerConfigurationContainerRegistryArgs']]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] container_image_names: A list of container image names to use, as would be specified by `docker pull`.
        :param pulumi.Input[List[pulumi.Input['PoolContainerConfigurationContainerRegistryArgs']]] container_registries: Additional container registries from which container images can be pulled by the pool's VMs.
        :param pulumi.Input[str] type: The type of container configuration. Possible value is `DockerCompatible`.
        """
        __self__.container_image_names = container_image_names
        __self__.container_registries = container_registries
        __self__.type = type

@pulumi.input_type
class PoolContainerConfigurationContainerRegistryArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password to log into the registry server. Changing this forces a new resource to be created.
    """
    registry_server: pulumi.Input[str] = pulumi.input_property("registryServer")
    """
    The container registry URL. The default is "docker.io". Changing this forces a new resource to be created.
    """
    user_name: pulumi.Input[str] = pulumi.input_property("userName")
    """
    The user name to log into the registry server. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], registry_server: pulumi.Input[str], user_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] password: The password to log into the registry server. Changing this forces a new resource to be created.
        :param pulumi.Input[str] registry_server: The container registry URL. The default is "docker.io". Changing this forces a new resource to be created.
        :param pulumi.Input[str] user_name: The user name to log into the registry server. Changing this forces a new resource to be created.
        """
        __self__.password = password
        __self__.registry_server = registry_server
        __self__.user_name = user_name

@pulumi.input_type
class PoolFixedScaleArgs:
    resize_timeout: Optional[pulumi.Input[str]] = pulumi.input_property("resizeTimeout")
    """
    The timeout for resize operations. Defaults to `PT15M`.
    """
    target_dedicated_nodes: Optional[pulumi.Input[float]] = pulumi.input_property("targetDedicatedNodes")
    """
    The number of nodes in the Batch pool. Defaults to `1`.
    """
    target_low_priority_nodes: Optional[pulumi.Input[float]] = pulumi.input_property("targetLowPriorityNodes")
    """
    The number of low priority nodes in the Batch pool. Defaults to `0`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resize_timeout: Optional[pulumi.Input[str]] = None, target_dedicated_nodes: Optional[pulumi.Input[float]] = None, target_low_priority_nodes: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] resize_timeout: The timeout for resize operations. Defaults to `PT15M`.
        :param pulumi.Input[float] target_dedicated_nodes: The number of nodes in the Batch pool. Defaults to `1`.
        :param pulumi.Input[float] target_low_priority_nodes: The number of low priority nodes in the Batch pool. Defaults to `0`.
        """
        __self__.resize_timeout = resize_timeout
        __self__.target_dedicated_nodes = target_dedicated_nodes
        __self__.target_low_priority_nodes = target_low_priority_nodes

@pulumi.input_type
class PoolNetworkConfigurationArgs:
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
    """
    endpoint_configurations: Optional[pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationArgs']]]] = pulumi.input_property("endpointConfigurations")
    """
    A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
    """
    public_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("publicIps")
    """
    A list of public ip ids that will be allocated to nodes. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, subnet_id: pulumi.Input[str], endpoint_configurations: Optional[pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationArgs']]]] = None, public_ips: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] subnet_id: The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationArgs']]] endpoint_configurations: A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] public_ips: A list of public ip ids that will be allocated to nodes. Changing this forces a new resource to be created.
        """
        __self__.subnet_id = subnet_id
        __self__.endpoint_configurations = endpoint_configurations
        __self__.public_ips = public_ips

@pulumi.input_type
class PoolNetworkConfigurationEndpointConfigurationArgs:
    backend_port: pulumi.Input[float] = pulumi.input_property("backendPort")
    """
    The port number on the compute node. Acceptable values are between `1` and `65535` except for `29876`, `29877` as these are reserved. Changing this forces a new resource to be created.
    """
    frontend_port_range: pulumi.Input[str] = pulumi.input_property("frontendPortRange")
    """
    The range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes in the format of `1000-1100`. Acceptable values range between `1` and `65534` except ports from `50000` to `55000` which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Values must be a range of at least `100` nodes. Changing this forces a new resource to be created.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the endpoint. The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. Changing this forces a new resource to be created.
    """
    protocol: pulumi.Input[str] = pulumi.input_property("protocol")
    """
    The protocol of the endpoint. Acceptable values are `TCP` and `UDP`. Changing this forces a new resource to be created.
    """
    network_security_group_rules: Optional[pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs']]]] = pulumi.input_property("networkSecurityGroupRules")
    """
    A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch pool is `25`. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. Set as documented in the network_security_group_rules block below. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, backend_port: pulumi.Input[float], frontend_port_range: pulumi.Input[str], name: pulumi.Input[str], protocol: pulumi.Input[str], network_security_group_rules: Optional[pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs']]]] = None) -> None:
        """
        :param pulumi.Input[float] backend_port: The port number on the compute node. Acceptable values are between `1` and `65535` except for `29876`, `29877` as these are reserved. Changing this forces a new resource to be created.
        :param pulumi.Input[str] frontend_port_range: The range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes in the format of `1000-1100`. Acceptable values range between `1` and `65534` except ports from `50000` to `55000` which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Values must be a range of at least `100` nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the endpoint. The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. Changing this forces a new resource to be created.
        :param pulumi.Input[str] protocol: The protocol of the endpoint. Acceptable values are `TCP` and `UDP`. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input['PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs']]] network_security_group_rules: A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch pool is `25`. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. Set as documented in the network_security_group_rules block below. Changing this forces a new resource to be created.
        """
        __self__.backend_port = backend_port
        __self__.frontend_port_range = frontend_port_range
        __self__.name = name
        __self__.protocol = protocol
        __self__.network_security_group_rules = network_security_group_rules

@pulumi.input_type
class PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs:
    access: pulumi.Input[str] = pulumi.input_property("access")
    """
    The action that should be taken for a specified IP address, subnet range or tag. Acceptable values are `Allow` and `Deny`. Changing this forces a new resource to be created.
    """
    priority: pulumi.Input[float] = pulumi.input_property("priority")
    """
    The priority for this rule. The value must be at least `150`. Changing this forces a new resource to be created.
    """
    source_address_prefix: pulumi.Input[str] = pulumi.input_property("sourceAddressPrefix")
    """
    The source address prefix or tag to match for the rule. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access: pulumi.Input[str], priority: pulumi.Input[float], source_address_prefix: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] access: The action that should be taken for a specified IP address, subnet range or tag. Acceptable values are `Allow` and `Deny`. Changing this forces a new resource to be created.
        :param pulumi.Input[float] priority: The priority for this rule. The value must be at least `150`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] source_address_prefix: The source address prefix or tag to match for the rule. Changing this forces a new resource to be created.
        """
        __self__.access = access
        __self__.priority = priority
        __self__.source_address_prefix = source_address_prefix

@pulumi.input_type
class PoolStartTaskArgs:
    command_line: pulumi.Input[str] = pulumi.input_property("commandLine")
    """
    The command line executed by the start task.
    """
    user_identity: pulumi.Input['PoolStartTaskUserIdentityArgs'] = pulumi.input_property("userIdentity")
    """
    A `user_identity` block that describes the user identity under which the start task runs.
    """
    environment: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("environment")
    """
    A map of strings (key,value) that represents the environment variables to set in the start task.
    """
    max_task_retry_count: Optional[pulumi.Input[float]] = pulumi.input_property("maxTaskRetryCount")
    """
    The number of retry count. Defaults to `1`.
    """
    resource_files: Optional[pulumi.Input[List[pulumi.Input['PoolStartTaskResourceFileArgs']]]] = pulumi.input_property("resourceFiles")
    """
    One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
    """
    wait_for_success: Optional[pulumi.Input[bool]] = pulumi.input_property("waitForSuccess")
    """
    A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, command_line: pulumi.Input[str], user_identity: pulumi.Input['PoolStartTaskUserIdentityArgs'], environment: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, max_task_retry_count: Optional[pulumi.Input[float]] = None, resource_files: Optional[pulumi.Input[List[pulumi.Input['PoolStartTaskResourceFileArgs']]]] = None, wait_for_success: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] command_line: The command line executed by the start task.
        :param pulumi.Input['PoolStartTaskUserIdentityArgs'] user_identity: A `user_identity` block that describes the user identity under which the start task runs.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] environment: A map of strings (key,value) that represents the environment variables to set in the start task.
        :param pulumi.Input[float] max_task_retry_count: The number of retry count. Defaults to `1`.
        :param pulumi.Input[List[pulumi.Input['PoolStartTaskResourceFileArgs']]] resource_files: One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
        :param pulumi.Input[bool] wait_for_success: A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
        """
        __self__.command_line = command_line
        __self__.user_identity = user_identity
        __self__.environment = environment
        __self__.max_task_retry_count = max_task_retry_count
        __self__.resource_files = resource_files
        __self__.wait_for_success = wait_for_success

@pulumi.input_type
class PoolStartTaskResourceFileArgs:
    auto_storage_container_name: Optional[pulumi.Input[str]] = pulumi.input_property("autoStorageContainerName")
    """
    The storage container name in the auto storage account.
    """
    blob_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("blobPrefix")
    """
    The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs whose names begin with the specified prefix will be downloaded. The property is valid only when `auto_storage_container_name` or `storage_container_url` is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
    """
    file_mode: Optional[pulumi.Input[str]] = pulumi.input_property("fileMode")
    """
    The file permission mode represented as a string in octal format (e.g. `"0644"`). This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a `resource_file` which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    """
    file_path: Optional[pulumi.Input[str]] = pulumi.input_property("filePath")
    """
    The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified, `file_path` is optional and is the directory to download the files to. In the case where `file_path` is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
    """
    http_url: Optional[pulumi.Input[str]] = pulumi.input_property("httpUrl")
    """
    The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
    """
    storage_container_url: Optional[pulumi.Input[str]] = pulumi.input_property("storageContainerUrl")
    """
    The URL of the blob container within Azure Blob Storage. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, auto_storage_container_name: Optional[pulumi.Input[str]] = None, blob_prefix: Optional[pulumi.Input[str]] = None, file_mode: Optional[pulumi.Input[str]] = None, file_path: Optional[pulumi.Input[str]] = None, http_url: Optional[pulumi.Input[str]] = None, storage_container_url: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] auto_storage_container_name: The storage container name in the auto storage account.
        :param pulumi.Input[str] blob_prefix: The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs whose names begin with the specified prefix will be downloaded. The property is valid only when `auto_storage_container_name` or `storage_container_url` is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        :param pulumi.Input[str] file_mode: The file permission mode represented as a string in octal format (e.g. `"0644"`). This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a `resource_file` which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
        :param pulumi.Input[str] file_path: The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified, `file_path` is optional and is the directory to download the files to. In the case where `file_path` is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
        :param pulumi.Input[str] http_url: The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
        :param pulumi.Input[str] storage_container_url: The URL of the blob container within Azure Blob Storage. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
        """
        __self__.auto_storage_container_name = auto_storage_container_name
        __self__.blob_prefix = blob_prefix
        __self__.file_mode = file_mode
        __self__.file_path = file_path
        __self__.http_url = http_url
        __self__.storage_container_url = storage_container_url

@pulumi.input_type
class PoolStartTaskUserIdentityArgs:
    auto_user: Optional[pulumi.Input['PoolStartTaskUserIdentityAutoUserArgs']] = pulumi.input_property("autoUser")
    """
    A `auto_user` block that describes the user identity under which the start task runs.
    """
    user_name: Optional[pulumi.Input[str]] = pulumi.input_property("userName")
    """
    The username to be used by the Batch pool start task.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, auto_user: Optional[pulumi.Input['PoolStartTaskUserIdentityAutoUserArgs']] = None, user_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input['PoolStartTaskUserIdentityAutoUserArgs'] auto_user: A `auto_user` block that describes the user identity under which the start task runs.
        :param pulumi.Input[str] user_name: The username to be used by the Batch pool start task.
        """
        __self__.auto_user = auto_user
        __self__.user_name = user_name

@pulumi.input_type
class PoolStartTaskUserIdentityAutoUserArgs:
    elevation_level: Optional[pulumi.Input[str]] = pulumi.input_property("elevationLevel")
    """
    The elevation level of the user identity under which the start task runs. Possible values are `Admin` or `NonAdmin`. Defaults to `NonAdmin`.
    """
    scope: Optional[pulumi.Input[str]] = pulumi.input_property("scope")
    """
    The scope of the user identity under which the start task runs. Possible values are `Task` or `Pool`. Defaults to `Task`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, elevation_level: Optional[pulumi.Input[str]] = None, scope: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] elevation_level: The elevation level of the user identity under which the start task runs. Possible values are `Admin` or `NonAdmin`. Defaults to `NonAdmin`.
        :param pulumi.Input[str] scope: The scope of the user identity under which the start task runs. Possible values are `Task` or `Pool`. Defaults to `Task`.
        """
        __self__.elevation_level = elevation_level
        __self__.scope = scope

@pulumi.input_type
class PoolStorageImageReferenceArgs:
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    Specifies the ID of the Custom Image which the virtual machines should be created from. Changing this forces a new resource to be created. See [official documentation](https://docs.microsoft.com/en-us/azure/batch/batch-custom-images) for more details.
    ---
    """
    offer: Optional[pulumi.Input[str]] = pulumi.input_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    publisher: Optional[pulumi.Input[str]] = pulumi.input_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    sku: Optional[pulumi.Input[str]] = pulumi.input_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    Specifies the version of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: Optional[pulumi.Input[str]] = None, offer: Optional[pulumi.Input[str]] = None, publisher: Optional[pulumi.Input[str]] = None, sku: Optional[pulumi.Input[str]] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] id: Specifies the ID of the Custom Image which the virtual machines should be created from. Changing this forces a new resource to be created. See [official documentation](https://docs.microsoft.com/en-us/azure/batch/batch-custom-images) for more details.
               ---
        :param pulumi.Input[str] offer: Specifies the offer of the image used to create the virtual machines. Changing this forces a new resource to be created.
        :param pulumi.Input[str] publisher: Specifies the publisher of the image used to create the virtual machines. Changing this forces a new resource to be created.
        :param pulumi.Input[str] sku: Specifies the SKU of the image used to create the virtual machines. Changing this forces a new resource to be created.
        :param pulumi.Input[str] version: Specifies the version of the image used to create the virtual machines. Changing this forces a new resource to be created.
        """
        __self__.id = id
        __self__.offer = offer
        __self__.publisher = publisher
        __self__.sku = sku
        __self__.version = version

@pulumi.input_type
class GetPoolCertificateArgs:
    id: str = pulumi.input_property("id")
    """
    The fully qualified ID of the certificate installed on the pool.
    """
    store_location: str = pulumi.input_property("storeLocation")
    """
    The location of the certificate store on the compute node into which the certificate is installed, either `CurrentUser` or `LocalMachine`.
    """
    store_name: Optional[str] = pulumi.input_property("storeName")
    """
    The name of the certificate store on the compute node into which the certificate is installed.
    """
    visibilities: Optional[List[str]] = pulumi.input_property("visibilities")
    """
    Which user accounts on the compute node have access to the private data of the certificate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, id: str, store_location: str, store_name: Optional[str] = None, visibilities: Optional[List[str]] = None) -> None:
        """
        :param str id: The fully qualified ID of the certificate installed on the pool.
        :param str store_location: The location of the certificate store on the compute node into which the certificate is installed, either `CurrentUser` or `LocalMachine`.
        :param str store_name: The name of the certificate store on the compute node into which the certificate is installed.
        :param List[str] visibilities: Which user accounts on the compute node have access to the private data of the certificate.
        """
        __self__.id = id
        __self__.store_location = store_location
        __self__.store_name = store_name
        __self__.visibilities = visibilities

@pulumi.input_type
class GetPoolNetworkConfigurationArgs:
    endpoint_configuration: 'GetPoolNetworkConfigurationEndpointConfigurationArgs' = pulumi.input_property("endpointConfiguration")
    """
    The inbound NAT pools that are used to address specific ports on the individual compute node externally.
    """
    subnet_id: str = pulumi.input_property("subnetId")
    """
    The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint_configuration: 'GetPoolNetworkConfigurationEndpointConfigurationArgs', subnet_id: str) -> None:
        """
        :param 'GetPoolNetworkConfigurationEndpointConfigurationArgs' endpoint_configuration: The inbound NAT pools that are used to address specific ports on the individual compute node externally.
        :param str subnet_id: The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
        """
        __self__.endpoint_configuration = endpoint_configuration
        __self__.subnet_id = subnet_id

@pulumi.input_type
class GetPoolNetworkConfigurationEndpointConfigurationArgs:
    backend_port: float = pulumi.input_property("backendPort")
    """
    The port number on the compute node.
    """
    frontend_port_range: str = pulumi.input_property("frontendPortRange")
    """
    The range of external ports that are used to provide inbound access to the backendPort on the individual compute nodes in the format of `1000-1100`.
    """
    name: str = pulumi.input_property("name")
    """
    The name of the endpoint.
    """
    network_security_group_rules: List['GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs'] = pulumi.input_property("networkSecurityGroupRules")
    """
    The list of network security group rules that are applied to the endpoint.
    """
    protocol: str = pulumi.input_property("protocol")
    """
    The protocol of the endpoint.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, backend_port: float, frontend_port_range: str, name: str, network_security_group_rules: List['GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs'], protocol: str) -> None:
        """
        :param float backend_port: The port number on the compute node.
        :param str frontend_port_range: The range of external ports that are used to provide inbound access to the backendPort on the individual compute nodes in the format of `1000-1100`.
        :param str name: The name of the endpoint.
        :param List['GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs'] network_security_group_rules: The list of network security group rules that are applied to the endpoint.
        :param str protocol: The protocol of the endpoint.
        """
        __self__.backend_port = backend_port
        __self__.frontend_port_range = frontend_port_range
        __self__.name = name
        __self__.network_security_group_rules = network_security_group_rules
        __self__.protocol = protocol

@pulumi.input_type
class GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRuleArgs:
    access: str = pulumi.input_property("access")
    """
    The action that should be taken for a specified IP address, subnet range or tag.
    """
    priority: float = pulumi.input_property("priority")
    """
    The priority for this rule.
    """
    source_address_prefix: str = pulumi.input_property("sourceAddressPrefix")
    """
    The source address prefix or tag to match for the rule.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access: str, priority: float, source_address_prefix: str) -> None:
        """
        :param str access: The action that should be taken for a specified IP address, subnet range or tag.
        :param float priority: The priority for this rule.
        :param str source_address_prefix: The source address prefix or tag to match for the rule.
        """
        __self__.access = access
        __self__.priority = priority
        __self__.source_address_prefix = source_address_prefix

@pulumi.input_type
class GetPoolStartTaskArgs:
    command_line: str = pulumi.input_property("commandLine")
    """
    The command line executed by the start task.
    """
    resource_files: List['GetPoolStartTaskResourceFileArgs'] = pulumi.input_property("resourceFiles")
    """
    One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
    """
    user_identities: List['GetPoolStartTaskUserIdentityArgs'] = pulumi.input_property("userIdentities")
    """
    A `user_identity` block that describes the user identity under which the start task runs.
    """
    environment: Optional[Dict[str, str]] = pulumi.input_property("environment")
    """
    A map of strings (key,value) that represents the environment variables to set in the start task.
    """
    max_task_retry_count: Optional[float] = pulumi.input_property("maxTaskRetryCount")
    """
    The number of retry count.
    """
    wait_for_success: Optional[bool] = pulumi.input_property("waitForSuccess")
    """
    A flag that indicates if the Batch pool should wait for the start task to be completed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, command_line: str, resource_files: List['GetPoolStartTaskResourceFileArgs'], user_identities: List['GetPoolStartTaskUserIdentityArgs'], environment: Optional[Dict[str, str]] = None, max_task_retry_count: Optional[float] = None, wait_for_success: Optional[bool] = None) -> None:
        """
        :param str command_line: The command line executed by the start task.
        :param List['GetPoolStartTaskResourceFileArgs'] resource_files: One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
        :param List['GetPoolStartTaskUserIdentityArgs'] user_identities: A `user_identity` block that describes the user identity under which the start task runs.
        :param Dict[str, str] environment: A map of strings (key,value) that represents the environment variables to set in the start task.
        :param float max_task_retry_count: The number of retry count.
        :param bool wait_for_success: A flag that indicates if the Batch pool should wait for the start task to be completed.
        """
        __self__.command_line = command_line
        __self__.resource_files = resource_files
        __self__.user_identities = user_identities
        __self__.environment = environment
        __self__.max_task_retry_count = max_task_retry_count
        __self__.wait_for_success = wait_for_success

@pulumi.input_type
class GetPoolStartTaskResourceFileArgs:
    auto_storage_container_name: str = pulumi.input_property("autoStorageContainerName")
    """
    The storage container name in the auto storage account.
    """
    blob_prefix: str = pulumi.input_property("blobPrefix")
    """
    The blob prefix used when downloading blobs from an Azure Storage container.
    """
    file_mode: str = pulumi.input_property("fileMode")
    """
    The file permission mode attribute represented as a string in octal format (e.g. `"0644"`).
    """
    file_path: str = pulumi.input_property("filePath")
    """
    The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified.
    """
    http_url: str = pulumi.input_property("httpUrl")
    """
    The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access.
    """
    storage_container_url: str = pulumi.input_property("storageContainerUrl")
    """
    The URL of the blob container within Azure Blob Storage.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, auto_storage_container_name: str, blob_prefix: str, file_mode: str, file_path: str, http_url: str, storage_container_url: str) -> None:
        """
        :param str auto_storage_container_name: The storage container name in the auto storage account.
        :param str blob_prefix: The blob prefix used when downloading blobs from an Azure Storage container.
        :param str file_mode: The file permission mode attribute represented as a string in octal format (e.g. `"0644"`).
        :param str file_path: The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified.
        :param str http_url: The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access.
        :param str storage_container_url: The URL of the blob container within Azure Blob Storage.
        """
        __self__.auto_storage_container_name = auto_storage_container_name
        __self__.blob_prefix = blob_prefix
        __self__.file_mode = file_mode
        __self__.file_path = file_path
        __self__.http_url = http_url
        __self__.storage_container_url = storage_container_url

@pulumi.input_type
class GetPoolStartTaskUserIdentityArgs:
    auto_users: List['GetPoolStartTaskUserIdentityAutoUserArgs'] = pulumi.input_property("autoUsers")
    """
    A `auto_user` block that describes the user identity under which the start task runs.
    """
    user_name: str = pulumi.input_property("userName")
    """
    The user name to log into the registry server.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, auto_users: List['GetPoolStartTaskUserIdentityAutoUserArgs'], user_name: str) -> None:
        """
        :param List['GetPoolStartTaskUserIdentityAutoUserArgs'] auto_users: A `auto_user` block that describes the user identity under which the start task runs.
        :param str user_name: The user name to log into the registry server.
        """
        __self__.auto_users = auto_users
        __self__.user_name = user_name

@pulumi.input_type
class GetPoolStartTaskUserIdentityAutoUserArgs:
    elevation_level: str = pulumi.input_property("elevationLevel")
    """
    The elevation level of the user identity under which the start task runs.
    """
    scope: str = pulumi.input_property("scope")
    """
    The scope of the user identity under which the start task runs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, elevation_level: str, scope: str) -> None:
        """
        :param str elevation_level: The elevation level of the user identity under which the start task runs.
        :param str scope: The scope of the user identity under which the start task runs.
        """
        __self__.elevation_level = elevation_level
        __self__.scope = scope

