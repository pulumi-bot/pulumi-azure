# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AccountKeyVaultReference',
    'PoolAutoScale',
    'PoolCertificate',
    'PoolContainerConfiguration',
    'PoolContainerConfigurationContainerRegistry',
    'PoolFixedScale',
    'PoolNetworkConfiguration',
    'PoolNetworkConfigurationEndpointConfiguration',
    'PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule',
    'PoolStartTask',
    'PoolStartTaskResourceFile',
    'PoolStartTaskUserIdentity',
    'PoolStartTaskUserIdentityAutoUser',
    'PoolStorageImageReference',
    'GetAccountKeyVaultReference',
    'GetPoolAutoScale',
    'GetPoolCertificate',
    'GetPoolContainerConfiguration',
    'GetPoolContainerConfigurationContainerRegistry',
    'GetPoolFixedScale',
    'GetPoolNetworkConfiguration',
    'GetPoolNetworkConfigurationEndpointConfiguration',
    'GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule',
    'GetPoolStartTask',
    'GetPoolStartTaskResourceFile',
    'GetPoolStartTaskUserIdentity',
    'GetPoolStartTaskUserIdentityAutoUser',
    'GetPoolStorageImageReference',
]

@pulumi.output_type
class AccountKeyVaultReference(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Azure identifier of the Azure KeyVault to use.
        """
        ...

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The HTTPS URL of the Azure KeyVault to use.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolAutoScale(dict):
    @property
    @pulumi.getter(name="evaluationInterval")
    def evaluation_interval(self) -> Optional[str]:
        """
        The interval to wait before evaluating if the pool needs to be scaled. Defaults to `PT15M`.
        """
        ...

    @property
    @pulumi.getter
    def formula(self) -> str:
        """
        The autoscale formula that needs to be used for scaling the Batch pool.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolCertificate(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Batch Certificate to install on the Batch Pool, which must be inside the same Batch Account.
        """
        ...

    @property
    @pulumi.getter(name="storeLocation")
    def store_location(self) -> str:
        """
        The location of the certificate store on the compute node into which to install the certificate. Possible values are `CurrentUser` or `LocalMachine`.
        """
        ...

    @property
    @pulumi.getter(name="storeName")
    def store_name(self) -> Optional[str]:
        """
        The name of the certificate store on the compute node into which to install the certificate. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: `My`, `Root`, `CA`, `Trust`, `Disallowed`, `TrustedPeople`, `TrustedPublisher`, `AuthRoot`, `AddressBook`, but any custom store name can also be used. The default value is `My`.
        """
        ...

    @property
    @pulumi.getter
    def visibilities(self) -> Optional[List[str]]:
        """
        Which user accounts on the compute node should have access to the private data of the certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolContainerConfiguration(dict):
    @property
    @pulumi.getter(name="containerImageNames")
    def container_image_names(self) -> Optional[List[str]]:
        """
        A list of container image names to use, as would be specified by `docker pull`.
        """
        ...

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> Optional[List['outputs.PoolContainerConfigurationContainerRegistry']]:
        """
        Additional container registries from which container images can be pulled by the pool's VMs.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of container configuration. Possible value is `DockerCompatible`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolContainerConfigurationContainerRegistry(dict):
    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password to log into the registry server. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="registryServer")
    def registry_server(self) -> str:
        """
        The container registry URL. The default is "docker.io". Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The user name to log into the registry server. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolFixedScale(dict):
    @property
    @pulumi.getter(name="resizeTimeout")
    def resize_timeout(self) -> Optional[str]:
        """
        The timeout for resize operations. Defaults to `PT15M`.
        """
        ...

    @property
    @pulumi.getter(name="targetDedicatedNodes")
    def target_dedicated_nodes(self) -> Optional[float]:
        """
        The number of nodes in the Batch pool. Defaults to `1`.
        """
        ...

    @property
    @pulumi.getter(name="targetLowPriorityNodes")
    def target_low_priority_nodes(self) -> Optional[float]:
        """
        The number of low priority nodes in the Batch pool. Defaults to `0`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfiguration(dict):
    @property
    @pulumi.getter(name="endpointConfigurations")
    def endpoint_configurations(self) -> Optional[List['outputs.PoolNetworkConfigurationEndpointConfiguration']]:
        """
        A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[List[str]]:
        """
        A list of public ip ids that will be allocated to nodes. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfigurationEndpointConfiguration(dict):
    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> float:
        """
        The port number on the compute node. Acceptable values are between `1` and `65535` except for `29876`, `29877` as these are reserved. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="frontendPortRange")
    def frontend_port_range(self) -> str:
        """
        The range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes in the format of `1000-1100`. Acceptable values range between `1` and `65534` except ports from `50000` to `55000` which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Values must be a range of at least `100` nodes. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the endpoint. The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="networkSecurityGroupRules")
    def network_security_group_rules(self) -> Optional[List['outputs.PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule']]:
        """
        A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch pool is `25`. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. Set as documented in the network_security_group_rules block below. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the endpoint. Acceptable values are `TCP` and `UDP`. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The action that should be taken for a specified IP address, subnet range or tag. Acceptable values are `Allow` and `Deny`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        The priority for this rule. The value must be at least `150`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> str:
        """
        The source address prefix or tag to match for the rule. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTask(dict):
    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        The command line executed by the start task.
        """
        ...

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        A map of strings (key,value) that represents the environment variables to set in the start task.
        """
        ...

    @property
    @pulumi.getter(name="maxTaskRetryCount")
    def max_task_retry_count(self) -> Optional[float]:
        """
        The number of retry count. Defaults to `1`.
        """
        ...

    @property
    @pulumi.getter(name="resourceFiles")
    def resource_files(self) -> Optional[List['outputs.PoolStartTaskResourceFile']]:
        """
        One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
        """
        ...

    @property
    @pulumi.getter(name="userIdentity")
    def user_identity(self) -> 'outputs.PoolStartTaskUserIdentity':
        """
        A `user_identity` block that describes the user identity under which the start task runs.
        """
        ...

    @property
    @pulumi.getter(name="waitForSuccess")
    def wait_for_success(self) -> Optional[bool]:
        """
        A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskResourceFile(dict):
    @property
    @pulumi.getter(name="autoStorageContainerName")
    def auto_storage_container_name(self) -> Optional[str]:
        """
        The storage container name in the auto storage account.
        """
        ...

    @property
    @pulumi.getter(name="blobPrefix")
    def blob_prefix(self) -> Optional[str]:
        """
        The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs whose names begin with the specified prefix will be downloaded. The property is valid only when `auto_storage_container_name` or `storage_container_url` is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        """
        ...

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[str]:
        """
        The file permission mode represented as a string in octal format (e.g. `"0644"`). This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a `resource_file` which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
        """
        ...

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified, `file_path` is optional and is the directory to download the files to. In the case where `file_path` is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
        """
        ...

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> Optional[str]:
        """
        The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
        """
        ...

    @property
    @pulumi.getter(name="storageContainerUrl")
    def storage_container_url(self) -> Optional[str]:
        """
        The URL of the blob container within Azure Blob Storage. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskUserIdentity(dict):
    @property
    @pulumi.getter(name="autoUser")
    def auto_user(self) -> Optional['outputs.PoolStartTaskUserIdentityAutoUser']:
        """
        A `auto_user` block that describes the user identity under which the start task runs.
        """
        ...

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The username to be used by the Batch pool start task.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskUserIdentityAutoUser(dict):
    @property
    @pulumi.getter(name="elevationLevel")
    def elevation_level(self) -> Optional[str]:
        """
        The elevation level of the user identity under which the start task runs. Possible values are `Admin` or `NonAdmin`. Defaults to `NonAdmin`.
        """
        ...

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The scope of the user identity under which the start task runs. Possible values are `Task` or `Pool`. Defaults to `Task`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStorageImageReference(dict):
    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Specifies the ID of the Custom Image which the virtual machines should be created from. Changing this forces a new resource to be created. See [official documentation](https://docs.microsoft.com/en-us/azure/batch/batch-custom-images) for more details.
        ---
        """
        ...

    @property
    @pulumi.getter
    def offer(self) -> Optional[str]:
        """
        Specifies the offer of the image used to create the virtual machines. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        Specifies the publisher of the image used to create the virtual machines. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        Specifies the SKU of the image used to create the virtual machines. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specifies the version of the image used to create the virtual machines. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountKeyVaultReference(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Azure identifier of the Azure KeyVault reference.
        """
        ...

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The HTTPS URL of the Azure KeyVault reference.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolAutoScale(dict):
    @property
    @pulumi.getter(name="evaluationInterval")
    def evaluation_interval(self) -> str:
        """
        The interval to wait before evaluating if the pool needs to be scaled.
        """
        ...

    @property
    @pulumi.getter
    def formula(self) -> str:
        """
        The autoscale formula that needs to be used for scaling the Batch pool.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolCertificate(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The fully qualified ID of the certificate installed on the pool.
        """
        ...

    @property
    @pulumi.getter(name="storeLocation")
    def store_location(self) -> str:
        """
        The location of the certificate store on the compute node into which the certificate is installed, either `CurrentUser` or `LocalMachine`.
        """
        ...

    @property
    @pulumi.getter(name="storeName")
    def store_name(self) -> Optional[str]:
        """
        The name of the certificate store on the compute node into which the certificate is installed.
        """
        ...

    @property
    @pulumi.getter
    def visibilities(self) -> Optional[List[str]]:
        """
        Which user accounts on the compute node have access to the private data of the certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolContainerConfiguration(dict):
    @property
    @pulumi.getter(name="containerImageNames")
    def container_image_names(self) -> List[str]:
        """
        A list of container image names to use, as would be specified by `docker pull`.
        """
        ...

    @property
    @pulumi.getter(name="containerRegistries")
    def container_registries(self) -> List['outputs.GetPoolContainerConfigurationContainerRegistry']:
        """
        Additional container registries from which container images can be pulled by the pool's VMs.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of container configuration.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolContainerConfigurationContainerRegistry(dict):
    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password to log into the registry server.
        """
        ...

    @property
    @pulumi.getter(name="registryServer")
    def registry_server(self) -> str:
        """
        The container registry URL. The default is "docker.io".
        """
        ...

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The user name to log into the registry server.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolFixedScale(dict):
    @property
    @pulumi.getter(name="resizeTimeout")
    def resize_timeout(self) -> str:
        """
        The timeout for resize operations.
        """
        ...

    @property
    @pulumi.getter(name="targetDedicatedNodes")
    def target_dedicated_nodes(self) -> float:
        """
        The number of nodes in the Batch pool.
        """
        ...

    @property
    @pulumi.getter(name="targetLowPriorityNodes")
    def target_low_priority_nodes(self) -> float:
        """
        The number of low priority nodes in the Batch pool.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfiguration(dict):
    @property
    @pulumi.getter(name="endpointConfiguration")
    def endpoint_configuration(self) -> 'outputs.GetPoolNetworkConfigurationEndpointConfiguration':
        """
        The inbound NAT pools that are used to address specific ports on the individual compute node externally.
        """
        ...

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfigurationEndpointConfiguration(dict):
    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> float:
        """
        The port number on the compute node.
        """
        ...

    @property
    @pulumi.getter(name="frontendPortRange")
    def frontend_port_range(self) -> str:
        """
        The range of external ports that are used to provide inbound access to the backendPort on the individual compute nodes in the format of `1000-1100`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the endpoint.
        """
        ...

    @property
    @pulumi.getter(name="networkSecurityGroupRules")
    def network_security_group_rules(self) -> List['outputs.GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule']:
        """
        The list of network security group rules that are applied to the endpoint.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the endpoint.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule(dict):
    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The action that should be taken for a specified IP address, subnet range or tag.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        The priority for this rule.
        """
        ...

    @property
    @pulumi.getter(name="sourceAddressPrefix")
    def source_address_prefix(self) -> str:
        """
        The source address prefix or tag to match for the rule.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTask(dict):
    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        The command line executed by the start task.
        """
        ...

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        A map of strings (key,value) that represents the environment variables to set in the start task.
        """
        ...

    @property
    @pulumi.getter(name="maxTaskRetryCount")
    def max_task_retry_count(self) -> Optional[float]:
        """
        The number of retry count.
        """
        ...

    @property
    @pulumi.getter(name="resourceFiles")
    def resource_files(self) -> List['outputs.GetPoolStartTaskResourceFile']:
        """
        One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
        """
        ...

    @property
    @pulumi.getter(name="userIdentities")
    def user_identities(self) -> List['outputs.GetPoolStartTaskUserIdentity']:
        """
        A `user_identity` block that describes the user identity under which the start task runs.
        """
        ...

    @property
    @pulumi.getter(name="waitForSuccess")
    def wait_for_success(self) -> Optional[bool]:
        """
        A flag that indicates if the Batch pool should wait for the start task to be completed.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskResourceFile(dict):
    @property
    @pulumi.getter(name="autoStorageContainerName")
    def auto_storage_container_name(self) -> str:
        """
        The storage container name in the auto storage account.
        """
        ...

    @property
    @pulumi.getter(name="blobPrefix")
    def blob_prefix(self) -> str:
        """
        The blob prefix used when downloading blobs from an Azure Storage container.
        """
        ...

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> str:
        """
        The file permission mode attribute represented as a string in octal format (e.g. `"0644"`).
        """
        ...

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> str:
        """
        The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified.
        """
        ...

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> str:
        """
        The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access.
        """
        ...

    @property
    @pulumi.getter(name="storageContainerUrl")
    def storage_container_url(self) -> str:
        """
        The URL of the blob container within Azure Blob Storage.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskUserIdentity(dict):
    @property
    @pulumi.getter(name="autoUsers")
    def auto_users(self) -> List['outputs.GetPoolStartTaskUserIdentityAutoUser']:
        """
        A `auto_user` block that describes the user identity under which the start task runs.
        """
        ...

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The user name to log into the registry server.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskUserIdentityAutoUser(dict):
    @property
    @pulumi.getter(name="elevationLevel")
    def elevation_level(self) -> str:
        """
        The elevation level of the user identity under which the start task runs.
        """
        ...

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        The scope of the user identity under which the start task runs.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStorageImageReference(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The fully qualified ID of the certificate installed on the pool.
        """
        ...

    @property
    @pulumi.getter
    def offer(self) -> str:
        ...

    @property
    @pulumi.getter
    def publisher(self) -> str:
        ...

    @property
    @pulumi.getter
    def sku(self) -> str:
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


