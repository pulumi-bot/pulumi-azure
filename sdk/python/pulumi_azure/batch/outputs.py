# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class AccountKeyVaultReference(dict):
    id: str = pulumi.output_property("id")
    """
    The Azure identifier of the Azure KeyVault to use.
    """
    url: str = pulumi.output_property("url")
    """
    The HTTPS URL of the Azure KeyVault to use.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolAutoScale(dict):
    evaluation_interval: Optional[str] = pulumi.output_property("evaluationInterval")
    """
    The interval to wait before evaluating if the pool needs to be scaled. Defaults to `PT15M`.
    """
    formula: str = pulumi.output_property("formula")
    """
    The autoscale formula that needs to be used for scaling the Batch pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolCertificate(dict):
    id: str = pulumi.output_property("id")
    """
    The ID of the Batch Certificate to install on the Batch Pool, which must be inside the same Batch Account.
    """
    store_location: str = pulumi.output_property("storeLocation")
    """
    The location of the certificate store on the compute node into which to install the certificate. Possible values are `CurrentUser` or `LocalMachine`.
    """
    store_name: Optional[str] = pulumi.output_property("storeName")
    """
    The name of the certificate store on the compute node into which to install the certificate. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: `My`, `Root`, `CA`, `Trust`, `Disallowed`, `TrustedPeople`, `TrustedPublisher`, `AuthRoot`, `AddressBook`, but any custom store name can also be used. The default value is `My`.
    """
    visibilities: Optional[List[str]] = pulumi.output_property("visibilities")
    """
    Which user accounts on the compute node should have access to the private data of the certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolContainerConfiguration(dict):
    container_image_names: Optional[List[str]] = pulumi.output_property("containerImageNames")
    """
    A list of container image names to use, as would be specified by `docker pull`.
    """
    container_registries: Optional[List['outputs.PoolContainerConfigurationContainerRegistry']] = pulumi.output_property("containerRegistries")
    """
    Additional container registries from which container images can be pulled by the pool's VMs.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of container configuration. Possible value is `DockerCompatible`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolContainerConfigurationContainerRegistry(dict):
    password: str = pulumi.output_property("password")
    """
    The password to log into the registry server. Changing this forces a new resource to be created.
    """
    registry_server: str = pulumi.output_property("registryServer")
    """
    The container registry URL. The default is "docker.io". Changing this forces a new resource to be created.
    """
    user_name: str = pulumi.output_property("userName")
    """
    The user name to log into the registry server. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolFixedScale(dict):
    resize_timeout: Optional[str] = pulumi.output_property("resizeTimeout")
    """
    The timeout for resize operations. Defaults to `PT15M`.
    """
    target_dedicated_nodes: Optional[float] = pulumi.output_property("targetDedicatedNodes")
    """
    The number of nodes in the Batch pool. Defaults to `1`.
    """
    target_low_priority_nodes: Optional[float] = pulumi.output_property("targetLowPriorityNodes")
    """
    The number of low priority nodes in the Batch pool. Defaults to `0`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfiguration(dict):
    endpoint_configurations: Optional[List['outputs.PoolNetworkConfigurationEndpointConfiguration']] = pulumi.output_property("endpointConfigurations")
    """
    A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
    """
    public_ips: Optional[List[str]] = pulumi.output_property("publicIps")
    """
    A list of public ip ids that will be allocated to nodes. Changing this forces a new resource to be created.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfigurationEndpointConfiguration(dict):
    backend_port: float = pulumi.output_property("backendPort")
    """
    The port number on the compute node. Acceptable values are between `1` and `65535` except for `29876`, `29877` as these are reserved. Changing this forces a new resource to be created.
    """
    frontend_port_range: str = pulumi.output_property("frontendPortRange")
    """
    The range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes in the format of `1000-1100`. Acceptable values range between `1` and `65534` except ports from `50000` to `55000` which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Values must be a range of at least `100` nodes. Changing this forces a new resource to be created.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the endpoint. The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. Changing this forces a new resource to be created.
    """
    network_security_group_rules: Optional[List['outputs.PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule']] = pulumi.output_property("networkSecurityGroupRules")
    """
    A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch pool is `25`. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. Set as documented in the network_security_group_rules block below. Changing this forces a new resource to be created.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol of the endpoint. Acceptable values are `TCP` and `UDP`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule(dict):
    access: str = pulumi.output_property("access")
    """
    The action that should be taken for a specified IP address, subnet range or tag. Acceptable values are `Allow` and `Deny`. Changing this forces a new resource to be created.
    """
    priority: float = pulumi.output_property("priority")
    """
    The priority for this rule. The value must be at least `150`. Changing this forces a new resource to be created.
    """
    source_address_prefix: str = pulumi.output_property("sourceAddressPrefix")
    """
    The source address prefix or tag to match for the rule. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTask(dict):
    command_line: str = pulumi.output_property("commandLine")
    """
    The command line executed by the start task.
    """
    environment: Optional[Dict[str, str]] = pulumi.output_property("environment")
    """
    A map of strings (key,value) that represents the environment variables to set in the start task.
    """
    max_task_retry_count: Optional[float] = pulumi.output_property("maxTaskRetryCount")
    """
    The number of retry count. Defaults to `1`.
    """
    resource_files: Optional[List['outputs.PoolStartTaskResourceFile']] = pulumi.output_property("resourceFiles")
    """
    One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
    """
    user_identity: 'outputs.PoolStartTaskUserIdentity' = pulumi.output_property("userIdentity")
    """
    A `user_identity` block that describes the user identity under which the start task runs.
    """
    wait_for_success: Optional[bool] = pulumi.output_property("waitForSuccess")
    """
    A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskResourceFile(dict):
    auto_storage_container_name: Optional[str] = pulumi.output_property("autoStorageContainerName")
    """
    The storage container name in the auto storage account.
    """
    blob_prefix: Optional[str] = pulumi.output_property("blobPrefix")
    """
    The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs whose names begin with the specified prefix will be downloaded. The property is valid only when `auto_storage_container_name` or `storage_container_url` is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
    """
    file_mode: Optional[str] = pulumi.output_property("fileMode")
    """
    The file permission mode represented as a string in octal format (e.g. `"0644"`). This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a `resource_file` which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
    """
    file_path: Optional[str] = pulumi.output_property("filePath")
    """
    The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified, `file_path` is optional and is the directory to download the files to. In the case where `file_path` is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
    """
    http_url: Optional[str] = pulumi.output_property("httpUrl")
    """
    The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
    """
    storage_container_url: Optional[str] = pulumi.output_property("storageContainerUrl")
    """
    The URL of the blob container within Azure Blob Storage. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskUserIdentity(dict):
    auto_user: Optional['outputs.PoolStartTaskUserIdentityAutoUser'] = pulumi.output_property("autoUser")
    """
    A `auto_user` block that describes the user identity under which the start task runs.
    """
    user_name: Optional[str] = pulumi.output_property("userName")
    """
    The username to be used by the Batch pool start task.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStartTaskUserIdentityAutoUser(dict):
    elevation_level: Optional[str] = pulumi.output_property("elevationLevel")
    """
    The elevation level of the user identity under which the start task runs. Possible values are `Admin` or `NonAdmin`. Defaults to `NonAdmin`.
    """
    scope: Optional[str] = pulumi.output_property("scope")
    """
    The scope of the user identity under which the start task runs. Possible values are `Task` or `Pool`. Defaults to `Task`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PoolStorageImageReference(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies the ID of the Custom Image which the virtual machines should be created from. Changing this forces a new resource to be created. See [official documentation](https://docs.microsoft.com/en-us/azure/batch/batch-custom-images) for more details.
    ---
    """
    offer: Optional[str] = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    publisher: Optional[str] = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    sku: Optional[str] = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machines. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountKeyVaultReference(dict):
    id: str = pulumi.output_property("id")
    """
    The Azure identifier of the Azure KeyVault reference.
    """
    url: str = pulumi.output_property("url")
    """
    The HTTPS URL of the Azure KeyVault reference.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolAutoScale(dict):
    evaluation_interval: str = pulumi.output_property("evaluationInterval")
    """
    The interval to wait before evaluating if the pool needs to be scaled.
    """
    formula: str = pulumi.output_property("formula")
    """
    The autoscale formula that needs to be used for scaling the Batch pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolCertificate(dict):
    id: str = pulumi.output_property("id")
    """
    The fully qualified ID of the certificate installed on the pool.
    """
    store_location: str = pulumi.output_property("storeLocation")
    """
    The location of the certificate store on the compute node into which the certificate is installed, either `CurrentUser` or `LocalMachine`.
    """
    store_name: Optional[str] = pulumi.output_property("storeName")
    """
    The name of the certificate store on the compute node into which the certificate is installed.
    """
    visibilities: Optional[List[str]] = pulumi.output_property("visibilities")
    """
    Which user accounts on the compute node have access to the private data of the certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolContainerConfiguration(dict):
    container_registries: List['outputs.GetPoolContainerConfigurationContainerRegistry'] = pulumi.output_property("containerRegistries")
    """
    Additional container registries from which container images can be pulled by the pool's VMs.
    """
    type: str = pulumi.output_property("type")
    """
    The type of container configuration.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolContainerConfigurationContainerRegistry(dict):
    password: str = pulumi.output_property("password")
    """
    The password to log into the registry server.
    """
    registry_server: str = pulumi.output_property("registryServer")
    """
    The container registry URL. The default is "docker.io".
    """
    user_name: str = pulumi.output_property("userName")
    """
    The user name to log into the registry server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolFixedScale(dict):
    resize_timeout: str = pulumi.output_property("resizeTimeout")
    """
    The timeout for resize operations.
    """
    target_dedicated_nodes: float = pulumi.output_property("targetDedicatedNodes")
    """
    The number of nodes in the Batch pool.
    """
    target_low_priority_nodes: float = pulumi.output_property("targetLowPriorityNodes")
    """
    The number of low priority nodes in the Batch pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfiguration(dict):
    endpoint_configuration: 'outputs.GetPoolNetworkConfigurationEndpointConfiguration' = pulumi.output_property("endpointConfiguration")
    """
    The inbound NAT pools that are used to address specific ports on the individual compute node externally.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfigurationEndpointConfiguration(dict):
    backend_port: float = pulumi.output_property("backendPort")
    """
    The port number on the compute node.
    """
    frontend_port_range: str = pulumi.output_property("frontendPortRange")
    """
    The range of external ports that are used to provide inbound access to the backendPort on the individual compute nodes in the format of `1000-1100`.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the endpoint.
    """
    network_security_group_rules: List['outputs.GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule'] = pulumi.output_property("networkSecurityGroupRules")
    """
    The list of network security group rules that are applied to the endpoint.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The protocol of the endpoint.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRule(dict):
    access: str = pulumi.output_property("access")
    """
    The action that should be taken for a specified IP address, subnet range or tag.
    """
    priority: float = pulumi.output_property("priority")
    """
    The priority for this rule.
    """
    source_address_prefix: str = pulumi.output_property("sourceAddressPrefix")
    """
    The source address prefix or tag to match for the rule.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTask(dict):
    command_line: str = pulumi.output_property("commandLine")
    """
    The command line executed by the start task.
    """
    environment: Optional[Dict[str, str]] = pulumi.output_property("environment")
    """
    A map of strings (key,value) that represents the environment variables to set in the start task.
    """
    max_task_retry_count: Optional[float] = pulumi.output_property("maxTaskRetryCount")
    """
    The number of retry count.
    """
    resource_files: List['outputs.GetPoolStartTaskResourceFile'] = pulumi.output_property("resourceFiles")
    """
    One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
    """
    user_identities: List['outputs.GetPoolStartTaskUserIdentity'] = pulumi.output_property("userIdentities")
    """
    A `user_identity` block that describes the user identity under which the start task runs.
    """
    wait_for_success: Optional[bool] = pulumi.output_property("waitForSuccess")
    """
    A flag that indicates if the Batch pool should wait for the start task to be completed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskResourceFile(dict):
    auto_storage_container_name: str = pulumi.output_property("autoStorageContainerName")
    """
    The storage container name in the auto storage account.
    """
    blob_prefix: str = pulumi.output_property("blobPrefix")
    """
    The blob prefix used when downloading blobs from an Azure Storage container.
    """
    file_mode: str = pulumi.output_property("fileMode")
    """
    The file permission mode attribute represented as a string in octal format (e.g. `"0644"`).
    """
    file_path: str = pulumi.output_property("filePath")
    """
    The location on the compute node to which to download the file, relative to the task's working directory. If the `http_url` property is specified, the `file_path` is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the `auto_storage_container_name` or `storage_container_url` property is specified.
    """
    http_url: str = pulumi.output_property("httpUrl")
    """
    The URL of the file to download. If the URL is Azure Blob Storage, it must be readable using anonymous access.
    """
    storage_container_url: str = pulumi.output_property("storageContainerUrl")
    """
    The URL of the blob container within Azure Blob Storage.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskUserIdentity(dict):
    auto_users: List['outputs.GetPoolStartTaskUserIdentityAutoUser'] = pulumi.output_property("autoUsers")
    """
    A `auto_user` block that describes the user identity under which the start task runs.
    """
    user_name: str = pulumi.output_property("userName")
    """
    The user name to log into the registry server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStartTaskUserIdentityAutoUser(dict):
    elevation_level: str = pulumi.output_property("elevationLevel")
    """
    The elevation level of the user identity under which the start task runs.
    """
    scope: str = pulumi.output_property("scope")
    """
    The scope of the user identity under which the start task runs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPoolStorageImageReference(dict):
    id: str = pulumi.output_property("id")
    """
    The fully qualified ID of the certificate installed on the pool.
    """
    offer: str = pulumi.output_property("offer")
    publisher: str = pulumi.output_property("publisher")
    sku: str = pulumi.output_property("sku")
    version: str = pulumi.output_property("version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


