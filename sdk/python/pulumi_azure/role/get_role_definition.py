# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GetRoleDefinitionResult',
    'AwaitableGetRoleDefinitionResult',
    'get_role_definition',
]

warnings.warn("azure.role.getRoleDefinition has been deprecated in favor of azure.authorization.getRoleDefinition", DeprecationWarning)

@pulumi.output_type
class _GetRoleDefinitionResult(dict):
    assignable_scopes: List[str] = pulumi.property("assignableScopes")
    description: str = pulumi.property("description")
    id: str = pulumi.property("id")
    name: str = pulumi.property("name")
    permissions: List['outputs.GetRoleDefinitionPermissionResult'] = pulumi.property("permissions")
    role_definition_id: str = pulumi.property("roleDefinitionId")
    scope: Optional[str] = pulumi.property("scope")
    type: str = pulumi.property("type")


class GetRoleDefinitionResult:
    """
    A collection of values returned by getRoleDefinition.
    """
    def __init__(__self__, assignable_scopes=None, description=None, id=None, name=None, permissions=None, role_definition_id=None, scope=None, type=None):
        if assignable_scopes and not isinstance(assignable_scopes, list):
            raise TypeError("Expected argument 'assignable_scopes' to be a list")
        __self__.assignable_scopes = assignable_scopes
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        __self__.permissions = permissions
        if role_definition_id and not isinstance(role_definition_id, str):
            raise TypeError("Expected argument 'role_definition_id' to be a str")
        __self__.role_definition_id = role_definition_id
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        __self__.scope = scope
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type


class AwaitableGetRoleDefinitionResult(GetRoleDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleDefinitionResult(
            assignable_scopes=self.assignable_scopes,
            description=self.description,
            id=self.id,
            name=self.name,
            permissions=self.permissions,
            role_definition_id=self.role_definition_id,
            scope=self.scope,
            type=self.type)


def get_role_definition(name: Optional[str] = None,
                        role_definition_id: Optional[str] = None,
                        scope: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleDefinitionResult:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("get_role_definition is deprecated: azure.role.getRoleDefinition has been deprecated in favor of azure.authorization.getRoleDefinition")
    __args__ = dict()
    __args__['name'] = name
    __args__['roleDefinitionId'] = role_definition_id
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure:role/getRoleDefinition:getRoleDefinition', __args__, opts=opts, typ=_GetRoleDefinitionResult).value

    return AwaitableGetRoleDefinitionResult(
        assignable_scopes=_utilities.get_dict_value(__ret__, 'assignableScopes'),
        description=_utilities.get_dict_value(__ret__, 'description'),
        id=_utilities.get_dict_value(__ret__, 'id'),
        name=_utilities.get_dict_value(__ret__, 'name'),
        permissions=_utilities.get_dict_value(__ret__, 'permissions'),
        role_definition_id=_utilities.get_dict_value(__ret__, 'roleDefinitionId'),
        scope=_utilities.get_dict_value(__ret__, 'scope'),
        type=_utilities.get_dict_value(__ret__, 'type'))
