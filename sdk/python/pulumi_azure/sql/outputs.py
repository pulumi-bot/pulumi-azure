# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DatabaseExtendedAuditingPolicy',
    'DatabaseImport',
    'DatabaseThreatDetectionPolicy',
    'FailoverGroupPartnerServer',
    'FailoverGroupReadWriteEndpointFailoverPolicy',
    'FailoverGroupReadonlyEndpointFailoverPolicy',
    'SqlServerExtendedAuditingPolicy',
    'SqlServerIdentity',
    'GetServerIdentity',
]

@pulumi.output_type
class DatabaseExtendedAuditingPolicy(dict):
    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[float]:
        """
        Specifies the number of days to retain logs for in the storage account.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> str:
        """
        Specifies the access key to use for the auditing storage account.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKeyIsSecondary")
    def storage_account_access_key_is_secondary(self) -> Optional[bool]:
        """
        Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> str:
        """
        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseImport(dict):
    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> str:
        """
        Specifies the name of the SQL administrator.
        """
        ...

    @property
    @pulumi.getter(name="administratorLoginPassword")
    def administrator_login_password(self) -> str:
        """
        Specifies the password of the SQL administrator.
        """
        ...

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        """
        Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
        """
        ...

    @property
    @pulumi.getter(name="operationMode")
    def operation_mode(self) -> Optional[str]:
        """
        Specifies the type of import operation being performed. The only allowable value is `Import`.
        """
        ...

    @property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> str:
        """
        Specifies the access key for the storage account.
        """
        ...

    @property
    @pulumi.getter(name="storageKeyType")
    def storage_key_type(self) -> str:
        """
        Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
        """
        ...

    @property
    @pulumi.getter(name="storageUri")
    def storage_uri(self) -> str:
        """
        Specifies the blob URI of the .bacpac file.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseThreatDetectionPolicy(dict):
    @property
    @pulumi.getter(name="disabledAlerts")
    def disabled_alerts(self) -> Optional[List[str]]:
        """
        Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
        """
        ...

    @property
    @pulumi.getter(name="emailAccountAdmins")
    def email_account_admins(self) -> Optional[str]:
        """
        Should the account administrators be emailed when this alert is triggered?
        """
        ...

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[List[str]]:
        """
        A list of email addresses which alerts should be sent to.
        """
        ...

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[float]:
        """
        Specifies the number of days to keep in the Threat Detection audit logs.
        """
        ...

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> Optional[str]:
        """
        Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
        """
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> Optional[str]:
        """
        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
        """
        ...

    @property
    @pulumi.getter(name="useServerDefault")
    def use_server_default(self) -> Optional[str]:
        """
        Should the default server policy be used? Defaults to `Disabled`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupPartnerServer(dict):
    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the SQL server ID
        """
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        the location of the failover group.
        """
        ...

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        local replication role of the failover group instance.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupReadWriteEndpointFailoverPolicy(dict):
    @property
    @pulumi.getter(name="graceMinutes")
    def grace_minutes(self) -> Optional[float]:
        """
        Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        """
        ...

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        the failover mode. Possible values are `Manual`, `Automatic`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupReadonlyEndpointFailoverPolicy(dict):
    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlServerExtendedAuditingPolicy(dict):
    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[float]:
        """
        (Optional) Specifies the number of days to retain logs for in the storage account.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> str:
        """
        (Required)  Specifies the access key to use for the auditing storage account.
        """
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKeyIsSecondary")
    def storage_account_access_key_is_secondary(self) -> Optional[bool]:
        """
        (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> str:
        """
        (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlServerIdentity(dict):
    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        """
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServerIdentity(dict):
    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The ID of the Principal (Client) in Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The ID of the Azure Active Directory Tenant.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The identity type of the SQL Server.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


