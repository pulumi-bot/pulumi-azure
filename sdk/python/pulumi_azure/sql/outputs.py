# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DatabaseExtendedAuditingPolicy',
    'DatabaseImport',
    'DatabaseThreatDetectionPolicy',
    'FailoverGroupPartnerServer',
    'FailoverGroupReadWriteEndpointFailoverPolicy',
    'FailoverGroupReadonlyEndpointFailoverPolicy',
    'SqlServerExtendedAuditingPolicy',
    'SqlServerIdentity',
    'GetServerIdentity',
]

@pulumi.output_type
class DatabaseExtendedAuditingPolicy(dict):
    retention_in_days: Optional[float] = pulumi.output_property("retentionInDays")
    """
    Specifies the number of days to retain logs for in the storage account.
    """
    storage_account_access_key: str = pulumi.output_property("storageAccountAccessKey")
    """
    Specifies the access key to use for the auditing storage account.
    """
    storage_account_access_key_is_secondary: Optional[bool] = pulumi.output_property("storageAccountAccessKeyIsSecondary")
    """
    Specifies whether `storage_account_access_key` value is the storage's secondary key.
    """
    storage_endpoint: str = pulumi.output_property("storageEndpoint")
    """
    Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseImport(dict):
    administrator_login: str = pulumi.output_property("administratorLogin")
    """
    Specifies the name of the SQL administrator.
    """
    administrator_login_password: str = pulumi.output_property("administratorLoginPassword")
    """
    Specifies the password of the SQL administrator.
    """
    authentication_type: str = pulumi.output_property("authenticationType")
    """
    Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
    """
    operation_mode: Optional[str] = pulumi.output_property("operationMode")
    """
    Specifies the type of import operation being performed. The only allowable value is `Import`.
    """
    storage_key: str = pulumi.output_property("storageKey")
    """
    Specifies the access key for the storage account.
    """
    storage_key_type: str = pulumi.output_property("storageKeyType")
    """
    Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
    """
    storage_uri: str = pulumi.output_property("storageUri")
    """
    Specifies the blob URI of the .bacpac file.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseThreatDetectionPolicy(dict):
    disabled_alerts: Optional[List[str]] = pulumi.output_property("disabledAlerts")
    """
    Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
    """
    email_account_admins: Optional[str] = pulumi.output_property("emailAccountAdmins")
    """
    Should the account administrators be emailed when this alert is triggered?
    """
    email_addresses: Optional[List[str]] = pulumi.output_property("emailAddresses")
    """
    A list of email addresses which alerts should be sent to.
    """
    retention_days: Optional[float] = pulumi.output_property("retentionDays")
    """
    Specifies the number of days to keep in the Threat Detection audit logs.
    """
    state: Optional[str] = pulumi.output_property("state")
    """
    The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
    """
    storage_account_access_key: Optional[str] = pulumi.output_property("storageAccountAccessKey")
    """
    Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
    """
    storage_endpoint: Optional[str] = pulumi.output_property("storageEndpoint")
    """
    Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
    """
    use_server_default: Optional[str] = pulumi.output_property("useServerDefault")
    """
    Should the default server policy be used? Defaults to `Disabled`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupPartnerServer(dict):
    id: str = pulumi.output_property("id")
    """
    the SQL server ID
    """
    location: Optional[str] = pulumi.output_property("location")
    """
    the location of the failover group.
    """
    role: Optional[str] = pulumi.output_property("role")
    """
    local replication role of the failover group instance.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupReadWriteEndpointFailoverPolicy(dict):
    grace_minutes: Optional[float] = pulumi.output_property("graceMinutes")
    """
    Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
    """
    mode: str = pulumi.output_property("mode")
    """
    the failover mode. Possible values are `Manual`, `Automatic`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FailoverGroupReadonlyEndpointFailoverPolicy(dict):
    mode: str = pulumi.output_property("mode")
    """
    Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlServerExtendedAuditingPolicy(dict):
    retention_in_days: Optional[float] = pulumi.output_property("retentionInDays")
    """
    (Optional) Specifies the number of days to retain logs for in the storage account.
    """
    storage_account_access_key: str = pulumi.output_property("storageAccountAccessKey")
    """
    (Required)  Specifies the access key to use for the auditing storage account.
    """
    storage_account_access_key_is_secondary: Optional[bool] = pulumi.output_property("storageAccountAccessKeyIsSecondary")
    """
    (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
    """
    storage_endpoint: str = pulumi.output_property("storageEndpoint")
    """
    (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SqlServerIdentity(dict):
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID for the Service Principal associated with the Identity of this SQL Server.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServerIdentity(dict):
    principal_id: str = pulumi.output_property("principalId")
    """
    The ID of the Principal (Client) in Azure Active Directory.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The ID of the Azure Active Directory Tenant.
    """
    type: str = pulumi.output_property("type")
    """
    The identity type of the SQL Server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


