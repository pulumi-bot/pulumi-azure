# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'DatabaseExtendedAuditingPolicyArgs',
    'DatabaseImportArgs',
    'DatabaseThreatDetectionPolicyArgs',
    'FailoverGroupPartnerServerArgs',
    'FailoverGroupReadWriteEndpointFailoverPolicyArgs',
    'FailoverGroupReadonlyEndpointFailoverPolicyArgs',
    'SqlServerExtendedAuditingPolicyArgs',
    'SqlServerIdentityArgs',
]

@pulumi.input_type
class DatabaseExtendedAuditingPolicyArgs:
    def __init__(__self__, *,
                 storage_account_access_key: pulumi.Input[str],
                 storage_endpoint: pulumi.Input[str],
                 retention_in_days: Optional[pulumi.Input[float]] = None,
                 storage_account_access_key_is_secondary: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] storage_account_access_key: Specifies the access key to use for the auditing storage account.
        :param pulumi.Input[str] storage_endpoint: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        :param pulumi.Input[float] retention_in_days: Specifies the number of days to retain logs for in the storage account.
        :param pulumi.Input[bool] storage_account_access_key_is_secondary: Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        pulumi.set(__self__, "storageAccountAccessKey", storage_account_access_key)
        pulumi.set(__self__, "storageEndpoint", storage_endpoint)
        pulumi.set(__self__, "retentionInDays", retention_in_days)
        pulumi.set(__self__, "storageAccountAccessKeyIsSecondary", storage_account_access_key_is_secondary)

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> pulumi.Input[str]:
        """
        Specifies the access key to use for the auditing storage account.
        """
        ...

    @storage_account_access_key.setter
    def storage_account_access_key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> pulumi.Input[str]:
        """
        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        """
        ...

    @storage_endpoint.setter
    def storage_endpoint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the number of days to retain logs for in the storage account.
        """
        ...

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKeyIsSecondary")
    def storage_account_access_key_is_secondary(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        ...

    @storage_account_access_key_is_secondary.setter
    def storage_account_access_key_is_secondary(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class DatabaseImportArgs:
    def __init__(__self__, *,
                 administrator_login: pulumi.Input[str],
                 administrator_login_password: pulumi.Input[str],
                 authentication_type: pulumi.Input[str],
                 storage_key: pulumi.Input[str],
                 storage_key_type: pulumi.Input[str],
                 storage_uri: pulumi.Input[str],
                 operation_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] administrator_login: Specifies the name of the SQL administrator.
        :param pulumi.Input[str] administrator_login_password: Specifies the password of the SQL administrator.
        :param pulumi.Input[str] authentication_type: Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
        :param pulumi.Input[str] storage_key: Specifies the access key for the storage account.
        :param pulumi.Input[str] storage_key_type: Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
        :param pulumi.Input[str] storage_uri: Specifies the blob URI of the .bacpac file.
        :param pulumi.Input[str] operation_mode: Specifies the type of import operation being performed. The only allowable value is `Import`.
        """
        pulumi.set(__self__, "administratorLogin", administrator_login)
        pulumi.set(__self__, "administratorLoginPassword", administrator_login_password)
        pulumi.set(__self__, "authenticationType", authentication_type)
        pulumi.set(__self__, "storageKey", storage_key)
        pulumi.set(__self__, "storageKeyType", storage_key_type)
        pulumi.set(__self__, "storageUri", storage_uri)
        pulumi.set(__self__, "operationMode", operation_mode)

    @property
    @pulumi.getter(name="administratorLogin")
    def administrator_login(self) -> pulumi.Input[str]:
        """
        Specifies the name of the SQL administrator.
        """
        ...

    @administrator_login.setter
    def administrator_login(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="administratorLoginPassword")
    def administrator_login_password(self) -> pulumi.Input[str]:
        """
        Specifies the password of the SQL administrator.
        """
        ...

    @administrator_login_password.setter
    def administrator_login_password(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[str]:
        """
        Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
        """
        ...

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storageKey")
    def storage_key(self) -> pulumi.Input[str]:
        """
        Specifies the access key for the storage account.
        """
        ...

    @storage_key.setter
    def storage_key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storageKeyType")
    def storage_key_type(self) -> pulumi.Input[str]:
        """
        Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
        """
        ...

    @storage_key_type.setter
    def storage_key_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storageUri")
    def storage_uri(self) -> pulumi.Input[str]:
        """
        Specifies the blob URI of the .bacpac file.
        """
        ...

    @storage_uri.setter
    def storage_uri(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="operationMode")
    def operation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of import operation being performed. The only allowable value is `Import`.
        """
        ...

    @operation_mode.setter
    def operation_mode(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class DatabaseThreatDetectionPolicyArgs:
    def __init__(__self__, *,
                 disabled_alerts: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 email_account_admins: Optional[pulumi.Input[str]] = None,
                 email_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 retention_days: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storage_account_access_key: Optional[pulumi.Input[str]] = None,
                 storage_endpoint: Optional[pulumi.Input[str]] = None,
                 use_server_default: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] disabled_alerts: Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
        :param pulumi.Input[str] email_account_admins: Should the account administrators be emailed when this alert is triggered?
        :param pulumi.Input[List[pulumi.Input[str]]] email_addresses: A list of email addresses which alerts should be sent to.
        :param pulumi.Input[float] retention_days: Specifies the number of days to keep in the Threat Detection audit logs.
        :param pulumi.Input[str] state: The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
        :param pulumi.Input[str] storage_account_access_key: Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
        :param pulumi.Input[str] storage_endpoint: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
        :param pulumi.Input[str] use_server_default: Should the default server policy be used? Defaults to `Disabled`.
        """
        pulumi.set(__self__, "disabledAlerts", disabled_alerts)
        pulumi.set(__self__, "emailAccountAdmins", email_account_admins)
        pulumi.set(__self__, "emailAddresses", email_addresses)
        pulumi.set(__self__, "retentionDays", retention_days)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storageAccountAccessKey", storage_account_access_key)
        pulumi.set(__self__, "storageEndpoint", storage_endpoint)
        pulumi.set(__self__, "useServerDefault", use_server_default)

    @property
    @pulumi.getter(name="disabledAlerts")
    def disabled_alerts(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
        """
        ...

    @disabled_alerts.setter
    def disabled_alerts(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="emailAccountAdmins")
    def email_account_admins(self) -> Optional[pulumi.Input[str]]:
        """
        Should the account administrators be emailed when this alert is triggered?
        """
        ...

    @email_account_admins.setter
    def email_account_admins(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of email addresses which alerts should be sent to.
        """
        ...

    @email_addresses.setter
    def email_addresses(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the number of days to keep in the Threat Detection audit logs.
        """
        ...

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
        """
        ...

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
        """
        ...

    @storage_account_access_key.setter
    def storage_account_access_key(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
        """
        ...

    @storage_endpoint.setter
    def storage_endpoint(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="useServerDefault")
    def use_server_default(self) -> Optional[pulumi.Input[str]]:
        """
        Should the default server policy be used? Defaults to `Disabled`.
        """
        ...

    @use_server_default.setter
    def use_server_default(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class FailoverGroupPartnerServerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: the SQL server ID
        :param pulumi.Input[str] location: the location of the failover group.
        :param pulumi.Input[str] role: local replication role of the failover group instance.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        the SQL server ID
        """
        ...

    @id.setter
    def id(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        the location of the failover group.
        """
        ...

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        local replication role of the failover group instance.
        """
        ...

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class FailoverGroupReadWriteEndpointFailoverPolicyArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 grace_minutes: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] mode: the failover mode. Possible values are `Manual`, `Automatic`
        :param pulumi.Input[float] grace_minutes: Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "graceMinutes", grace_minutes)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        the failover mode. Possible values are `Manual`, `Automatic`
        """
        ...

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="graceMinutes")
    def grace_minutes(self) -> Optional[pulumi.Input[float]]:
        """
        Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        """
        ...

    @grace_minutes.setter
    def grace_minutes(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class FailoverGroupReadonlyEndpointFailoverPolicyArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mode: Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        """
        ...

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SqlServerExtendedAuditingPolicyArgs:
    def __init__(__self__, *,
                 storage_account_access_key: pulumi.Input[str],
                 storage_endpoint: pulumi.Input[str],
                 retention_in_days: Optional[pulumi.Input[float]] = None,
                 storage_account_access_key_is_secondary: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] storage_account_access_key: (Required)  Specifies the access key to use for the auditing storage account.
        :param pulumi.Input[str] storage_endpoint: (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        :param pulumi.Input[float] retention_in_days: (Optional) Specifies the number of days to retain logs for in the storage account.
        :param pulumi.Input[bool] storage_account_access_key_is_secondary: (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        pulumi.set(__self__, "storageAccountAccessKey", storage_account_access_key)
        pulumi.set(__self__, "storageEndpoint", storage_endpoint)
        pulumi.set(__self__, "retentionInDays", retention_in_days)
        pulumi.set(__self__, "storageAccountAccessKeyIsSecondary", storage_account_access_key_is_secondary)

    @property
    @pulumi.getter(name="storageAccountAccessKey")
    def storage_account_access_key(self) -> pulumi.Input[str]:
        """
        (Required)  Specifies the access key to use for the auditing storage account.
        """
        ...

    @storage_account_access_key.setter
    def storage_account_access_key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storageEndpoint")
    def storage_endpoint(self) -> pulumi.Input[str]:
        """
        (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        """
        ...

    @storage_endpoint.setter
    def storage_endpoint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[float]]:
        """
        (Optional) Specifies the number of days to retain logs for in the storage account.
        """
        ...

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="storageAccountAccessKeyIsSecondary")
    def storage_account_access_key_is_secondary(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        """
        ...

    @storage_account_access_key_is_secondary.setter
    def storage_account_access_key_is_secondary(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class SqlServerIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        :param pulumi.Input[str] tenant_id: The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "principalId", principal_id)
        pulumi.set(__self__, "tenantId", tenant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        """
        ...

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        """
        ...

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        ...


