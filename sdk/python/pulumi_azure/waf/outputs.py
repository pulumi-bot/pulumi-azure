# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'PolicyCustomRule',
    'PolicyCustomRuleMatchCondition',
    'PolicyCustomRuleMatchConditionMatchVariable',
    'PolicyManagedRules',
    'PolicyManagedRulesExclusion',
    'PolicyManagedRulesManagedRuleSet',
    'PolicyManagedRulesManagedRuleSetRuleGroupOverride',
    'PolicyPolicySettings',
]

@pulumi.output_type
class PolicyCustomRule(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Type of action.
        """
        ...

    @property
    @pulumi.getter(name="matchConditions")
    def match_conditions(self) -> List['outputs.PolicyCustomRuleMatchCondition']:
        """
        One or more `match_conditions` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Gets name of the resource that is unique within a policy. This name can be used to access the resource.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
        """
        ...

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Describes the type of rule.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyCustomRuleMatchCondition(dict):
    @property
    @pulumi.getter(name="matchValues")
    def match_values(self) -> List[str]:
        """
        A list of match values.
        """
        ...

    @property
    @pulumi.getter(name="matchVariables")
    def match_variables(self) -> List['outputs.PolicyCustomRuleMatchConditionMatchVariable']:
        """
        One or more `match_variables` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="negationCondition")
    def negation_condition(self) -> Optional[bool]:
        """
        Describes if this is negate condition or not
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Describes operator to be matched.
        """
        ...

    @property
    @pulumi.getter
    def transforms(self) -> Optional[List[str]]:
        """
        A list of transformations to do before the match is attempted.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyCustomRuleMatchConditionMatchVariable(dict):
    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        """
        Describes field of the matchVariable collection
        """
        ...

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> str:
        """
        The name of the Match Variable
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyManagedRules(dict):
    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List['outputs.PolicyManagedRulesExclusion']]:
        """
        One or more `exclusion` block defined below.
        """
        ...

    @property
    @pulumi.getter(name="managedRuleSets")
    def managed_rule_sets(self) -> List['outputs.PolicyManagedRulesManagedRuleSet']:
        """
        One or more `managed_rule_set` block defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyManagedRulesExclusion(dict):
    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        The name of the Match Variable. Possible values: `RequestArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> str:
        """
        Describes field of the matchVariable collection.
        """
        ...

    @property
    @pulumi.getter(name="selectorMatchOperator")
    def selector_match_operator(self) -> str:
        """
        Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyManagedRulesManagedRuleSet(dict):
    @property
    @pulumi.getter(name="ruleGroupOverrides")
    def rule_group_overrides(self) -> Optional[List['outputs.PolicyManagedRulesManagedRuleSetRuleGroupOverride']]:
        """
        One or more `rule_group_override` block defined below.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The rule set type. Possible values: `Microsoft_BotManagerRuleSet` and `OWASP`.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The rule set version. Possible values: `0.1`, `1.0`, `2.2.9`, `3.0` and `3.1`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyManagedRulesManagedRuleSetRuleGroupOverride(dict):
    @property
    @pulumi.getter(name="disabledRules")
    def disabled_rules(self) -> List[str]:
        """
        One or more Rule ID's
        """
        ...

    @property
    @pulumi.getter(name="ruleGroupName")
    def rule_group_name(self) -> str:
        """
        The name of the Rule Group
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyPolicySettings(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Describes if the policy is in enabled state or disabled state. Defaults to `Enabled`.
        """
        ...

    @property
    @pulumi.getter(name="fileUploadLimitInMb")
    def file_upload_limit_in_mb(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter(name="maxRequestBodySizeInKb")
    def max_request_body_size_in_kb(self) -> Optional[float]:
        ...

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Describes if it is in detection mode or prevention mode at the policy level. Defaults to `Prevention`.
        """
        ...

    @property
    @pulumi.getter(name="requestBodyCheck")
    def request_body_check(self) -> Optional[bool]:
        """
        Is Request Body Inspection enabled? Defaults to `true`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


