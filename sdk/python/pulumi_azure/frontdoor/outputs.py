# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class FirewallPolicyCustomRule(dict):
    action: str = pulumi.output_property("action")
    """
    The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the rule is enabled or disabled? Defaults to `true`.
    """
    match_conditions: Optional[List['outputs.FirewallPolicyCustomRuleMatchCondition']] = pulumi.output_property("matchConditions")
    """
    One or more `match_condition` block defined below.
    """
    name: str = pulumi.output_property("name")
    """
    Gets name of the resource that is unique within a policy. This name can be used to access the resource.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
    """
    rate_limit_duration_in_minutes: Optional[float] = pulumi.output_property("rateLimitDurationInMinutes")
    """
    The rate limit duration in minutes. Defaults to `1`.
    """
    rate_limit_threshold: Optional[float] = pulumi.output_property("rateLimitThreshold")
    """
    The rate limit threshold. Defaults to `10`.
    """
    type: str = pulumi.output_property("type")
    """
    The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyCustomRuleMatchCondition(dict):
    match_values: List[str] = pulumi.output_property("matchValues")
    """
    Up to `100` possible values to match.
    """
    match_variable: str = pulumi.output_property("matchVariable")
    """
    The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, or `RequestUri`.
    """
    negation_condition: Optional[bool] = pulumi.output_property("negationCondition")
    """
    Should the result of the condition be negated.
    """
    operator: str = pulumi.output_property("operator")
    """
    Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
    """
    selector: Optional[str] = pulumi.output_property("selector")
    """
    Match against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
    """
    transforms: Optional[List[str]] = pulumi.output_property("transforms")
    """
    Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRule(dict):
    exclusions: Optional[List['outputs.FirewallPolicyManagedRuleExclusion']] = pulumi.output_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """
    overrides: Optional[List['outputs.FirewallPolicyManagedRuleOverride']] = pulumi.output_property("overrides")
    """
    One or more `override` blocks as defined below.
    """
    type: str = pulumi.output_property("type")
    """
    The name of the managed rule to use with this resource.
    """
    version: str = pulumi.output_property("version")
    """
    The version on the managed rule to use with this resource.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleExclusion(dict):
    match_variable: str = pulumi.output_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: str = pulumi.output_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: str = pulumi.output_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverride(dict):
    exclusions: Optional[List['outputs.FirewallPolicyManagedRuleOverrideExclusion']] = pulumi.output_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """
    rule_group_name: str = pulumi.output_property("ruleGroupName")
    """
    The managed rule group to override.
    """
    rules: Optional[List['outputs.FirewallPolicyManagedRuleOverrideRule']] = pulumi.output_property("rules")
    """
    One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideExclusion(dict):
    match_variable: str = pulumi.output_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: str = pulumi.output_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: str = pulumi.output_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideRule(dict):
    action: str = pulumi.output_property("action")
    """
    The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the managed rule override enabled or disabled. Defaults to `false`
    """
    exclusions: Optional[List['outputs.FirewallPolicyManagedRuleOverrideRuleExclusion']] = pulumi.output_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """
    rule_id: str = pulumi.output_property("ruleId")
    """
    Identifier for the managed rule.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideRuleExclusion(dict):
    match_variable: str = pulumi.output_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: str = pulumi.output_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: str = pulumi.output_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPool(dict):
    backends: List['outputs.FrontdoorBackendPoolBackend'] = pulumi.output_property("backends")
    """
    A `backend` block as defined below.
    """
    health_probe_name: str = pulumi.output_property("healthProbeName")
    """
    Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the FrontDoor.
    """
    load_balancing_name: str = pulumi.output_property("loadBalancingName")
    """
    Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Backend Pool.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolBackend(dict):
    address: str = pulumi.output_property("address")
    """
    Location of the backend (IP address or FQDN)
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
    """
    host_header: str = pulumi.output_property("hostHeader")
    """
    The value to use as the host header sent to the backend.
    """
    http_port: float = pulumi.output_property("httpPort")
    """
    The HTTP TCP port number. Possible values are between `1` - `65535`.
    """
    https_port: float = pulumi.output_property("httpsPort")
    """
    The HTTPS TCP port number. Possible values are between `1` - `65535`.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
    """
    weight: Optional[float] = pulumi.output_property("weight")
    """
    Weight of this endpoint for load balancing purposes. Defaults to `50`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolHealthProbe(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is this health probe enabled? Dafaults to `true`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the FrontDoor.
    """
    interval_in_seconds: Optional[float] = pulumi.output_property("intervalInSeconds")
    """
    The number of seconds between each Health Probe. Defaults to `120`.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Health Probe.
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    The path to use for the Health Probe. Default is `/`.
    """
    probe_method: Optional[str] = pulumi.output_property("probeMethod")
    """
    Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
    """
    protocol: Optional[str] = pulumi.output_property("protocol")
    """
    Protocol scheme to use for the Health Probe. Defaults to `Http`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolLoadBalancing(dict):
    additional_latency_milliseconds: Optional[float] = pulumi.output_property("additionalLatencyMilliseconds")
    """
    The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the FrontDoor.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Load Balancer.
    """
    sample_size: Optional[float] = pulumi.output_property("sampleSize")
    """
    The number of samples to consider for load balancing decisions. Defaults to `4`.
    """
    successful_samples_required: Optional[float] = pulumi.output_property("successfulSamplesRequired")
    """
    The number of samples within the sample period that must succeed. Defaults to `2`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorFrontendEndpoint(dict):
    custom_https_configuration: Optional['outputs.FrontdoorFrontendEndpointCustomHttpsConfiguration'] = pulumi.output_property("customHttpsConfiguration")
    """
    A `custom_https_configuration` block as defined below.
    """
    custom_https_provisioning_enabled: bool = pulumi.output_property("customHttpsProvisioningEnabled")
    """
    Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
    """
    host_name: str = pulumi.output_property("hostName")
    """
    Specifies the host name of the `frontend_endpoint`. Must be a domain name.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the FrontDoor.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the `frontend_endpoint`.
    """
    session_affinity_enabled: Optional[bool] = pulumi.output_property("sessionAffinityEnabled")
    """
    Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
    """
    session_affinity_ttl_seconds: Optional[float] = pulumi.output_property("sessionAffinityTtlSeconds")
    """
    The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
    """
    web_application_firewall_policy_link_id: Optional[str] = pulumi.output_property("webApplicationFirewallPolicyLinkId")
    """
    Defines the Web Application Firewall policy `ID` for each host.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorFrontendEndpointCustomHttpsConfiguration(dict):
    azure_key_vault_certificate_secret_name: Optional[str] = pulumi.output_property("azureKeyVaultCertificateSecretName")
    """
    The name of the Key Vault secret representing the full certificate PFX.
    """
    azure_key_vault_certificate_secret_version: Optional[str] = pulumi.output_property("azureKeyVaultCertificateSecretVersion")
    """
    The version of the Key Vault secret representing the full certificate PFX.
    """
    azure_key_vault_certificate_vault_id: Optional[str] = pulumi.output_property("azureKeyVaultCertificateVaultId")
    """
    The ID of the Key Vault containing the SSL certificate.
    """
    certificate_source: Optional[str] = pulumi.output_property("certificateSource")
    """
    Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
    """
    minimum_tls_version: Optional[str] = pulumi.output_property("minimumTlsVersion")
    """
    Minimum client TLS version supported.
    """
    provisioning_state: Optional[str] = pulumi.output_property("provisioningState")
    """
    Provisioning state of the Front Door.
    """
    provisioning_substate: Optional[str] = pulumi.output_property("provisioningSubstate")
    """
    Provisioning substate of the Front Door
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRule(dict):
    accepted_protocols: List[str] = pulumi.output_property("acceptedProtocols")
    """
    Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
    """
    forwarding_configuration: Optional['outputs.FrontdoorRoutingRuleForwardingConfiguration'] = pulumi.output_property("forwardingConfiguration")
    """
    A `forwarding_configuration` block as defined below.
    """
    frontend_endpoints: List[str] = pulumi.output_property("frontendEndpoints")
    """
    The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
    """
    id: Optional[str] = pulumi.output_property("id")
    """
    The ID of the FrontDoor.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Routing Rule.
    """
    patterns_to_matches: List[str] = pulumi.output_property("patternsToMatches")
    """
    The route patterns for the Backend Routing Rule. Defaults to `/*`.
    """
    redirect_configuration: Optional['outputs.FrontdoorRoutingRuleRedirectConfiguration'] = pulumi.output_property("redirectConfiguration")
    """
    A `redirect_configuration` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRuleForwardingConfiguration(dict):
    backend_pool_name: str = pulumi.output_property("backendPoolName")
    """
    Specifies the name of the Backend Pool to forward the incoming traffic to.
    """
    cache_enabled: Optional[bool] = pulumi.output_property("cacheEnabled")
    """
    Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
    """
    cache_query_parameter_strip_directive: Optional[str] = pulumi.output_property("cacheQueryParameterStripDirective")
    """
    Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
    """
    cache_use_dynamic_compression: Optional[bool] = pulumi.output_property("cacheUseDynamicCompression")
    """
    Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
    """
    custom_forwarding_path: Optional[str] = pulumi.output_property("customForwardingPath")
    """
    Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
    """
    forwarding_protocol: Optional[str] = pulumi.output_property("forwardingProtocol")
    """
    Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRuleRedirectConfiguration(dict):
    custom_fragment: Optional[str] = pulumi.output_property("customFragment")
    """
    The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
    """
    custom_host: Optional[str] = pulumi.output_property("customHost")
    """
    Set this to change the URL for the redirection.
    """
    custom_path: Optional[str] = pulumi.output_property("customPath")
    """
    The path to retain as per the incoming request, or update in the URL for the redirection.
    """
    custom_query_string: Optional[str] = pulumi.output_property("customQueryString")
    """
    Replace any existing query string from the incoming request URL.
    """
    redirect_protocol: str = pulumi.output_property("redirectProtocol")
    """
    Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
    """
    redirect_type: str = pulumi.output_property("redirectType")
    """
    Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


