# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'CustomHttpsConfigurationCustomHttpsConfiguration',
    'FirewallPolicyCustomRule',
    'FirewallPolicyCustomRuleMatchCondition',
    'FirewallPolicyManagedRule',
    'FirewallPolicyManagedRuleExclusion',
    'FirewallPolicyManagedRuleOverride',
    'FirewallPolicyManagedRuleOverrideExclusion',
    'FirewallPolicyManagedRuleOverrideRule',
    'FirewallPolicyManagedRuleOverrideRuleExclusion',
    'FrontdoorBackendPool',
    'FrontdoorBackendPoolBackend',
    'FrontdoorBackendPoolHealthProbe',
    'FrontdoorBackendPoolLoadBalancing',
    'FrontdoorFrontendEndpoint',
    'FrontdoorFrontendEndpointCustomHttpsConfiguration',
    'FrontdoorRoutingRule',
    'FrontdoorRoutingRuleForwardingConfiguration',
    'FrontdoorRoutingRuleRedirectConfiguration',
]

@pulumi.output_type
class CustomHttpsConfigurationCustomHttpsConfiguration(dict):
    @property
    @pulumi.getter(name="azureKeyVaultCertificateSecretName")
    def azure_key_vault_certificate_secret_name(self) -> Optional[str]:
        """
        The name of the Key Vault secret representing the full certificate PFX.
        """
        ...

    @property
    @pulumi.getter(name="azureKeyVaultCertificateSecretVersion")
    def azure_key_vault_certificate_secret_version(self) -> Optional[str]:
        """
        The version of the Key Vault secret representing the full certificate PFX.
        """
        ...

    @property
    @pulumi.getter(name="azureKeyVaultCertificateVaultId")
    def azure_key_vault_certificate_vault_id(self) -> Optional[str]:
        """
        The ID of the Key Vault containing the SSL certificate.
        """
        ...

    @property
    @pulumi.getter(name="certificateSource")
    def certificate_source(self) -> Optional[str]:
        """
        Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        """
        ...

    @property
    @pulumi.getter(name="minimumTlsVersion")
    def minimum_tls_version(self) -> Optional[str]:
        """
        Minimum client TLS version supported.
        """
        ...

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        ...

    @property
    @pulumi.getter(name="provisioningSubstate")
    def provisioning_substate(self) -> Optional[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyCustomRule(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the rule is enabled or disabled? Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="matchConditions")
    def match_conditions(self) -> Optional[List['outputs.FirewallPolicyCustomRuleMatchCondition']]:
        """
        One or more `match_condition` block defined below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Gets name of the resource that is unique within a policy. This name can be used to access the resource.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
        """
        ...

    @property
    @pulumi.getter(name="rateLimitDurationInMinutes")
    def rate_limit_duration_in_minutes(self) -> Optional[float]:
        """
        The rate limit duration in minutes. Defaults to `1`.
        """
        ...

    @property
    @pulumi.getter(name="rateLimitThreshold")
    def rate_limit_threshold(self) -> Optional[float]:
        """
        The rate limit threshold. Defaults to `10`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyCustomRuleMatchCondition(dict):
    @property
    @pulumi.getter(name="matchValues")
    def match_values(self) -> List[str]:
        """
        Up to `100` possible values to match.
        """
        ...

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, or `RequestUri`.
        """
        ...

    @property
    @pulumi.getter(name="negationCondition")
    def negation_condition(self) -> Optional[bool]:
        """
        Should the result of the condition be negated.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        """
        Match against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
        """
        ...

    @property
    @pulumi.getter
    def transforms(self) -> Optional[List[str]]:
        """
        Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRule(dict):
    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List['outputs.FirewallPolicyManagedRuleExclusion']]:
        """
        One or more `exclusion` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter
    def overrides(self) -> Optional[List['outputs.FirewallPolicyManagedRuleOverride']]:
        """
        One or more `override` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the managed rule to use with this resource.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version on the managed rule to use with this resource.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleExclusion(dict):
    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> str:
        """
        Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverride(dict):
    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List['outputs.FirewallPolicyManagedRuleOverrideExclusion']]:
        """
        One or more `exclusion` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="ruleGroupName")
    def rule_group_name(self) -> str:
        """
        The managed rule group to override.
        """
        ...

    @property
    @pulumi.getter
    def rules(self) -> Optional[List['outputs.FirewallPolicyManagedRuleOverrideRule']]:
        """
        One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideExclusion(dict):
    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> str:
        """
        Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideRule(dict):
    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the managed rule override enabled or disabled. Defaults to `false`
        """
        ...

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[List['outputs.FirewallPolicyManagedRuleOverrideRuleExclusion']]:
        """
        One or more `exclusion` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        """
        Identifier for the managed rule.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FirewallPolicyManagedRuleOverrideRuleExclusion(dict):
    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> str:
        """
        The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> str:
        """
        Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPool(dict):
    @property
    @pulumi.getter
    def backends(self) -> List['outputs.FrontdoorBackendPoolBackend']:
        """
        A `backend` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="healthProbeName")
    def health_probe_name(self) -> str:
        """
        Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the FrontDoor.
        """
        ...

    @property
    @pulumi.getter(name="loadBalancingName")
    def load_balancing_name(self) -> str:
        """
        Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Backend Pool.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolBackend(dict):
    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Location of the backend (IP address or FQDN)
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        """
        The value to use as the host header sent to the backend.
        """
        ...

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> float:
        """
        The HTTP TCP port number. Possible values are between `1` - `65535`.
        """
        ...

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> float:
        """
        The HTTPS TCP port number. Possible values are between `1` - `65535`.
        """
        ...

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
        """
        ...

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        """
        Weight of this endpoint for load balancing purposes. Defaults to `50`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolHealthProbe(dict):
    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this health probe enabled? Dafaults to `true`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the FrontDoor.
        """
        ...

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[float]:
        """
        The number of seconds between each Health Probe. Defaults to `120`.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Health Probe.
        """
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path to use for the Health Probe. Default is `/`.
        """
        ...

    @property
    @pulumi.getter(name="probeMethod")
    def probe_method(self) -> Optional[str]:
        """
        Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
        """
        ...

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol scheme to use for the Health Probe. Defaults to `Http`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorBackendPoolLoadBalancing(dict):
    @property
    @pulumi.getter(name="additionalLatencyMilliseconds")
    def additional_latency_milliseconds(self) -> Optional[float]:
        """
        The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the FrontDoor.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Load Balancer.
        """
        ...

    @property
    @pulumi.getter(name="sampleSize")
    def sample_size(self) -> Optional[float]:
        """
        The number of samples to consider for load balancing decisions. Defaults to `4`.
        """
        ...

    @property
    @pulumi.getter(name="successfulSamplesRequired")
    def successful_samples_required(self) -> Optional[float]:
        """
        The number of samples within the sample period that must succeed. Defaults to `2`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorFrontendEndpoint(dict):
    @property
    @pulumi.getter(name="customHttpsConfiguration")
    def custom_https_configuration(self) -> Optional['outputs.FrontdoorFrontendEndpointCustomHttpsConfiguration']:
        """
        A `custom_https_configuration` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="customHttpsProvisioningEnabled")
    def custom_https_provisioning_enabled(self) -> Optional[bool]:
        """
        Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
        """
        ...

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Specifies the host name of the `frontend_endpoint`. Must be a domain name.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the FrontDoor.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the `frontend_endpoint`.
        """
        ...

    @property
    @pulumi.getter(name="sessionAffinityEnabled")
    def session_affinity_enabled(self) -> Optional[bool]:
        """
        Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="sessionAffinityTtlSeconds")
    def session_affinity_ttl_seconds(self) -> Optional[float]:
        """
        The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
        """
        ...

    @property
    @pulumi.getter(name="webApplicationFirewallPolicyLinkId")
    def web_application_firewall_policy_link_id(self) -> Optional[str]:
        """
        Defines the Web Application Firewall policy `ID` for each host.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorFrontendEndpointCustomHttpsConfiguration(dict):
    @property
    @pulumi.getter(name="azureKeyVaultCertificateSecretName")
    def azure_key_vault_certificate_secret_name(self) -> Optional[str]:
        """
        The name of the Key Vault secret representing the full certificate PFX.
        """
        ...

    @property
    @pulumi.getter(name="azureKeyVaultCertificateSecretVersion")
    def azure_key_vault_certificate_secret_version(self) -> Optional[str]:
        """
        The version of the Key Vault secret representing the full certificate PFX.
        """
        ...

    @property
    @pulumi.getter(name="azureKeyVaultCertificateVaultId")
    def azure_key_vault_certificate_vault_id(self) -> Optional[str]:
        """
        The ID of the Key Vault containing the SSL certificate.
        """
        ...

    @property
    @pulumi.getter(name="certificateSource")
    def certificate_source(self) -> Optional[str]:
        """
        Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        """
        ...

    @property
    @pulumi.getter(name="minimumTlsVersion")
    def minimum_tls_version(self) -> Optional[str]:
        """
        Minimum client TLS version supported.
        """
        ...

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> Optional[str]:
        """
        Provisioning state of the Front Door.
        """
        ...

    @property
    @pulumi.getter(name="provisioningSubstate")
    def provisioning_substate(self) -> Optional[str]:
        """
        Provisioning substate of the Front Door
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRule(dict):
    @property
    @pulumi.getter(name="acceptedProtocols")
    def accepted_protocols(self) -> List[str]:
        """
        Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="forwardingConfiguration")
    def forwarding_configuration(self) -> Optional['outputs.FrontdoorRoutingRuleForwardingConfiguration']:
        """
        A `forwarding_configuration` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="frontendEndpoints")
    def frontend_endpoints(self) -> List[str]:
        """
        The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the FrontDoor.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Routing Rule.
        """
        ...

    @property
    @pulumi.getter(name="patternsToMatches")
    def patterns_to_matches(self) -> List[str]:
        """
        The route patterns for the Backend Routing Rule. Defaults to `/*`.
        """
        ...

    @property
    @pulumi.getter(name="redirectConfiguration")
    def redirect_configuration(self) -> Optional['outputs.FrontdoorRoutingRuleRedirectConfiguration']:
        """
        A `redirect_configuration` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRuleForwardingConfiguration(dict):
    @property
    @pulumi.getter(name="backendPoolName")
    def backend_pool_name(self) -> str:
        """
        Specifies the name of the Backend Pool to forward the incoming traffic to.
        """
        ...

    @property
    @pulumi.getter(name="cacheEnabled")
    def cache_enabled(self) -> Optional[bool]:
        """
        Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="cacheQueryParameterStripDirective")
    def cache_query_parameter_strip_directive(self) -> Optional[str]:
        """
        Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
        """
        ...

    @property
    @pulumi.getter(name="cacheUseDynamicCompression")
    def cache_use_dynamic_compression(self) -> Optional[bool]:
        """
        Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="customForwardingPath")
    def custom_forwarding_path(self) -> Optional[str]:
        """
        Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
        """
        ...

    @property
    @pulumi.getter(name="forwardingProtocol")
    def forwarding_protocol(self) -> Optional[str]:
        """
        Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FrontdoorRoutingRuleRedirectConfiguration(dict):
    @property
    @pulumi.getter(name="customFragment")
    def custom_fragment(self) -> Optional[str]:
        """
        The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
        """
        ...

    @property
    @pulumi.getter(name="customHost")
    def custom_host(self) -> Optional[str]:
        """
        Set this to change the URL for the redirection.
        """
        ...

    @property
    @pulumi.getter(name="customPath")
    def custom_path(self) -> Optional[str]:
        """
        The path to retain as per the incoming request, or update in the URL for the redirection.
        """
        ...

    @property
    @pulumi.getter(name="customQueryString")
    def custom_query_string(self) -> Optional[str]:
        """
        Replace any existing query string from the incoming request URL.
        """
        ...

    @property
    @pulumi.getter(name="redirectProtocol")
    def redirect_protocol(self) -> str:
        """
        Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
        """
        ...

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> str:
        """
        Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


