# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.input_type
class FirewallPolicyCustomRuleArgs:
    action: pulumi.Input[str] = pulumi.input_property("action")
    """
    The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Gets name of the resource that is unique within a policy. This name can be used to access the resource.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the rule is enabled or disabled? Defaults to `true`.
    """
    match_conditions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyCustomRuleMatchConditionArgs']]]] = pulumi.input_property("matchConditions")
    """
    One or more `match_condition` block defined below.
    """
    priority: Optional[pulumi.Input[float]] = pulumi.input_property("priority")
    """
    The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
    """
    rate_limit_duration_in_minutes: Optional[pulumi.Input[float]] = pulumi.input_property("rateLimitDurationInMinutes")
    """
    The rate limit duration in minutes. Defaults to `1`.
    """
    rate_limit_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("rateLimitThreshold")
    """
    The rate limit threshold. Defaults to `10`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: pulumi.Input[str], name: pulumi.Input[str], type: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None, match_conditions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyCustomRuleMatchConditionArgs']]]] = None, priority: Optional[pulumi.Input[float]] = None, rate_limit_duration_in_minutes: Optional[pulumi.Input[float]] = None, rate_limit_threshold: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] action: The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
        :param pulumi.Input[str] name: Gets name of the resource that is unique within a policy. This name can be used to access the resource.
        :param pulumi.Input[str] type: The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
        :param pulumi.Input[bool] enabled: Is the rule is enabled or disabled? Defaults to `true`.
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyCustomRuleMatchConditionArgs']]] match_conditions: One or more `match_condition` block defined below.
        :param pulumi.Input[float] priority: The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
        :param pulumi.Input[float] rate_limit_duration_in_minutes: The rate limit duration in minutes. Defaults to `1`.
        :param pulumi.Input[float] rate_limit_threshold: The rate limit threshold. Defaults to `10`.
        """
        __self__.action = action
        __self__.name = name
        __self__.type = type
        __self__.enabled = enabled
        __self__.match_conditions = match_conditions
        __self__.priority = priority
        __self__.rate_limit_duration_in_minutes = rate_limit_duration_in_minutes
        __self__.rate_limit_threshold = rate_limit_threshold

@pulumi.input_type
class FirewallPolicyCustomRuleMatchConditionArgs:
    match_values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("matchValues")
    """
    Up to `100` possible values to match.
    """
    match_variable: pulumi.Input[str] = pulumi.input_property("matchVariable")
    """
    The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, or `RequestUri`.
    """
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
    """
    negation_condition: Optional[pulumi.Input[bool]] = pulumi.input_property("negationCondition")
    """
    Should the result of the condition be negated.
    """
    selector: Optional[pulumi.Input[str]] = pulumi.input_property("selector")
    """
    Match against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
    """
    transforms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("transforms")
    """
    Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_values: pulumi.Input[List[pulumi.Input[str]]], match_variable: pulumi.Input[str], operator: pulumi.Input[str], negation_condition: Optional[pulumi.Input[bool]] = None, selector: Optional[pulumi.Input[str]] = None, transforms: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] match_values: Up to `100` possible values to match.
        :param pulumi.Input[str] match_variable: The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, or `RequestUri`.
        :param pulumi.Input[str] operator: Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
        :param pulumi.Input[bool] negation_condition: Should the result of the condition be negated.
        :param pulumi.Input[str] selector: Match against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
        :param pulumi.Input[List[pulumi.Input[str]]] transforms: Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
        """
        __self__.match_values = match_values
        __self__.match_variable = match_variable
        __self__.operator = operator
        __self__.negation_condition = negation_condition
        __self__.selector = selector
        __self__.transforms = transforms

@pulumi.input_type
class FirewallPolicyManagedRuleArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The name of the managed rule to use with this resource.
    """
    version: pulumi.Input[str] = pulumi.input_property("version")
    """
    The version on the managed rule to use with this resource.
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleExclusionArgs']]]] = pulumi.input_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """
    overrides: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideArgs']]]] = pulumi.input_property("overrides")
    """
    One or more `override` blocks as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], version: pulumi.Input[str], exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleExclusionArgs']]]] = None, overrides: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] type: The name of the managed rule to use with this resource.
        :param pulumi.Input[str] version: The version on the managed rule to use with this resource.
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleExclusionArgs']]] exclusions: One or more `exclusion` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideArgs']]] overrides: One or more `override` blocks as defined below.
        """
        __self__.type = type
        __self__.version = version
        __self__.exclusions = exclusions
        __self__.overrides = overrides

@pulumi.input_type
class FirewallPolicyManagedRuleExclusionArgs:
    match_variable: pulumi.Input[str] = pulumi.input_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: pulumi.Input[str] = pulumi.input_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_variable: pulumi.Input[str], operator: pulumi.Input[str], selector: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] match_variable: The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        :param pulumi.Input[str] operator: Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        :param pulumi.Input[str] selector: Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        __self__.match_variable = match_variable
        __self__.operator = operator
        __self__.selector = selector

@pulumi.input_type
class FirewallPolicyManagedRuleOverrideArgs:
    rule_group_name: pulumi.Input[str] = pulumi.input_property("ruleGroupName")
    """
    The managed rule group to override.
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideExclusionArgs']]]] = pulumi.input_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """
    rules: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleArgs']]]] = pulumi.input_property("rules")
    """
    One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rule_group_name: pulumi.Input[str], exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideExclusionArgs']]]] = None, rules: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] rule_group_name: The managed rule group to override.
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideExclusionArgs']]] exclusions: One or more `exclusion` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleArgs']]] rules: One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
        """
        __self__.rule_group_name = rule_group_name
        __self__.exclusions = exclusions
        __self__.rules = rules

@pulumi.input_type
class FirewallPolicyManagedRuleOverrideExclusionArgs:
    match_variable: pulumi.Input[str] = pulumi.input_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: pulumi.Input[str] = pulumi.input_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_variable: pulumi.Input[str], operator: pulumi.Input[str], selector: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] match_variable: The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        :param pulumi.Input[str] operator: Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        :param pulumi.Input[str] selector: Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        __self__.match_variable = match_variable
        __self__.operator = operator
        __self__.selector = selector

@pulumi.input_type
class FirewallPolicyManagedRuleOverrideRuleArgs:
    action: pulumi.Input[str] = pulumi.input_property("action")
    """
    The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
    """
    rule_id: pulumi.Input[str] = pulumi.input_property("ruleId")
    """
    Identifier for the managed rule.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the managed rule override enabled or disabled. Defaults to `false`
    """
    exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleExclusionArgs']]]] = pulumi.input_property("exclusions")
    """
    One or more `exclusion` blocks as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, action: pulumi.Input[str], rule_id: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None, exclusions: Optional[pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleExclusionArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] action: The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
        :param pulumi.Input[str] rule_id: Identifier for the managed rule.
        :param pulumi.Input[bool] enabled: Is the managed rule override enabled or disabled. Defaults to `false`
        :param pulumi.Input[List[pulumi.Input['FirewallPolicyManagedRuleOverrideRuleExclusionArgs']]] exclusions: One or more `exclusion` blocks as defined below.
        """
        __self__.action = action
        __self__.rule_id = rule_id
        __self__.enabled = enabled
        __self__.exclusions = exclusions

@pulumi.input_type
class FirewallPolicyManagedRuleOverrideRuleExclusionArgs:
    match_variable: pulumi.Input[str] = pulumi.input_property("matchVariable")
    """
    The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
    """
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
    """
    selector: pulumi.Input[str] = pulumi.input_property("selector")
    """
    Selector for the value in the `match_variable` attribute this exclusion applies to.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_variable: pulumi.Input[str], operator: pulumi.Input[str], selector: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] match_variable: The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
        :param pulumi.Input[str] operator: Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
        :param pulumi.Input[str] selector: Selector for the value in the `match_variable` attribute this exclusion applies to.
        """
        __self__.match_variable = match_variable
        __self__.operator = operator
        __self__.selector = selector

@pulumi.input_type
class FrontdoorBackendPoolArgs:
    backends: pulumi.Input[List[pulumi.Input['FrontdoorBackendPoolBackendArgs']]] = pulumi.input_property("backends")
    """
    A `backend` block as defined below.
    """
    health_probe_name: pulumi.Input[str] = pulumi.input_property("healthProbeName")
    """
    Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
    """
    load_balancing_name: pulumi.Input[str] = pulumi.input_property("loadBalancingName")
    """
    Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the Backend Pool.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the FrontDoor.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, backends: pulumi.Input[List[pulumi.Input['FrontdoorBackendPoolBackendArgs']]], health_probe_name: pulumi.Input[str], load_balancing_name: pulumi.Input[str], name: pulumi.Input[str], id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['FrontdoorBackendPoolBackendArgs']]] backends: A `backend` block as defined below.
        :param pulumi.Input[str] health_probe_name: Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
        :param pulumi.Input[str] load_balancing_name: Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
        :param pulumi.Input[str] name: Specifies the name of the Backend Pool.
        :param pulumi.Input[str] id: The ID of the FrontDoor.
        """
        __self__.backends = backends
        __self__.health_probe_name = health_probe_name
        __self__.load_balancing_name = load_balancing_name
        __self__.name = name
        __self__.id = id

@pulumi.input_type
class FrontdoorBackendPoolBackendArgs:
    address: pulumi.Input[str] = pulumi.input_property("address")
    """
    Location of the backend (IP address or FQDN)
    """
    host_header: pulumi.Input[str] = pulumi.input_property("hostHeader")
    """
    The value to use as the host header sent to the backend.
    """
    http_port: pulumi.Input[float] = pulumi.input_property("httpPort")
    """
    The HTTP TCP port number. Possible values are between `1` - `65535`.
    """
    https_port: pulumi.Input[float] = pulumi.input_property("httpsPort")
    """
    The HTTPS TCP port number. Possible values are between `1` - `65535`.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
    """
    priority: Optional[pulumi.Input[float]] = pulumi.input_property("priority")
    """
    Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
    """
    weight: Optional[pulumi.Input[float]] = pulumi.input_property("weight")
    """
    Weight of this endpoint for load balancing purposes. Defaults to `50`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address: pulumi.Input[str], host_header: pulumi.Input[str], http_port: pulumi.Input[float], https_port: pulumi.Input[float], enabled: Optional[pulumi.Input[bool]] = None, priority: Optional[pulumi.Input[float]] = None, weight: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] address: Location of the backend (IP address or FQDN)
        :param pulumi.Input[str] host_header: The value to use as the host header sent to the backend.
        :param pulumi.Input[float] http_port: The HTTP TCP port number. Possible values are between `1` - `65535`.
        :param pulumi.Input[float] https_port: The HTTPS TCP port number. Possible values are between `1` - `65535`.
        :param pulumi.Input[bool] enabled: Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
        :param pulumi.Input[float] priority: Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
        :param pulumi.Input[float] weight: Weight of this endpoint for load balancing purposes. Defaults to `50`.
        """
        __self__.address = address
        __self__.host_header = host_header
        __self__.http_port = http_port
        __self__.https_port = https_port
        __self__.enabled = enabled
        __self__.priority = priority
        __self__.weight = weight

@pulumi.input_type
class FrontdoorBackendPoolHealthProbeArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the Health Probe.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is this health probe enabled? Dafaults to `true`.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the FrontDoor.
    """
    interval_in_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("intervalInSeconds")
    """
    The number of seconds between each Health Probe. Defaults to `120`.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    The path to use for the Health Probe. Default is `/`.
    """
    probe_method: Optional[pulumi.Input[str]] = pulumi.input_property("probeMethod")
    """
    Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    Protocol scheme to use for the Health Probe. Defaults to `Http`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None, id: Optional[pulumi.Input[str]] = None, interval_in_seconds: Optional[pulumi.Input[float]] = None, path: Optional[pulumi.Input[str]] = None, probe_method: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the Health Probe.
        :param pulumi.Input[bool] enabled: Is this health probe enabled? Dafaults to `true`.
        :param pulumi.Input[str] id: The ID of the FrontDoor.
        :param pulumi.Input[float] interval_in_seconds: The number of seconds between each Health Probe. Defaults to `120`.
        :param pulumi.Input[str] path: The path to use for the Health Probe. Default is `/`.
        :param pulumi.Input[str] probe_method: Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
        :param pulumi.Input[str] protocol: Protocol scheme to use for the Health Probe. Defaults to `Http`.
        """
        __self__.name = name
        __self__.enabled = enabled
        __self__.id = id
        __self__.interval_in_seconds = interval_in_seconds
        __self__.path = path
        __self__.probe_method = probe_method
        __self__.protocol = protocol

@pulumi.input_type
class FrontdoorBackendPoolLoadBalancingArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the Load Balancer.
    """
    additional_latency_milliseconds: Optional[pulumi.Input[float]] = pulumi.input_property("additionalLatencyMilliseconds")
    """
    The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the FrontDoor.
    """
    sample_size: Optional[pulumi.Input[float]] = pulumi.input_property("sampleSize")
    """
    The number of samples to consider for load balancing decisions. Defaults to `4`.
    """
    successful_samples_required: Optional[pulumi.Input[float]] = pulumi.input_property("successfulSamplesRequired")
    """
    The number of samples within the sample period that must succeed. Defaults to `2`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], additional_latency_milliseconds: Optional[pulumi.Input[float]] = None, id: Optional[pulumi.Input[str]] = None, sample_size: Optional[pulumi.Input[float]] = None, successful_samples_required: Optional[pulumi.Input[float]] = None) -> None:
        """
        :param pulumi.Input[str] name: Specifies the name of the Load Balancer.
        :param pulumi.Input[float] additional_latency_milliseconds: The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
        :param pulumi.Input[str] id: The ID of the FrontDoor.
        :param pulumi.Input[float] sample_size: The number of samples to consider for load balancing decisions. Defaults to `4`.
        :param pulumi.Input[float] successful_samples_required: The number of samples within the sample period that must succeed. Defaults to `2`.
        """
        __self__.name = name
        __self__.additional_latency_milliseconds = additional_latency_milliseconds
        __self__.id = id
        __self__.sample_size = sample_size
        __self__.successful_samples_required = successful_samples_required

@pulumi.input_type
class FrontdoorFrontendEndpointArgs:
    custom_https_provisioning_enabled: pulumi.Input[bool] = pulumi.input_property("customHttpsProvisioningEnabled")
    """
    Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
    """
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    Specifies the host name of the `frontend_endpoint`. Must be a domain name.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the `frontend_endpoint`.
    """
    custom_https_configuration: Optional[pulumi.Input['FrontdoorFrontendEndpointCustomHttpsConfigurationArgs']] = pulumi.input_property("customHttpsConfiguration")
    """
    A `custom_https_configuration` block as defined below.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the FrontDoor.
    """
    session_affinity_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("sessionAffinityEnabled")
    """
    Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
    """
    session_affinity_ttl_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("sessionAffinityTtlSeconds")
    """
    The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
    """
    web_application_firewall_policy_link_id: Optional[pulumi.Input[str]] = pulumi.input_property("webApplicationFirewallPolicyLinkId")
    """
    Defines the Web Application Firewall policy `ID` for each host.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, custom_https_provisioning_enabled: pulumi.Input[bool], host_name: pulumi.Input[str], name: pulumi.Input[str], custom_https_configuration: Optional[pulumi.Input['FrontdoorFrontendEndpointCustomHttpsConfigurationArgs']] = None, id: Optional[pulumi.Input[str]] = None, session_affinity_enabled: Optional[pulumi.Input[bool]] = None, session_affinity_ttl_seconds: Optional[pulumi.Input[float]] = None, web_application_firewall_policy_link_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] custom_https_provisioning_enabled: Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
        :param pulumi.Input[str] host_name: Specifies the host name of the `frontend_endpoint`. Must be a domain name.
        :param pulumi.Input[str] name: Specifies the name of the `frontend_endpoint`.
        :param pulumi.Input['FrontdoorFrontendEndpointCustomHttpsConfigurationArgs'] custom_https_configuration: A `custom_https_configuration` block as defined below.
        :param pulumi.Input[str] id: The ID of the FrontDoor.
        :param pulumi.Input[bool] session_affinity_enabled: Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
        :param pulumi.Input[float] session_affinity_ttl_seconds: The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
        :param pulumi.Input[str] web_application_firewall_policy_link_id: Defines the Web Application Firewall policy `ID` for each host.
        """
        __self__.custom_https_provisioning_enabled = custom_https_provisioning_enabled
        __self__.host_name = host_name
        __self__.name = name
        __self__.custom_https_configuration = custom_https_configuration
        __self__.id = id
        __self__.session_affinity_enabled = session_affinity_enabled
        __self__.session_affinity_ttl_seconds = session_affinity_ttl_seconds
        __self__.web_application_firewall_policy_link_id = web_application_firewall_policy_link_id

@pulumi.input_type
class FrontdoorFrontendEndpointCustomHttpsConfigurationArgs:
    azure_key_vault_certificate_secret_name: Optional[pulumi.Input[str]] = pulumi.input_property("azureKeyVaultCertificateSecretName")
    """
    The name of the Key Vault secret representing the full certificate PFX.
    """
    azure_key_vault_certificate_secret_version: Optional[pulumi.Input[str]] = pulumi.input_property("azureKeyVaultCertificateSecretVersion")
    """
    The version of the Key Vault secret representing the full certificate PFX.
    """
    azure_key_vault_certificate_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("azureKeyVaultCertificateVaultId")
    """
    The ID of the Key Vault containing the SSL certificate.
    """
    certificate_source: Optional[pulumi.Input[str]] = pulumi.input_property("certificateSource")
    """
    Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
    """
    minimum_tls_version: Optional[pulumi.Input[str]] = pulumi.input_property("minimumTlsVersion")
    """
    Minimum client TLS version supported.
    """
    provisioning_state: Optional[pulumi.Input[str]] = pulumi.input_property("provisioningState")
    """
    Provisioning state of the Front Door.
    """
    provisioning_substate: Optional[pulumi.Input[str]] = pulumi.input_property("provisioningSubstate")
    """
    Provisioning substate of the Front Door
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, azure_key_vault_certificate_secret_name: Optional[pulumi.Input[str]] = None, azure_key_vault_certificate_secret_version: Optional[pulumi.Input[str]] = None, azure_key_vault_certificate_vault_id: Optional[pulumi.Input[str]] = None, certificate_source: Optional[pulumi.Input[str]] = None, minimum_tls_version: Optional[pulumi.Input[str]] = None, provisioning_state: Optional[pulumi.Input[str]] = None, provisioning_substate: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] azure_key_vault_certificate_secret_name: The name of the Key Vault secret representing the full certificate PFX.
        :param pulumi.Input[str] azure_key_vault_certificate_secret_version: The version of the Key Vault secret representing the full certificate PFX.
        :param pulumi.Input[str] azure_key_vault_certificate_vault_id: The ID of the Key Vault containing the SSL certificate.
        :param pulumi.Input[str] certificate_source: Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        :param pulumi.Input[str] minimum_tls_version: Minimum client TLS version supported.
        :param pulumi.Input[str] provisioning_state: Provisioning state of the Front Door.
        :param pulumi.Input[str] provisioning_substate: Provisioning substate of the Front Door
        """
        __self__.azure_key_vault_certificate_secret_name = azure_key_vault_certificate_secret_name
        __self__.azure_key_vault_certificate_secret_version = azure_key_vault_certificate_secret_version
        __self__.azure_key_vault_certificate_vault_id = azure_key_vault_certificate_vault_id
        __self__.certificate_source = certificate_source
        __self__.minimum_tls_version = minimum_tls_version
        __self__.provisioning_state = provisioning_state
        __self__.provisioning_substate = provisioning_substate

@pulumi.input_type
class FrontdoorRoutingRuleArgs:
    accepted_protocols: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("acceptedProtocols")
    """
    Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
    """
    frontend_endpoints: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("frontendEndpoints")
    """
    The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Specifies the name of the Routing Rule.
    """
    patterns_to_matches: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("patternsToMatches")
    """
    The route patterns for the Backend Routing Rule. Defaults to `/*`.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
    """
    forwarding_configuration: Optional[pulumi.Input['FrontdoorRoutingRuleForwardingConfigurationArgs']] = pulumi.input_property("forwardingConfiguration")
    """
    A `forwarding_configuration` block as defined below.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    """
    The ID of the FrontDoor.
    """
    redirect_configuration: Optional[pulumi.Input['FrontdoorRoutingRuleRedirectConfigurationArgs']] = pulumi.input_property("redirectConfiguration")
    """
    A `redirect_configuration` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, accepted_protocols: pulumi.Input[List[pulumi.Input[str]]], frontend_endpoints: pulumi.Input[List[pulumi.Input[str]]], name: pulumi.Input[str], patterns_to_matches: pulumi.Input[List[pulumi.Input[str]]], enabled: Optional[pulumi.Input[bool]] = None, forwarding_configuration: Optional[pulumi.Input['FrontdoorRoutingRuleForwardingConfigurationArgs']] = None, id: Optional[pulumi.Input[str]] = None, redirect_configuration: Optional[pulumi.Input['FrontdoorRoutingRuleRedirectConfigurationArgs']] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] accepted_protocols: Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
        :param pulumi.Input[List[pulumi.Input[str]]] frontend_endpoints: The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
        :param pulumi.Input[str] name: Specifies the name of the Routing Rule.
        :param pulumi.Input[List[pulumi.Input[str]]] patterns_to_matches: The route patterns for the Backend Routing Rule. Defaults to `/*`.
        :param pulumi.Input[bool] enabled: `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
        :param pulumi.Input['FrontdoorRoutingRuleForwardingConfigurationArgs'] forwarding_configuration: A `forwarding_configuration` block as defined below.
        :param pulumi.Input[str] id: The ID of the FrontDoor.
        :param pulumi.Input['FrontdoorRoutingRuleRedirectConfigurationArgs'] redirect_configuration: A `redirect_configuration` block as defined below.
        """
        __self__.accepted_protocols = accepted_protocols
        __self__.frontend_endpoints = frontend_endpoints
        __self__.name = name
        __self__.patterns_to_matches = patterns_to_matches
        __self__.enabled = enabled
        __self__.forwarding_configuration = forwarding_configuration
        __self__.id = id
        __self__.redirect_configuration = redirect_configuration

@pulumi.input_type
class FrontdoorRoutingRuleForwardingConfigurationArgs:
    backend_pool_name: pulumi.Input[str] = pulumi.input_property("backendPoolName")
    """
    Specifies the name of the Backend Pool to forward the incoming traffic to.
    """
    cache_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("cacheEnabled")
    """
    Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
    """
    cache_query_parameter_strip_directive: Optional[pulumi.Input[str]] = pulumi.input_property("cacheQueryParameterStripDirective")
    """
    Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
    """
    cache_use_dynamic_compression: Optional[pulumi.Input[bool]] = pulumi.input_property("cacheUseDynamicCompression")
    """
    Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
    """
    custom_forwarding_path: Optional[pulumi.Input[str]] = pulumi.input_property("customForwardingPath")
    """
    Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
    """
    forwarding_protocol: Optional[pulumi.Input[str]] = pulumi.input_property("forwardingProtocol")
    """
    Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, backend_pool_name: pulumi.Input[str], cache_enabled: Optional[pulumi.Input[bool]] = None, cache_query_parameter_strip_directive: Optional[pulumi.Input[str]] = None, cache_use_dynamic_compression: Optional[pulumi.Input[bool]] = None, custom_forwarding_path: Optional[pulumi.Input[str]] = None, forwarding_protocol: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] backend_pool_name: Specifies the name of the Backend Pool to forward the incoming traffic to.
        :param pulumi.Input[bool] cache_enabled: Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
        :param pulumi.Input[str] cache_query_parameter_strip_directive: Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
        :param pulumi.Input[bool] cache_use_dynamic_compression: Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
        :param pulumi.Input[str] custom_forwarding_path: Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
        :param pulumi.Input[str] forwarding_protocol: Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
        """
        __self__.backend_pool_name = backend_pool_name
        __self__.cache_enabled = cache_enabled
        __self__.cache_query_parameter_strip_directive = cache_query_parameter_strip_directive
        __self__.cache_use_dynamic_compression = cache_use_dynamic_compression
        __self__.custom_forwarding_path = custom_forwarding_path
        __self__.forwarding_protocol = forwarding_protocol

@pulumi.input_type
class FrontdoorRoutingRuleRedirectConfigurationArgs:
    redirect_protocol: pulumi.Input[str] = pulumi.input_property("redirectProtocol")
    """
    Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
    """
    redirect_type: pulumi.Input[str] = pulumi.input_property("redirectType")
    """
    Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
    """
    custom_fragment: Optional[pulumi.Input[str]] = pulumi.input_property("customFragment")
    """
    The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
    """
    custom_host: Optional[pulumi.Input[str]] = pulumi.input_property("customHost")
    """
    Set this to change the URL for the redirection.
    """
    custom_path: Optional[pulumi.Input[str]] = pulumi.input_property("customPath")
    """
    The path to retain as per the incoming request, or update in the URL for the redirection.
    """
    custom_query_string: Optional[pulumi.Input[str]] = pulumi.input_property("customQueryString")
    """
    Replace any existing query string from the incoming request URL.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, redirect_protocol: pulumi.Input[str], redirect_type: pulumi.Input[str], custom_fragment: Optional[pulumi.Input[str]] = None, custom_host: Optional[pulumi.Input[str]] = None, custom_path: Optional[pulumi.Input[str]] = None, custom_query_string: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] redirect_protocol: Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
        :param pulumi.Input[str] redirect_type: Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
        :param pulumi.Input[str] custom_fragment: The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
        :param pulumi.Input[str] custom_host: Set this to change the URL for the redirection.
        :param pulumi.Input[str] custom_path: The path to retain as per the incoming request, or update in the URL for the redirection.
        :param pulumi.Input[str] custom_query_string: Replace any existing query string from the incoming request URL.
        """
        __self__.redirect_protocol = redirect_protocol
        __self__.redirect_type = redirect_type
        __self__.custom_fragment = custom_fragment
        __self__.custom_host = custom_host
        __self__.custom_path = custom_path
        __self__.custom_query_string = custom_query_string

