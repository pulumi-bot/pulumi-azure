# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Cluster']


class Cluster(pulumi.CustomResource):
    data_ingestion_uri: pulumi.Output[str] = pulumi.property("dataIngestionUri")
    """
    The Kusto Cluster URI to be used for data ingestion.
    """

    enable_disk_encryption: pulumi.Output[Optional[bool]] = pulumi.property("enableDiskEncryption")
    """
    Specifies if the cluster's disks are encrypted.
    """

    enable_purge: pulumi.Output[Optional[bool]] = pulumi.property("enablePurge")
    """
    Specifies if the purge operations are enabled.
    """

    enable_streaming_ingest: pulumi.Output[Optional[bool]] = pulumi.property("enableStreamingIngest")
    """
    Specifies if the streaming ingest is enabled.
    """

    identity: pulumi.Output['outputs.ClusterIdentity'] = pulumi.property("identity")
    """
    A identity block.
    """

    language_extensions: pulumi.Output[Optional[List[str]]] = pulumi.property("languageExtensions")
    """
    An list of `language_extensions` to enable. Valid values are: `PYTHON` and `R`.
    """

    location: pulumi.Output[str] = pulumi.property("location")
    """
    The location where the Kusto Cluster should be created. Changing this forces a new resource to be created.
    """

    name: pulumi.Output[str] = pulumi.property("name")
    """
    The name of the Kusto Cluster to create. Changing this forces a new resource to be created.
    """

    optimized_auto_scale: pulumi.Output[Optional['outputs.ClusterOptimizedAutoScale']] = pulumi.property("optimizedAutoScale")
    """
    An `optimized_auto_scale` block as defined below.
    """

    resource_group_name: pulumi.Output[str] = pulumi.property("resourceGroupName")
    """
    Specifies the Resource Group where the Kusto Cluster should exist. Changing this forces a new resource to be created.
    """

    sku: pulumi.Output['outputs.ClusterSku'] = pulumi.property("sku")
    """
    A `sku` block as defined below.
    """

    tags: pulumi.Output[Optional[Mapping[str, str]]] = pulumi.property("tags")
    """
    A mapping of tags to assign to the resource.
    """

    trusted_external_tenants: pulumi.Output[List[str]] = pulumi.property("trustedExternalTenants")
    """
    Specifies a list of tenant IDs that are trusted by the cluster.
    """

    uri: pulumi.Output[str] = pulumi.property("uri")
    """
    The FQDN of the Azure Kusto Cluster.
    """

    virtual_network_configuration: pulumi.Output[Optional['outputs.ClusterVirtualNetworkConfiguration']] = pulumi.property("virtualNetworkConfiguration")
    """
    A `virtual_network_configuration` block as defined below.
    """

    zones: pulumi.Output[Optional[List[str]]] = pulumi.property("zones")
    """
    A list of Availability Zones in which the cluster instances should be created in. Changing this forces a new resource to be created.
    """

    def __init__(__self__,
                 resource_name,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_disk_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_purge: Optional[pulumi.Input[bool]] = None,
                 enable_streaming_ingest: Optional[pulumi.Input[bool]] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ClusterIdentityArgs']]] = None,
                 language_extensions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optimized_auto_scale: Optional[pulumi.Input[pulumi.InputType['ClusterOptimizedAutoScaleArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[pulumi.InputType['ClusterSkuArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trusted_external_tenants: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 virtual_network_configuration: Optional[pulumi.Input[pulumi.InputType['ClusterVirtualNetworkConfigurationArgs']]] = None,
                 zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Kusto (also known as Azure Data Explorer) Cluster

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        rg = azure.core.ResourceGroup("rg", location="East US")
        example = azure.kusto.Cluster("example",
            location=rg.location,
            resource_group_name=rg.name,
            sku={
                "name": "Standard_D13_v2",
                "capacity": 2,
            },
            tags={
                "Environment": "Production",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_disk_encryption: Specifies if the cluster's disks are encrypted.
        :param pulumi.Input[bool] enable_purge: Specifies if the purge operations are enabled.
        :param pulumi.Input[bool] enable_streaming_ingest: Specifies if the streaming ingest is enabled.
        :param pulumi.Input[pulumi.InputType['ClusterIdentityArgs']] identity: A identity block.
        :param pulumi.Input[List[pulumi.Input[str]]] language_extensions: An list of `language_extensions` to enable. Valid values are: `PYTHON` and `R`.
        :param pulumi.Input[str] location: The location where the Kusto Cluster should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Cluster to create. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['ClusterOptimizedAutoScaleArgs']] optimized_auto_scale: An `optimized_auto_scale` block as defined below.
        :param pulumi.Input[str] resource_group_name: Specifies the Resource Group where the Kusto Cluster should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['ClusterSkuArgs']] sku: A `sku` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] trusted_external_tenants: Specifies a list of tenant IDs that are trusted by the cluster.
        :param pulumi.Input[pulumi.InputType['ClusterVirtualNetworkConfigurationArgs']] virtual_network_configuration: A `virtual_network_configuration` block as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] zones: A list of Availability Zones in which the cluster instances should be created in. Changing this forces a new resource to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['enable_disk_encryption'] = enable_disk_encryption
            __props__['enable_purge'] = enable_purge
            __props__['enable_streaming_ingest'] = enable_streaming_ingest
            __props__['identity'] = identity
            __props__['language_extensions'] = language_extensions
            __props__['location'] = location
            __props__['name'] = name
            __props__['optimized_auto_scale'] = optimized_auto_scale
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            if sku is None:
                raise TypeError("Missing required property 'sku'")
            __props__['sku'] = sku
            __props__['tags'] = tags
            __props__['trusted_external_tenants'] = trusted_external_tenants
            __props__['virtual_network_configuration'] = virtual_network_configuration
            __props__['zones'] = zones
            __props__['data_ingestion_uri'] = None
            __props__['uri'] = None
        super(Cluster, __self__).__init__(
            'azure:kusto/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: str,
            opts: Optional[pulumi.ResourceOptions] = None,
            data_ingestion_uri: Optional[pulumi.Input[str]] = None,
            enable_disk_encryption: Optional[pulumi.Input[bool]] = None,
            enable_purge: Optional[pulumi.Input[bool]] = None,
            enable_streaming_ingest: Optional[pulumi.Input[bool]] = None,
            identity: Optional[pulumi.Input[pulumi.InputType['ClusterIdentityArgs']]] = None,
            language_extensions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            optimized_auto_scale: Optional[pulumi.Input[pulumi.InputType['ClusterOptimizedAutoScaleArgs']]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            sku: Optional[pulumi.Input[pulumi.InputType['ClusterSkuArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            trusted_external_tenants: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            uri: Optional[pulumi.Input[str]] = None,
            virtual_network_configuration: Optional[pulumi.Input[pulumi.InputType['ClusterVirtualNetworkConfigurationArgs']]] = None,
            zones: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_ingestion_uri: The Kusto Cluster URI to be used for data ingestion.
        :param pulumi.Input[bool] enable_disk_encryption: Specifies if the cluster's disks are encrypted.
        :param pulumi.Input[bool] enable_purge: Specifies if the purge operations are enabled.
        :param pulumi.Input[bool] enable_streaming_ingest: Specifies if the streaming ingest is enabled.
        :param pulumi.Input[pulumi.InputType['ClusterIdentityArgs']] identity: A identity block.
        :param pulumi.Input[List[pulumi.Input[str]]] language_extensions: An list of `language_extensions` to enable. Valid values are: `PYTHON` and `R`.
        :param pulumi.Input[str] location: The location where the Kusto Cluster should be created. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: The name of the Kusto Cluster to create. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['ClusterOptimizedAutoScaleArgs']] optimized_auto_scale: An `optimized_auto_scale` block as defined below.
        :param pulumi.Input[str] resource_group_name: Specifies the Resource Group where the Kusto Cluster should exist. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['ClusterSkuArgs']] sku: A `sku` block as defined below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[List[pulumi.Input[str]]] trusted_external_tenants: Specifies a list of tenant IDs that are trusted by the cluster.
        :param pulumi.Input[str] uri: The FQDN of the Azure Kusto Cluster.
        :param pulumi.Input[pulumi.InputType['ClusterVirtualNetworkConfigurationArgs']] virtual_network_configuration: A `virtual_network_configuration` block as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] zones: A list of Availability Zones in which the cluster instances should be created in. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["data_ingestion_uri"] = data_ingestion_uri
        __props__["enable_disk_encryption"] = enable_disk_encryption
        __props__["enable_purge"] = enable_purge
        __props__["enable_streaming_ingest"] = enable_streaming_ingest
        __props__["identity"] = identity
        __props__["language_extensions"] = language_extensions
        __props__["location"] = location
        __props__["name"] = name
        __props__["optimized_auto_scale"] = optimized_auto_scale
        __props__["resource_group_name"] = resource_group_name
        __props__["sku"] = sku
        __props__["tags"] = tags
        __props__["trusted_external_tenants"] = trusted_external_tenants
        __props__["uri"] = uri
        __props__["virtual_network_configuration"] = virtual_network_configuration
        __props__["zones"] = zones
        return Cluster(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

