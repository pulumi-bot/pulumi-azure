# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'EndpointCustomHeaderArgs',
    'EndpointSubnetArgs',
    'ProfileDnsConfigArgs',
    'ProfileMonitorConfigArgs',
    'ProfileMonitorConfigCustomHeaderArgs',
]

@pulumi.input_type
class EndpointCustomHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the custom header.
        :param pulumi.Input[str] value: The value of custom header. Applicable for Http and Https protocol.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom header.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of custom header. Applicable for Http and Https protocol.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class EndpointSubnetArgs:
    def __init__(__self__, *,
                 first: pulumi.Input[str],
                 last: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] first: The First IP....
        :param pulumi.Input[str] last: The Last IP...
        :param pulumi.Input[float] scope: The Scope...
        """
        pulumi.set(__self__, "first", first)
        pulumi.set(__self__, "last", last)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def first(self) -> pulumi.Input[str]:
        """
        The First IP....
        """
        ...

    @first.setter
    def first(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def last(self) -> Optional[pulumi.Input[str]]:
        """
        The Last IP...
        """
        ...

    @last.setter
    def last(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[float]]:
        """
        The Scope...
        """
        ...

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ProfileDnsConfigArgs:
    def __init__(__self__, *,
                 relative_name: pulumi.Input[str],
                 ttl: pulumi.Input[float]):
        """
        :param pulumi.Input[str] relative_name: The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
        :param pulumi.Input[float] ttl: The TTL value of the Profile used by Local DNS resolvers and clients.
        """
        pulumi.set(__self__, "relativeName", relative_name)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="relativeName")
    def relative_name(self) -> pulumi.Input[str]:
        """
        The relative domain name, this is combined with the domain name used by Traffic Manager to form the FQDN which is exported as documented below. Changing this forces a new resource to be created.
        """
        ...

    @relative_name.setter
    def relative_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[float]:
        """
        The TTL value of the Profile used by Local DNS resolvers and clients.
        """
        ...

    @ttl.setter
    def ttl(self, value: pulumi.Input[float]):
        ...


@pulumi.input_type
class ProfileMonitorConfigArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[float],
                 protocol: pulumi.Input[str],
                 custom_headers: Optional[pulumi.Input[List[pulumi.Input['ProfileMonitorConfigCustomHeaderArgs']]]] = None,
                 expected_status_code_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 interval_in_seconds: Optional[pulumi.Input[float]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 tolerated_number_of_failures: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] port: The port number used by the monitoring checks.
        :param pulumi.Input[str] protocol: The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
        :param pulumi.Input[List[pulumi.Input['ProfileMonitorConfigCustomHeaderArgs']]] custom_headers: One or more `custom_header` blocks as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] expected_status_code_ranges: A list of status code ranges in the format of `100-101`.
        :param pulumi.Input[float] interval_in_seconds: The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
        :param pulumi.Input[str] path: The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
        :param pulumi.Input[float] timeout_in_seconds: The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
        :param pulumi.Input[float] tolerated_number_of_failures: The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "customHeaders", custom_headers)
        pulumi.set(__self__, "expectedStatusCodeRanges", expected_status_code_ranges)
        pulumi.set(__self__, "intervalInSeconds", interval_in_seconds)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "timeoutInSeconds", timeout_in_seconds)
        pulumi.set(__self__, "toleratedNumberOfFailures", tolerated_number_of_failures)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        The port number used by the monitoring checks.
        """
        ...

    @port.setter
    def port(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
        """
        ...

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[List[pulumi.Input['ProfileMonitorConfigCustomHeaderArgs']]]]:
        """
        One or more `custom_header` blocks as defined below.
        """
        ...

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[List[pulumi.Input['ProfileMonitorConfigCustomHeaderArgs']]]]):
        ...

    @property
    @pulumi.getter(name="expectedStatusCodeRanges")
    def expected_status_code_ranges(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of status code ranges in the format of `100-101`.
        """
        ...

    @expected_status_code_ranges.setter
    def expected_status_code_ranges(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
        """
        ...

    @interval_in_seconds.setter
    def interval_in_seconds(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
        """
        ...

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
        """
        ...

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="toleratedNumberOfFailures")
    def tolerated_number_of_failures(self) -> Optional[pulumi.Input[float]]:
        """
        The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
        """
        ...

    @tolerated_number_of_failures.setter
    def tolerated_number_of_failures(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ProfileMonitorConfigCustomHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the custom header.
        :param pulumi.Input[str] value: The value of custom header. Applicable for Http and Https protocol.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom header.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of custom header. Applicable for Http and Https protocol.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


