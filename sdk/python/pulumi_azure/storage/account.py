# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Account']


class Account(pulumi.CustomResource):
    access_tier: pulumi.Output[str] = pulumi.output_property("accessTier")
    """
    Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
    """
    account_kind: pulumi.Output[Optional[str]] = pulumi.output_property("accountKind")
    """
    Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
    """
    account_replication_type: pulumi.Output[str] = pulumi.output_property("accountReplicationType")
    """
    Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
    """
    account_tier: pulumi.Output[str] = pulumi.output_property("accountTier")
    """
    Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
    """
    allow_blob_public_access: pulumi.Output[Optional[bool]] = pulumi.output_property("allowBlobPublicAccess")
    """
    Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
    """
    blob_properties: pulumi.Output['outputs.AccountBlobProperties'] = pulumi.output_property("blobProperties")
    """
    A `blob_properties` block as defined below.
    """
    custom_domain: pulumi.Output[Optional['outputs.AccountCustomDomain']] = pulumi.output_property("customDomain")
    """
    A `custom_domain` block as documented below.
    """
    enable_https_traffic_only: pulumi.Output[Optional[bool]] = pulumi.output_property("enableHttpsTrafficOnly")
    """
    Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
    for more information. Defaults to `true`.
    """
    identity: pulumi.Output['outputs.AccountIdentity'] = pulumi.output_property("identity")
    """
    A `identity` block as defined below.
    """
    is_hns_enabled: pulumi.Output[Optional[bool]] = pulumi.output_property("isHnsEnabled")
    """
    Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
    """
    location: pulumi.Output[str] = pulumi.output_property("location")
    """
    Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
    """
    name: pulumi.Output[str] = pulumi.output_property("name")
    """
    Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
    """
    network_rules: pulumi.Output['outputs.AccountNetworkRules'] = pulumi.output_property("networkRules")
    """
    A `network_rules` block as documented below.
    """
    primary_access_key: pulumi.Output[str] = pulumi.output_property("primaryAccessKey")
    """
    The primary access key for the storage account.
    """
    primary_blob_connection_string: pulumi.Output[str] = pulumi.output_property("primaryBlobConnectionString")
    """
    The connection string associated with the primary blob location.
    """
    primary_blob_endpoint: pulumi.Output[str] = pulumi.output_property("primaryBlobEndpoint")
    """
    The endpoint URL for blob storage in the primary location.
    """
    primary_blob_host: pulumi.Output[str] = pulumi.output_property("primaryBlobHost")
    """
    The hostname with port if applicable for blob storage in the primary location.
    """
    primary_connection_string: pulumi.Output[str] = pulumi.output_property("primaryConnectionString")
    """
    The connection string associated with the primary location.
    """
    primary_dfs_endpoint: pulumi.Output[str] = pulumi.output_property("primaryDfsEndpoint")
    """
    The endpoint URL for DFS storage in the primary location.
    """
    primary_dfs_host: pulumi.Output[str] = pulumi.output_property("primaryDfsHost")
    """
    The hostname with port if applicable for DFS storage in the primary location.
    """
    primary_file_endpoint: pulumi.Output[str] = pulumi.output_property("primaryFileEndpoint")
    """
    The endpoint URL for file storage in the primary location.
    """
    primary_file_host: pulumi.Output[str] = pulumi.output_property("primaryFileHost")
    """
    The hostname with port if applicable for file storage in the primary location.
    """
    primary_location: pulumi.Output[str] = pulumi.output_property("primaryLocation")
    """
    The primary location of the storage account.
    """
    primary_queue_endpoint: pulumi.Output[str] = pulumi.output_property("primaryQueueEndpoint")
    """
    The endpoint URL for queue storage in the primary location.
    """
    primary_queue_host: pulumi.Output[str] = pulumi.output_property("primaryQueueHost")
    """
    The hostname with port if applicable for queue storage in the primary location.
    """
    primary_table_endpoint: pulumi.Output[str] = pulumi.output_property("primaryTableEndpoint")
    """
    The endpoint URL for table storage in the primary location.
    """
    primary_table_host: pulumi.Output[str] = pulumi.output_property("primaryTableHost")
    """
    The hostname with port if applicable for table storage in the primary location.
    """
    primary_web_endpoint: pulumi.Output[str] = pulumi.output_property("primaryWebEndpoint")
    """
    The endpoint URL for web storage in the primary location.
    """
    primary_web_host: pulumi.Output[str] = pulumi.output_property("primaryWebHost")
    """
    The hostname with port if applicable for web storage in the primary location.
    """
    queue_properties: pulumi.Output['outputs.AccountQueueProperties'] = pulumi.output_property("queueProperties")
    """
    A `queue_properties` block as defined below.
    """
    resource_group_name: pulumi.Output[str] = pulumi.output_property("resourceGroupName")
    """
    The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
    """
    secondary_access_key: pulumi.Output[str] = pulumi.output_property("secondaryAccessKey")
    """
    The secondary access key for the storage account.
    """
    secondary_blob_connection_string: pulumi.Output[str] = pulumi.output_property("secondaryBlobConnectionString")
    """
    The connection string associated with the secondary blob location.
    """
    secondary_blob_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryBlobEndpoint")
    """
    The endpoint URL for blob storage in the secondary location.
    """
    secondary_blob_host: pulumi.Output[str] = pulumi.output_property("secondaryBlobHost")
    """
    The hostname with port if applicable for blob storage in the secondary location.
    """
    secondary_connection_string: pulumi.Output[str] = pulumi.output_property("secondaryConnectionString")
    """
    The connection string associated with the secondary location.
    """
    secondary_dfs_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryDfsEndpoint")
    """
    The endpoint URL for DFS storage in the secondary location.
    """
    secondary_dfs_host: pulumi.Output[str] = pulumi.output_property("secondaryDfsHost")
    """
    The hostname with port if applicable for DFS storage in the secondary location.
    """
    secondary_file_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryFileEndpoint")
    """
    The endpoint URL for file storage in the secondary location.
    """
    secondary_file_host: pulumi.Output[str] = pulumi.output_property("secondaryFileHost")
    """
    The hostname with port if applicable for file storage in the secondary location.
    """
    secondary_location: pulumi.Output[str] = pulumi.output_property("secondaryLocation")
    """
    The secondary location of the storage account.
    """
    secondary_queue_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryQueueEndpoint")
    """
    The endpoint URL for queue storage in the secondary location.
    """
    secondary_queue_host: pulumi.Output[str] = pulumi.output_property("secondaryQueueHost")
    """
    The hostname with port if applicable for queue storage in the secondary location.
    """
    secondary_table_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryTableEndpoint")
    """
    The endpoint URL for table storage in the secondary location.
    """
    secondary_table_host: pulumi.Output[str] = pulumi.output_property("secondaryTableHost")
    """
    The hostname with port if applicable for table storage in the secondary location.
    """
    secondary_web_endpoint: pulumi.Output[str] = pulumi.output_property("secondaryWebEndpoint")
    """
    The endpoint URL for web storage in the secondary location.
    """
    secondary_web_host: pulumi.Output[str] = pulumi.output_property("secondaryWebHost")
    """
    The hostname with port if applicable for web storage in the secondary location.
    """
    static_website: pulumi.Output[Optional['outputs.AccountStaticWebsite']] = pulumi.output_property("staticWebsite")
    """
    A `static_website` block as defined below.
    """
    tags: pulumi.Output[Optional[Dict[str, str]]] = pulumi.output_property("tags")
    """
    A mapping of tags to assign to the resource.
    """
    # pylint: disable=no-self-argument
    def __init__(__self__, resource_name, opts: Optional[pulumi.ResourceOptions] = None, access_tier: Optional[pulumi.Input[str]] = None, account_kind: Optional[pulumi.Input[str]] = None, account_replication_type: Optional[pulumi.Input[str]] = None, account_tier: Optional[pulumi.Input[str]] = None, allow_blob_public_access: Optional[pulumi.Input[bool]] = None, blob_properties: Optional[pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']]] = None, custom_domain: Optional[pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']]] = None, enable_https_traffic_only: Optional[pulumi.Input[bool]] = None, identity: Optional[pulumi.Input[pulumi.InputType['AccountIdentityArgs']]] = None, is_hns_enabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, network_rules: Optional[pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']]] = None, queue_properties: Optional[pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']]] = None, resource_group_name: Optional[pulumi.Input[str]] = None, static_website: Optional[pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, __props__=None, __name__=None, __opts__=None) -> None:
        """
        Manages an Azure Storage Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="GRS",
            tags={
                "environment": "staging",
            })
        ```
        ### With Network Rules

        ```python
        import pulumi
        import pulumi_azure as azure

        example_resource_group = azure.core.ResourceGroup("exampleResourceGroup", location="West Europe")
        example_virtual_network = azure.network.VirtualNetwork("exampleVirtualNetwork",
            address_spaces=["10.0.0.0/16"],
            location=example_resource_group.location,
            resource_group_name=example_resource_group.name)
        example_subnet = azure.network.Subnet("exampleSubnet",
            resource_group_name=example_resource_group.name,
            virtual_network_name=example_virtual_network.name,
            address_prefix="10.0.2.0/24",
            service_endpoints=[
                "Microsoft.Sql",
                "Microsoft.Storage",
            ])
        example_account = azure.storage.Account("exampleAccount",
            resource_group_name=example_resource_group.name,
            location=example_resource_group.location,
            account_tier="Standard",
            account_replication_type="LRS",
            network_rules={
                "default_action": "Deny",
                "ip_rules": ["100.0.0.1"],
                "virtual_network_subnet_ids": [example_subnet.id],
            },
            tags={
                "environment": "staging",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_tier: Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
        :param pulumi.Input[str] account_kind: Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
        :param pulumi.Input[str] account_replication_type: Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
        :param pulumi.Input[str] account_tier: Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] allow_blob_public_access: Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
        :param pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']] blob_properties: A `blob_properties` block as defined below.
        :param pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']] custom_domain: A `custom_domain` block as documented below.
        :param pulumi.Input[bool] enable_https_traffic_only: Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
               for more information. Defaults to `true`.
        :param pulumi.Input[pulumi.InputType['AccountIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[bool] is_hns_enabled: Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
        :param pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']] network_rules: A `network_rules` block as documented below.
        :param pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']] queue_properties: A `queue_properties` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
        :param pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']] static_website: A `static_website` block as defined below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['access_tier'] = access_tier
            __props__['account_kind'] = account_kind
            if account_replication_type is None:
                raise TypeError("Missing required property 'account_replication_type'")
            __props__['account_replication_type'] = account_replication_type
            if account_tier is None:
                raise TypeError("Missing required property 'account_tier'")
            __props__['account_tier'] = account_tier
            __props__['allow_blob_public_access'] = allow_blob_public_access
            __props__['blob_properties'] = blob_properties
            __props__['custom_domain'] = custom_domain
            __props__['enable_https_traffic_only'] = enable_https_traffic_only
            __props__['identity'] = identity
            __props__['is_hns_enabled'] = is_hns_enabled
            __props__['location'] = location
            __props__['name'] = name
            __props__['network_rules'] = network_rules
            __props__['queue_properties'] = queue_properties
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['static_website'] = static_website
            __props__['tags'] = tags
            __props__['primary_access_key'] = None
            __props__['primary_blob_connection_string'] = None
            __props__['primary_blob_endpoint'] = None
            __props__['primary_blob_host'] = None
            __props__['primary_connection_string'] = None
            __props__['primary_dfs_endpoint'] = None
            __props__['primary_dfs_host'] = None
            __props__['primary_file_endpoint'] = None
            __props__['primary_file_host'] = None
            __props__['primary_location'] = None
            __props__['primary_queue_endpoint'] = None
            __props__['primary_queue_host'] = None
            __props__['primary_table_endpoint'] = None
            __props__['primary_table_host'] = None
            __props__['primary_web_endpoint'] = None
            __props__['primary_web_host'] = None
            __props__['secondary_access_key'] = None
            __props__['secondary_blob_connection_string'] = None
            __props__['secondary_blob_endpoint'] = None
            __props__['secondary_blob_host'] = None
            __props__['secondary_connection_string'] = None
            __props__['secondary_dfs_endpoint'] = None
            __props__['secondary_dfs_host'] = None
            __props__['secondary_file_endpoint'] = None
            __props__['secondary_file_host'] = None
            __props__['secondary_location'] = None
            __props__['secondary_queue_endpoint'] = None
            __props__['secondary_queue_host'] = None
            __props__['secondary_table_endpoint'] = None
            __props__['secondary_table_host'] = None
            __props__['secondary_web_endpoint'] = None
            __props__['secondary_web_host'] = None
        super(Account, __self__).__init__(
            'azure:storage/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str, id: str, opts: Optional[pulumi.ResourceOptions] = None, access_tier: Optional[pulumi.Input[str]] = None, account_kind: Optional[pulumi.Input[str]] = None, account_replication_type: Optional[pulumi.Input[str]] = None, account_tier: Optional[pulumi.Input[str]] = None, allow_blob_public_access: Optional[pulumi.Input[bool]] = None, blob_properties: Optional[pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']]] = None, custom_domain: Optional[pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']]] = None, enable_https_traffic_only: Optional[pulumi.Input[bool]] = None, identity: Optional[pulumi.Input[pulumi.InputType['AccountIdentityArgs']]] = None, is_hns_enabled: Optional[pulumi.Input[bool]] = None, location: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, network_rules: Optional[pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']]] = None, primary_access_key: Optional[pulumi.Input[str]] = None, primary_blob_connection_string: Optional[pulumi.Input[str]] = None, primary_blob_endpoint: Optional[pulumi.Input[str]] = None, primary_blob_host: Optional[pulumi.Input[str]] = None, primary_connection_string: Optional[pulumi.Input[str]] = None, primary_dfs_endpoint: Optional[pulumi.Input[str]] = None, primary_dfs_host: Optional[pulumi.Input[str]] = None, primary_file_endpoint: Optional[pulumi.Input[str]] = None, primary_file_host: Optional[pulumi.Input[str]] = None, primary_location: Optional[pulumi.Input[str]] = None, primary_queue_endpoint: Optional[pulumi.Input[str]] = None, primary_queue_host: Optional[pulumi.Input[str]] = None, primary_table_endpoint: Optional[pulumi.Input[str]] = None, primary_table_host: Optional[pulumi.Input[str]] = None, primary_web_endpoint: Optional[pulumi.Input[str]] = None, primary_web_host: Optional[pulumi.Input[str]] = None, queue_properties: Optional[pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']]] = None, resource_group_name: Optional[pulumi.Input[str]] = None, secondary_access_key: Optional[pulumi.Input[str]] = None, secondary_blob_connection_string: Optional[pulumi.Input[str]] = None, secondary_blob_endpoint: Optional[pulumi.Input[str]] = None, secondary_blob_host: Optional[pulumi.Input[str]] = None, secondary_connection_string: Optional[pulumi.Input[str]] = None, secondary_dfs_endpoint: Optional[pulumi.Input[str]] = None, secondary_dfs_host: Optional[pulumi.Input[str]] = None, secondary_file_endpoint: Optional[pulumi.Input[str]] = None, secondary_file_host: Optional[pulumi.Input[str]] = None, secondary_location: Optional[pulumi.Input[str]] = None, secondary_queue_endpoint: Optional[pulumi.Input[str]] = None, secondary_queue_host: Optional[pulumi.Input[str]] = None, secondary_table_endpoint: Optional[pulumi.Input[str]] = None, secondary_table_host: Optional[pulumi.Input[str]] = None, secondary_web_endpoint: Optional[pulumi.Input[str]] = None, secondary_web_host: Optional[pulumi.Input[str]] = None, static_website: Optional[pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']]] = None, tags: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_tier: Defines the access tier for `BlobStorage`, `FileStorage` and `StorageV2` accounts. Valid options are `Hot` and `Cool`, defaults to `Hot`.
        :param pulumi.Input[str] account_kind: Defines the Kind of account. Valid options are `BlobStorage`, `BlockBlobStorage`, `FileStorage`, `Storage` and `StorageV2`. Changing this forces a new resource to be created. Defaults to `StorageV2`.
        :param pulumi.Input[str] account_replication_type: Defines the type of replication to use for this storage account. Valid options are `LRS`, `GRS`, `RAGRS`, `ZRS`, `GZRS` and `RAGZRS`.
        :param pulumi.Input[str] account_tier: Defines the Tier to use for this storage account. Valid options are `Standard` and `Premium`. For `BlockBlobStorage` and `FileStorage` accounts only `Premium` is valid. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] allow_blob_public_access: Allow or disallow public access to all blobs or containers in the storage account. Defaults to `false`.
        :param pulumi.Input[pulumi.InputType['AccountBlobPropertiesArgs']] blob_properties: A `blob_properties` block as defined below.
        :param pulumi.Input[pulumi.InputType['AccountCustomDomainArgs']] custom_domain: A `custom_domain` block as documented below.
        :param pulumi.Input[bool] enable_https_traffic_only: Boolean flag which forces HTTPS if enabled, see [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
               for more information. Defaults to `true`.
        :param pulumi.Input[pulumi.InputType['AccountIdentityArgs']] identity: A `identity` block as defined below.
        :param pulumi.Input[bool] is_hns_enabled: Is Hierarchical Namespace enabled? This can be used with Azure Data Lake Storage Gen 2 ([see here for more information](https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-quickstart-create-account/)). Changing this forces a new resource to be created.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        :param pulumi.Input[str] name: Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
        :param pulumi.Input[pulumi.InputType['AccountNetworkRulesArgs']] network_rules: A `network_rules` block as documented below.
        :param pulumi.Input[str] primary_access_key: The primary access key for the storage account.
        :param pulumi.Input[str] primary_blob_connection_string: The connection string associated with the primary blob location.
        :param pulumi.Input[str] primary_blob_endpoint: The endpoint URL for blob storage in the primary location.
        :param pulumi.Input[str] primary_blob_host: The hostname with port if applicable for blob storage in the primary location.
        :param pulumi.Input[str] primary_connection_string: The connection string associated with the primary location.
        :param pulumi.Input[str] primary_dfs_endpoint: The endpoint URL for DFS storage in the primary location.
        :param pulumi.Input[str] primary_dfs_host: The hostname with port if applicable for DFS storage in the primary location.
        :param pulumi.Input[str] primary_file_endpoint: The endpoint URL for file storage in the primary location.
        :param pulumi.Input[str] primary_file_host: The hostname with port if applicable for file storage in the primary location.
        :param pulumi.Input[str] primary_location: The primary location of the storage account.
        :param pulumi.Input[str] primary_queue_endpoint: The endpoint URL for queue storage in the primary location.
        :param pulumi.Input[str] primary_queue_host: The hostname with port if applicable for queue storage in the primary location.
        :param pulumi.Input[str] primary_table_endpoint: The endpoint URL for table storage in the primary location.
        :param pulumi.Input[str] primary_table_host: The hostname with port if applicable for table storage in the primary location.
        :param pulumi.Input[str] primary_web_endpoint: The endpoint URL for web storage in the primary location.
        :param pulumi.Input[str] primary_web_host: The hostname with port if applicable for web storage in the primary location.
        :param pulumi.Input[pulumi.InputType['AccountQueuePropertiesArgs']] queue_properties: A `queue_properties` block as defined below.
        :param pulumi.Input[str] resource_group_name: The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] secondary_access_key: The secondary access key for the storage account.
        :param pulumi.Input[str] secondary_blob_connection_string: The connection string associated with the secondary blob location.
        :param pulumi.Input[str] secondary_blob_endpoint: The endpoint URL for blob storage in the secondary location.
        :param pulumi.Input[str] secondary_blob_host: The hostname with port if applicable for blob storage in the secondary location.
        :param pulumi.Input[str] secondary_connection_string: The connection string associated with the secondary location.
        :param pulumi.Input[str] secondary_dfs_endpoint: The endpoint URL for DFS storage in the secondary location.
        :param pulumi.Input[str] secondary_dfs_host: The hostname with port if applicable for DFS storage in the secondary location.
        :param pulumi.Input[str] secondary_file_endpoint: The endpoint URL for file storage in the secondary location.
        :param pulumi.Input[str] secondary_file_host: The hostname with port if applicable for file storage in the secondary location.
        :param pulumi.Input[str] secondary_location: The secondary location of the storage account.
        :param pulumi.Input[str] secondary_queue_endpoint: The endpoint URL for queue storage in the secondary location.
        :param pulumi.Input[str] secondary_queue_host: The hostname with port if applicable for queue storage in the secondary location.
        :param pulumi.Input[str] secondary_table_endpoint: The endpoint URL for table storage in the secondary location.
        :param pulumi.Input[str] secondary_table_host: The hostname with port if applicable for table storage in the secondary location.
        :param pulumi.Input[str] secondary_web_endpoint: The endpoint URL for web storage in the secondary location.
        :param pulumi.Input[str] secondary_web_host: The hostname with port if applicable for web storage in the secondary location.
        :param pulumi.Input[pulumi.InputType['AccountStaticWebsiteArgs']] static_website: A `static_website` block as defined below.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access_tier"] = access_tier
        __props__["account_kind"] = account_kind
        __props__["account_replication_type"] = account_replication_type
        __props__["account_tier"] = account_tier
        __props__["allow_blob_public_access"] = allow_blob_public_access
        __props__["blob_properties"] = blob_properties
        __props__["custom_domain"] = custom_domain
        __props__["enable_https_traffic_only"] = enable_https_traffic_only
        __props__["identity"] = identity
        __props__["is_hns_enabled"] = is_hns_enabled
        __props__["location"] = location
        __props__["name"] = name
        __props__["network_rules"] = network_rules
        __props__["primary_access_key"] = primary_access_key
        __props__["primary_blob_connection_string"] = primary_blob_connection_string
        __props__["primary_blob_endpoint"] = primary_blob_endpoint
        __props__["primary_blob_host"] = primary_blob_host
        __props__["primary_connection_string"] = primary_connection_string
        __props__["primary_dfs_endpoint"] = primary_dfs_endpoint
        __props__["primary_dfs_host"] = primary_dfs_host
        __props__["primary_file_endpoint"] = primary_file_endpoint
        __props__["primary_file_host"] = primary_file_host
        __props__["primary_location"] = primary_location
        __props__["primary_queue_endpoint"] = primary_queue_endpoint
        __props__["primary_queue_host"] = primary_queue_host
        __props__["primary_table_endpoint"] = primary_table_endpoint
        __props__["primary_table_host"] = primary_table_host
        __props__["primary_web_endpoint"] = primary_web_endpoint
        __props__["primary_web_host"] = primary_web_host
        __props__["queue_properties"] = queue_properties
        __props__["resource_group_name"] = resource_group_name
        __props__["secondary_access_key"] = secondary_access_key
        __props__["secondary_blob_connection_string"] = secondary_blob_connection_string
        __props__["secondary_blob_endpoint"] = secondary_blob_endpoint
        __props__["secondary_blob_host"] = secondary_blob_host
        __props__["secondary_connection_string"] = secondary_connection_string
        __props__["secondary_dfs_endpoint"] = secondary_dfs_endpoint
        __props__["secondary_dfs_host"] = secondary_dfs_host
        __props__["secondary_file_endpoint"] = secondary_file_endpoint
        __props__["secondary_file_host"] = secondary_file_host
        __props__["secondary_location"] = secondary_location
        __props__["secondary_queue_endpoint"] = secondary_queue_endpoint
        __props__["secondary_queue_host"] = secondary_queue_host
        __props__["secondary_table_endpoint"] = secondary_table_endpoint
        __props__["secondary_table_host"] = secondary_table_host
        __props__["secondary_web_endpoint"] = secondary_web_endpoint
        __props__["secondary_web_host"] = secondary_web_host
        __props__["static_website"] = static_website
        __props__["tags"] = tags
        return Account(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

