# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'AccountBlobProperties',
    'AccountBlobPropertiesCorsRule',
    'AccountBlobPropertiesDeleteRetentionPolicy',
    'AccountCustomDomain',
    'AccountIdentity',
    'AccountNetworkRules',
    'AccountQueueProperties',
    'AccountQueuePropertiesCorsRule',
    'AccountQueuePropertiesHourMetrics',
    'AccountQueuePropertiesLogging',
    'AccountQueuePropertiesMinuteMetrics',
    'AccountStaticWebsite',
    'ManagementPolicyRule',
    'ManagementPolicyRuleActions',
    'ManagementPolicyRuleActionsBaseBlob',
    'ManagementPolicyRuleActionsSnapshot',
    'ManagementPolicyRuleFilters',
    'ShareAcl',
    'ShareAclAccessPolicy',
    'TableAcl',
    'TableAclAccessPolicy',
    'GetAccountBlobContainerSASPermissions',
    'GetAccountCustomDomain',
    'GetAccountSASPermissions',
    'GetAccountSASResourceTypes',
    'GetAccountSASServices',
    'GetPolicyRule',
    'GetPolicyRuleAction',
    'GetPolicyRuleActionBaseBlob',
    'GetPolicyRuleActionSnapshot',
    'GetPolicyRuleFilter',
]

@pulumi.output_type
class AccountBlobProperties(dict):
    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[List['outputs.AccountBlobPropertiesCorsRule']]:
        """
        A `cors_rule` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="deleteRetentionPolicy")
    def delete_retention_policy(self) -> Optional['outputs.AccountBlobPropertiesDeleteRetentionPolicy']:
        """
        A `delete_retention_policy` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountBlobPropertiesCorsRule(dict):
    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> List[str]:
        """
        A list of headers that are allowed to be a part of the cross-origin request.
        """
        ...

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> List[str]:
        """
        A list of http headers that are allowed to be executed by the origin. Valid options are
        `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS`, `PUT` or `PATCH`.
        """
        ...

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> List[str]:
        """
        A list of origin domains that will be allowed by CORS.
        """
        ...

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> List[str]:
        """
        A list of response headers that are exposed to CORS clients.
        """
        ...

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> float:
        """
        The number of seconds the client should cache a preflight response.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountBlobPropertiesDeleteRetentionPolicy(dict):
    @property
    @pulumi.getter
    def days(self) -> Optional[float]:
        """
        Specifies the number of days that the blob should be retained, between `1` and `365` days. Defaults to `7`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountCustomDomain(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Custom Domain Name to use for the Storage Account, which will be validated by Azure.
        """
        ...

    @property
    @pulumi.getter(name="useSubdomain")
    def use_subdomain(self) -> Optional[bool]:
        """
        Should the Custom Domain Name be validated by using indirect CNAME validation?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountIdentity(dict):
    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        """
        The Principal ID for the Service Principal associated with the Identity of this Storage Account.
        """
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        """
        The Tenant ID for the Service Principal associated with the Identity of this Storage Account.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the identity type of the Storage Account. At this time the only allowed value is `SystemAssigned`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountNetworkRules(dict):
    @property
    @pulumi.getter
    def bypasses(self) -> Optional[List[str]]:
        """
        Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are
        any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
        """
        ...

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        """
        Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
        """
        ...

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[List[str]]:
        """
        List of public IP or IP ranges in CIDR Format. Only IPV4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
        """
        ...

    @property
    @pulumi.getter(name="virtualNetworkSubnetIds")
    def virtual_network_subnet_ids(self) -> Optional[List[str]]:
        """
        A list of resource ids for subnets.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountQueueProperties(dict):
    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[List['outputs.AccountQueuePropertiesCorsRule']]:
        """
        A `cors_rule` block as defined above.
        """
        ...

    @property
    @pulumi.getter(name="hourMetrics")
    def hour_metrics(self) -> Optional['outputs.AccountQueuePropertiesHourMetrics']:
        """
        A `hour_metrics` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.AccountQueuePropertiesLogging']:
        """
        A `logging` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="minuteMetrics")
    def minute_metrics(self) -> Optional['outputs.AccountQueuePropertiesMinuteMetrics']:
        """
        A `minute_metrics` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountQueuePropertiesCorsRule(dict):
    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> List[str]:
        """
        A list of headers that are allowed to be a part of the cross-origin request.
        """
        ...

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> List[str]:
        """
        A list of http headers that are allowed to be executed by the origin. Valid options are
        `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS`, `PUT` or `PATCH`.
        """
        ...

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> List[str]:
        """
        A list of origin domains that will be allowed by CORS.
        """
        ...

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> List[str]:
        """
        A list of response headers that are exposed to CORS clients.
        """
        ...

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> float:
        """
        The number of seconds the client should cache a preflight response.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountQueuePropertiesHourMetrics(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates whether hour metrics are enabled for the Queue service. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter(name="includeApis")
    def include_apis(self) -> Optional[bool]:
        """
        Indicates whether metrics should generate summary statistics for called API operations.
        """
        ...

    @property
    @pulumi.getter(name="retentionPolicyDays")
    def retention_policy_days(self) -> Optional[float]:
        """
        Specifies the number of days that logs will be retained. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of storage analytics to configure. Changing this forces a new resource.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountQueuePropertiesLogging(dict):
    @property
    @pulumi.getter
    def delete(self) -> bool:
        """
        Indicates whether all delete requests should be logged. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter
    def read(self) -> bool:
        """
        Indicates whether all read requests should be logged. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter(name="retentionPolicyDays")
    def retention_policy_days(self) -> Optional[float]:
        """
        Specifies the number of days that logs will be retained. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of storage analytics to configure. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter
    def write(self) -> bool:
        """
        Indicates whether all write requests should be logged. Changing this forces a new resource.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountQueuePropertiesMinuteMetrics(dict):
    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates whether minute metrics are enabled for the Queue service. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter(name="includeApis")
    def include_apis(self) -> Optional[bool]:
        """
        Indicates whether metrics should generate summary statistics for called API operations.
        """
        ...

    @property
    @pulumi.getter(name="retentionPolicyDays")
    def retention_policy_days(self) -> Optional[float]:
        """
        Specifies the number of days that logs will be retained. Changing this forces a new resource.
        """
        ...

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of storage analytics to configure. Changing this forces a new resource.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccountStaticWebsite(dict):
    @property
    @pulumi.getter(name="error404Document")
    def error404_document(self) -> Optional[str]:
        """
        The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
        """
        ...

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[str]:
        """
        The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html. The value is case-sensitive.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagementPolicyRule(dict):
    @property
    @pulumi.getter
    def actions(self) -> 'outputs.ManagementPolicyRuleActions':
        """
        An `actions` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean to specify whether the rule is enabled.
        """
        ...

    @property
    @pulumi.getter
    def filters(self) -> Optional['outputs.ManagementPolicyRuleFilters']:
        """
        A `filter` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagementPolicyRuleActions(dict):
    @property
    @pulumi.getter(name="baseBlob")
    def base_blob(self) -> Optional['outputs.ManagementPolicyRuleActionsBaseBlob']:
        """
        A `base_blob` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def snapshot(self) -> Optional['outputs.ManagementPolicyRuleActionsSnapshot']:
        """
        A `snapshot` block as documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagementPolicyRuleActionsBaseBlob(dict):
    @property
    @pulumi.getter(name="deleteAfterDaysSinceModificationGreaterThan")
    def delete_after_days_since_modification_greater_than(self) -> Optional[float]:
        """
        The age in days after last modification to delete the blob. Must be at least 0.
        """
        ...

    @property
    @pulumi.getter(name="tierToArchiveAfterDaysSinceModificationGreaterThan")
    def tier_to_archive_after_days_since_modification_greater_than(self) -> Optional[float]:
        """
        The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier. Must be at least 0.
        """
        ...

    @property
    @pulumi.getter(name="tierToCoolAfterDaysSinceModificationGreaterThan")
    def tier_to_cool_after_days_since_modification_greater_than(self) -> Optional[float]:
        """
        The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier. Must be at least 0.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagementPolicyRuleActionsSnapshot(dict):
    @property
    @pulumi.getter(name="deleteAfterDaysSinceCreationGreaterThan")
    def delete_after_days_since_creation_greater_than(self) -> Optional[float]:
        """
        The age in days after create to delete the snaphot. Must be at least 0.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagementPolicyRuleFilters(dict):
    @property
    @pulumi.getter(name="blobTypes")
    def blob_types(self) -> Optional[List[str]]:
        """
        An array of predefined values. Only `blockBlob` is supported.
        """
        ...

    @property
    @pulumi.getter(name="prefixMatches")
    def prefix_matches(self) -> Optional[List[str]]:
        """
        An array of strings for prefixes to be matched.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ShareAcl(dict):
    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[List['outputs.ShareAclAccessPolicy']]:
        """
        An `access_policy` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID which should be used for this Shared Identifier.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ShareAclAccessPolicy(dict):
    @property
    @pulumi.getter
    def expiry(self) -> str:
        """
        The time at which this Access Policy should be valid until, in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The permissions which should be associated with this Shared Identifier. Possible value is combination of `r` (read), `w` (write), `d` (delete), and `l` (list).
        """
        ...

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The time at which this Access Policy should be valid from, in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableAcl(dict):
    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[List['outputs.TableAclAccessPolicy']]:
        """
        An `access_policy` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID which should be used for this Shared Identifier.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TableAclAccessPolicy(dict):
    @property
    @pulumi.getter
    def expiry(self) -> str:
        """
        The ISO8061 UTC time at which this Access Policy should be valid until.
        """
        ...

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The permissions which should associated with this Shared Identifier.
        """
        ...

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The ISO8061 UTC time at which this Access Policy should be valid from.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountBlobContainerSASPermissions(dict):
    @property
    @pulumi.getter
    def add(self) -> bool:
        """
        Should Add permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def create(self) -> bool:
        """
        Should Create permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def delete(self) -> bool:
        """
        Should Delete permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def list(self) -> bool:
        """
        Should List permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def read(self) -> bool:
        """
        Should Read permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def write(self) -> bool:
        """
        Should Write permissions be enabled for this SAS?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountCustomDomain(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Storage Account
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountSASPermissions(dict):
    @property
    @pulumi.getter
    def add(self) -> bool:
        """
        Should Add permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def create(self) -> bool:
        """
        Should Create permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def delete(self) -> bool:
        """
        Should Delete permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def list(self) -> bool:
        """
        Should List permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def process(self) -> bool:
        """
        Should Process permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def read(self) -> bool:
        """
        Should Read permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def update(self) -> bool:
        """
        Should Update permissions be enabled for this SAS?
        """
        ...

    @property
    @pulumi.getter
    def write(self) -> bool:
        """
        Should Write permissions be enabled for this SAS?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountSASResourceTypes(dict):
    @property
    @pulumi.getter
    def container(self) -> bool:
        """
        Should permission be granted to the container?
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> bool:
        """
        Should permission be granted only to a specific object?
        """
        ...

    @property
    @pulumi.getter
    def service(self) -> bool:
        """
        Should permission be granted to the entire service?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAccountSASServices(dict):
    @property
    @pulumi.getter
    def blob(self) -> bool:
        """
        Should permission be granted to `blob` services within this storage account?
        """
        ...

    @property
    @pulumi.getter
    def file(self) -> bool:
        """
        Should permission be granted to `file` services within this storage account?
        """
        ...

    @property
    @pulumi.getter
    def queue(self) -> bool:
        """
        Should permission be granted to `queue` services within this storage account?
        """
        ...

    @property
    @pulumi.getter
    def table(self) -> bool:
        """
        Should permission be granted to `table` services within this storage account?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyRule(dict):
    @property
    @pulumi.getter
    def actions(self) -> List['outputs.GetPolicyRuleAction']:
        """
        An `actions` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean to specify whether the rule is enabled.
        """
        ...

    @property
    @pulumi.getter
    def filters(self) -> List['outputs.GetPolicyRuleFilter']:
        """
        A `filter` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyRuleAction(dict):
    @property
    @pulumi.getter(name="baseBlobs")
    def base_blobs(self) -> List['outputs.GetPolicyRuleActionBaseBlob']:
        """
        A `base_blob` block as documented below.
        """
        ...

    @property
    @pulumi.getter
    def snapshots(self) -> List['outputs.GetPolicyRuleActionSnapshot']:
        """
        A `snapshot` block as documented below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyRuleActionBaseBlob(dict):
    @property
    @pulumi.getter(name="deleteAfterDaysSinceModificationGreaterThan")
    def delete_after_days_since_modification_greater_than(self) -> float:
        """
        The age in days after last modification to delete the blob.
        """
        ...

    @property
    @pulumi.getter(name="tierToArchiveAfterDaysSinceModificationGreaterThan")
    def tier_to_archive_after_days_since_modification_greater_than(self) -> float:
        """
        The age in days after last modification to tier blobs to archive storage. Supports blob currently at Hot or Cool tier.
        """
        ...

    @property
    @pulumi.getter(name="tierToCoolAfterDaysSinceModificationGreaterThan")
    def tier_to_cool_after_days_since_modification_greater_than(self) -> float:
        """
        The age in days after last modification to tier blobs to cool storage. Supports blob currently at Hot tier.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyRuleActionSnapshot(dict):
    @property
    @pulumi.getter(name="deleteAfterDaysSinceCreationGreaterThan")
    def delete_after_days_since_creation_greater_than(self) -> float:
        """
        The age in days after create to delete the snaphot.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetPolicyRuleFilter(dict):
    @property
    @pulumi.getter(name="blobTypes")
    def blob_types(self) -> List[str]:
        """
        An array of predefined values. Only `blockBlob` is supported.
        """
        ...

    @property
    @pulumi.getter(name="prefixMatches")
    def prefix_matches(self) -> List[str]:
        """
        An array of strings for prefixes to be matched.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


