# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class PolicyFileShareBackup(dict):
    frequency: str = pulumi.output_property("frequency")
    """
    Sets the backup frequency. Currently, only `Daily` is supported
    """
    time: str = pulumi.output_property("time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyFileShareRetentionDaily(dict):
    count: float = pulumi.output_property("count")
    """
    The number of daily backups to keep. Must be between `1` and `180` (inclusive)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyVMBackup(dict):
    frequency: str = pulumi.output_property("frequency")
    """
    Sets the backup frequency. Must be either `Daily` or`Weekly`.
    """
    time: str = pulumi.output_property("time")
    """
    The time of day to perform the backup in 24hour format.
    """
    weekdays: Optional[List[str]] = pulumi.output_property("weekdays")
    """
    The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyVMRetentionDaily(dict):
    count: float = pulumi.output_property("count")
    """
    The number of yearly backups to keep. Must be between `1` and `9999`
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyVMRetentionMonthly(dict):
    count: float = pulumi.output_property("count")
    """
    The number of yearly backups to keep. Must be between `1` and `9999`
    """
    weekdays: List[str] = pulumi.output_property("weekdays")
    """
    The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
    """
    weeks: List[str] = pulumi.output_property("weeks")
    """
    The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyVMRetentionWeekly(dict):
    count: float = pulumi.output_property("count")
    """
    The number of yearly backups to keep. Must be between `1` and `9999`
    """
    weekdays: List[str] = pulumi.output_property("weekdays")
    """
    The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PolicyVMRetentionYearly(dict):
    count: float = pulumi.output_property("count")
    """
    The number of yearly backups to keep. Must be between `1` and `9999`
    """
    months: List[str] = pulumi.output_property("months")
    """
    The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
    """
    weekdays: List[str] = pulumi.output_property("weekdays")
    """
    The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
    """
    weeks: List[str] = pulumi.output_property("weeks")
    """
    The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


