# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'GroupContainer',
    'GroupContainerGpu',
    'GroupContainerLivenessProbe',
    'GroupContainerLivenessProbeHttpGet',
    'GroupContainerPort',
    'GroupContainerReadinessProbe',
    'GroupContainerReadinessProbeHttpGet',
    'GroupContainerVolume',
    'GroupDiagnostics',
    'GroupDiagnosticsLogAnalytics',
    'GroupIdentity',
    'GroupImageRegistryCredential',
    'KubernetesClusterAddonProfile',
    'KubernetesClusterAddonProfileAciConnectorLinux',
    'KubernetesClusterAddonProfileAzurePolicy',
    'KubernetesClusterAddonProfileHttpApplicationRouting',
    'KubernetesClusterAddonProfileKubeDashboard',
    'KubernetesClusterAddonProfileOmsAgent',
    'KubernetesClusterAddonProfileOmsAgentOmsAgentIdentity',
    'KubernetesClusterAutoScalerProfile',
    'KubernetesClusterDefaultNodePool',
    'KubernetesClusterIdentity',
    'KubernetesClusterKubeAdminConfig',
    'KubernetesClusterKubeConfig',
    'KubernetesClusterKubeletIdentity',
    'KubernetesClusterLinuxProfile',
    'KubernetesClusterLinuxProfileSshKey',
    'KubernetesClusterNetworkProfile',
    'KubernetesClusterNetworkProfileLoadBalancerProfile',
    'KubernetesClusterRoleBasedAccessControl',
    'KubernetesClusterRoleBasedAccessControlAzureActiveDirectory',
    'KubernetesClusterServicePrincipal',
    'KubernetesClusterWindowsProfile',
    'RegistryNetworkRuleSet',
    'RegistryNetworkRuleSetIpRule',
    'RegistryNetworkRuleSetVirtualNetwork',
    'GetKubernetesClusterAddonProfile',
    'GetKubernetesClusterAddonProfileAzurePolicy',
    'GetKubernetesClusterAddonProfileHttpApplicationRouting',
    'GetKubernetesClusterAddonProfileKubeDashboard',
    'GetKubernetesClusterAddonProfileOmsAgent',
    'GetKubernetesClusterAddonProfileOmsAgentOmsAgentIdentity',
    'GetKubernetesClusterAgentPoolProfile',
    'GetKubernetesClusterIdentity',
    'GetKubernetesClusterKubeAdminConfig',
    'GetKubernetesClusterKubeConfig',
    'GetKubernetesClusterKubeletIdentity',
    'GetKubernetesClusterLinuxProfile',
    'GetKubernetesClusterLinuxProfileSshKey',
    'GetKubernetesClusterNetworkProfile',
    'GetKubernetesClusterRoleBasedAccessControl',
    'GetKubernetesClusterRoleBasedAccessControlAzureActiveDirectory',
    'GetKubernetesClusterServicePrincipal',
    'GetKubernetesClusterWindowsProfile',
]

@pulumi.output_type
class GroupContainer(dict):
    commands: Optional[List[str]] = pulumi.output_property("commands")
    """
    A list of commands which should be run on the container. Changing this forces a new resource to be created.
    """
    cpu: float = pulumi.output_property("cpu")
    """
    The required number of CPU cores of the containers. Changing this forces a new resource to be created.
    """
    environment_variables: Optional[Dict[str, str]] = pulumi.output_property("environmentVariables")
    """
    A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
    """
    gpu: Optional['outputs.GroupContainerGpu'] = pulumi.output_property("gpu")
    """
    A `gpu` block as defined below. Changing this forces a new resource to be created.
    """
    image: str = pulumi.output_property("image")
    """
    The container image name. Changing this forces a new resource to be created.
    """
    liveness_probe: Optional['outputs.GroupContainerLivenessProbe'] = pulumi.output_property("livenessProbe")
    """
    The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
    """
    memory: float = pulumi.output_property("memory")
    """
    The required memory of the containers in GB. Changing this forces a new resource to be created.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Container Group. Changing this forces a new resource to be created.
    """
    ports: Optional[List['outputs.GroupContainerPort']] = pulumi.output_property("ports")
    """
    A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
    """
    readiness_probe: Optional['outputs.GroupContainerReadinessProbe'] = pulumi.output_property("readinessProbe")
    """
    The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
    """
    secure_environment_variables: Optional[Dict[str, str]] = pulumi.output_property("secureEnvironmentVariables")
    """
    A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
    """
    volumes: Optional[List['outputs.GroupContainerVolume']] = pulumi.output_property("volumes")
    """
    The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerGpu(dict):
    count: Optional[float] = pulumi.output_property("count")
    """
    The number of GPUs which should be assigned to this container. Allowed values are `1`, `2`, or `4`. Changing this forces a new resource to be created.
    """
    sku: Optional[str] = pulumi.output_property("sku")
    """
    The Sku which should be used for the GPU. Possible values are `K80`, `P100`, or `V100`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerLivenessProbe(dict):
    execs: Optional[List[str]] = pulumi.output_property("execs")
    """
    Commands to be run to validate container readiness. Changing this forces a new resource to be created.
    """
    failure_threshold: Optional[float] = pulumi.output_property("failureThreshold")
    """
    How many times to try the probe before restarting the container (liveness probe) or marking the container as unhealthy (readiness probe). The default value is `3` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    http_gets: Optional[List['outputs.GroupContainerLivenessProbeHttpGet']] = pulumi.output_property("httpGets")
    """
    The definition of the httpget for this container as documented in the `httpget` block below. Changing this forces a new resource to be created.
    """
    initial_delay_seconds: Optional[float] = pulumi.output_property("initialDelaySeconds")
    """
    Number of seconds after the container has started before liveness or readiness probes are initiated. Changing this forces a new resource to be created.
    """
    period_seconds: Optional[float] = pulumi.output_property("periodSeconds")
    """
    How often (in seconds) to perform the probe. The default value is `10` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    success_threshold: Optional[float] = pulumi.output_property("successThreshold")
    """
    Minimum consecutive successes for the probe to be considered successful after having failed. The default value is `1` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    timeout_seconds: Optional[float] = pulumi.output_property("timeoutSeconds")
    """
    Number of seconds after which the probe times out. The default value is `1` and the minimum value is `1`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerLivenessProbeHttpGet(dict):
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to access on the HTTP server. Changing this forces a new resource to be created.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The port number the container will expose. Changing this forces a new resource to be created.
    """
    scheme: Optional[str] = pulumi.output_property("scheme")
    """
    Scheme to use for connecting to the host. Possible values are `Http` and `Https`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerPort(dict):
    port: Optional[float] = pulumi.output_property("port")
    """
    The port number the container will expose. Changing this forces a new resource to be created.
    """
    protocol: Optional[str] = pulumi.output_property("protocol")
    """
    The network protocol associated with port. Possible values are `TCP` & `UDP`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerReadinessProbe(dict):
    execs: Optional[List[str]] = pulumi.output_property("execs")
    """
    Commands to be run to validate container readiness. Changing this forces a new resource to be created.
    """
    failure_threshold: Optional[float] = pulumi.output_property("failureThreshold")
    """
    How many times to try the probe before restarting the container (liveness probe) or marking the container as unhealthy (readiness probe). The default value is `3` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    http_gets: Optional[List['outputs.GroupContainerReadinessProbeHttpGet']] = pulumi.output_property("httpGets")
    """
    The definition of the httpget for this container as documented in the `httpget` block below. Changing this forces a new resource to be created.
    """
    initial_delay_seconds: Optional[float] = pulumi.output_property("initialDelaySeconds")
    """
    Number of seconds after the container has started before liveness or readiness probes are initiated. Changing this forces a new resource to be created.
    """
    period_seconds: Optional[float] = pulumi.output_property("periodSeconds")
    """
    How often (in seconds) to perform the probe. The default value is `10` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    success_threshold: Optional[float] = pulumi.output_property("successThreshold")
    """
    Minimum consecutive successes for the probe to be considered successful after having failed. The default value is `1` and the minimum value is `1`. Changing this forces a new resource to be created.
    """
    timeout_seconds: Optional[float] = pulumi.output_property("timeoutSeconds")
    """
    Number of seconds after which the probe times out. The default value is `1` and the minimum value is `1`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerReadinessProbeHttpGet(dict):
    path: Optional[str] = pulumi.output_property("path")
    """
    Path to access on the HTTP server. Changing this forces a new resource to be created.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    The port number the container will expose. Changing this forces a new resource to be created.
    """
    scheme: Optional[str] = pulumi.output_property("scheme")
    """
    Scheme to use for connecting to the host. Possible values are `Http` and `Https`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupContainerVolume(dict):
    mount_path: str = pulumi.output_property("mountPath")
    """
    The path on which this volume is to be mounted. Changing this forces a new resource to be created.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Container Group. Changing this forces a new resource to be created.
    """
    read_only: Optional[bool] = pulumi.output_property("readOnly")
    """
    Specify if the volume is to be mounted as read only or not. The default value is `false`. Changing this forces a new resource to be created.
    """
    share_name: str = pulumi.output_property("shareName")
    """
    The Azure storage share that is to be mounted as a volume. This must be created on the storage account specified as above. Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The access key for the Azure Storage account specified as above. Changing this forces a new resource to be created.
    """
    storage_account_name: str = pulumi.output_property("storageAccountName")
    """
    The Azure storage account from which the volume is to be mounted. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupDiagnostics(dict):
    log_analytics: 'outputs.GroupDiagnosticsLogAnalytics' = pulumi.output_property("logAnalytics")
    """
    A `log_analytics` block as defined below. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupDiagnosticsLogAnalytics(dict):
    log_type: Optional[str] = pulumi.output_property("logType")
    """
    The log type which should be used. Possible values are `ContainerInsights` and `ContainerInstanceLogs`. Changing this forces a new resource to be created.
    """
    metadata: Optional[Dict[str, str]] = pulumi.output_property("metadata")
    """
    Any metadata required for Log Analytics. Changing this forces a new resource to be created.
    """
    workspace_id: str = pulumi.output_property("workspaceId")
    """
    The Workspace ID of the Log Analytics Workspace. Changing this forces a new resource to be created.
    """
    workspace_key: str = pulumi.output_property("workspaceKey")
    """
    The Workspace Key of the Log Analytics Workspace. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`. Changing this forces a new resource to be created.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    type: str = pulumi.output_property("type")
    """
    The Managed Service Identity Type of this container group. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GroupImageRegistryCredential(dict):
    password: str = pulumi.output_property("password")
    """
    The password with which to connect to the registry. Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The address to use to connect to the registry without protocol ("https"/"http"). For example: "myacr.acr.io". Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The username with which to connect to the registry. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfile(dict):
    aci_connector_linux: Optional['outputs.KubernetesClusterAddonProfileAciConnectorLinux'] = pulumi.output_property("aciConnectorLinux")
    """
    A `aci_connector_linux` block. For more details, please visit [Create and configure an AKS cluster to use virtual nodes](https://docs.microsoft.com/en-us/azure/aks/virtual-nodes-portal).
    """
    azure_policy: Optional['outputs.KubernetesClusterAddonProfileAzurePolicy'] = pulumi.output_property("azurePolicy")
    """
    A `azure_policy` block as defined below. For more details please visit [Understand Azure Policy for Azure Kubernetes Service](https://docs.microsoft.com/en-ie/azure/governance/policy/concepts/rego-for-aks)
    """
    http_application_routing: Optional['outputs.KubernetesClusterAddonProfileHttpApplicationRouting'] = pulumi.output_property("httpApplicationRouting")
    """
    A `http_application_routing` block as defined below.
    """
    kube_dashboard: Optional['outputs.KubernetesClusterAddonProfileKubeDashboard'] = pulumi.output_property("kubeDashboard")
    """
    A `kube_dashboard` block as defined below.
    """
    oms_agent: Optional['outputs.KubernetesClusterAddonProfileOmsAgent'] = pulumi.output_property("omsAgent")
    """
    A `oms_agent` block as defined below. For more details, please visit [How to onboard Azure Monitor for containers](https://docs.microsoft.com/en-us/azure/monitoring/monitoring-container-insights-onboard).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileAciConnectorLinux(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the virtual node addon enabled?
    """
    subnet_name: Optional[str] = pulumi.output_property("subnetName")
    """
    The subnet name for the virtual nodes to run. This is required when `aci_connector_linux` `enabled` argument is set to `true`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileAzurePolicy(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the Azure Policy for Kubernetes Add On enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileHttpApplicationRouting(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is HTTP Application Routing Enabled? Changing this forces a new resource to be created.
    """
    http_application_routing_zone_name: Optional[str] = pulumi.output_property("httpApplicationRoutingZoneName")
    """
    The Zone Name of the HTTP Application Routing.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileKubeDashboard(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the Kubernetes Dashboard enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileOmsAgent(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the OMS Agent Enabled?
    """
    log_analytics_workspace_id: Optional[str] = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The ID of the Log Analytics Workspace which the OMS Agent should send data to. Must be present if `enabled` is `true`.
    """
    oms_agent_identities: Optional[List['outputs.KubernetesClusterAddonProfileOmsAgentOmsAgentIdentity']] = pulumi.output_property("omsAgentIdentities")
    """
    An `oms_agent_identity` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAddonProfileOmsAgentOmsAgentIdentity(dict):
    client_id: Optional[str] = pulumi.output_property("clientId")
    """
    The Client ID for the Service Principal.
    """
    object_id: Optional[str] = pulumi.output_property("objectId")
    """
    The Object ID of the user-defined Managed Identity used by the OMS Agents.
    """
    user_assigned_identity_id: Optional[str] = pulumi.output_property("userAssignedIdentityId")
    """
    The ID of the User Assigned Identity used by the OMS Agents.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterAutoScalerProfile(dict):
    balance_similar_node_groups: Optional[bool] = pulumi.output_property("balanceSimilarNodeGroups")
    """
    Detect similar node groups and balance the number of nodes between them. Defaults to `false`.
    """
    max_graceful_termination_sec: Optional[str] = pulumi.output_property("maxGracefulTerminationSec")
    """
    Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node. Defaults to `600`.
    """
    scale_down_delay_after_add: Optional[str] = pulumi.output_property("scaleDownDelayAfterAdd")
    """
    How long after the scale up of AKS nodes the scale down evaluation resumes. Defaults to `10m`.
    """
    scale_down_delay_after_delete: Optional[str] = pulumi.output_property("scaleDownDelayAfterDelete")
    """
    How long after node deletion that scale down evaluation resumes. Defaults to the value used for `scan_interval`.
    """
    scale_down_delay_after_failure: Optional[str] = pulumi.output_property("scaleDownDelayAfterFailure")
    """
    How long after scale down failure that scale down evaluation resumes. Defaults to `3m`.
    """
    scale_down_unneeded: Optional[str] = pulumi.output_property("scaleDownUnneeded")
    """
    How long a node should be unneeded before it is eligible for scale down. Defaults to `10m`.
    """
    scale_down_unready: Optional[str] = pulumi.output_property("scaleDownUnready")
    """
    How long an unready node should be unneeded before it is eligible for scale down. Defaults to `20m`.
    """
    scale_down_utilization_threshold: Optional[str] = pulumi.output_property("scaleDownUtilizationThreshold")
    """
    Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down. Defaults to `0.5`.
    """
    scan_interval: Optional[str] = pulumi.output_property("scanInterval")
    """
    How often the AKS Cluster should be re-evaluated for scale up/down. Defaults to `10s`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterDefaultNodePool(dict):
    availability_zones: Optional[List[str]] = pulumi.output_property("availabilityZones")
    """
    A list of Availability Zones across which the Node Pool should be spread.
    """
    enable_auto_scaling: Optional[bool] = pulumi.output_property("enableAutoScaling")
    """
    Should [the Kubernetes Auto Scaler](https://docs.microsoft.com/en-us/azure/aks/cluster-autoscaler) be enabled for this Node Pool? Defaults to `false`.
    """
    enable_node_public_ip: Optional[bool] = pulumi.output_property("enableNodePublicIp")
    """
    Should nodes in this Node Pool have a Public IP Address? Defaults to `false`.
    """
    max_count: Optional[float] = pulumi.output_property("maxCount")
    """
    The maximum number of nodes which should exist in this Node Pool. If specified this must be between `1` and `100`.
    """
    max_pods: Optional[float] = pulumi.output_property("maxPods")
    """
    The maximum number of pods that can run on each agent. Changing this forces a new resource to be created.
    """
    min_count: Optional[float] = pulumi.output_property("minCount")
    """
    The minimum number of nodes which should exist in this Node Pool. If specified this must be between `1` and `100`.
    """
    name: str = pulumi.output_property("name")
    """
    The name which should be used for the default Kubernetes Node Pool. Changing this forces a new resource to be created.
    """
    node_count: Optional[float] = pulumi.output_property("nodeCount")
    """
    The initial number of nodes which should exist in this Node Pool. If specified this must be between `1` and `100` and between `min_count` and `max_count`.
    """
    node_labels: Optional[Dict[str, str]] = pulumi.output_property("nodeLabels")
    """
    A map of Kubernetes labels which should be applied to nodes in the Default Node Pool. Changing this forces a new resource to be created.
    """
    node_taints: Optional[List[str]] = pulumi.output_property("nodeTaints")
    """
    A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`). Changing this forces a new resource to be created.
    """
    orchestrator_version: Optional[str] = pulumi.output_property("orchestratorVersion")
    """
    Version of Kubernetes used for the Agents. If not specified, the latest recommended version will be used at provisioning time (but won't auto-upgrade)
    """
    os_disk_size_gb: Optional[float] = pulumi.output_property("osDiskSizeGb")
    """
    The size of the OS Disk which should be used for each agent in the Node Pool. Changing this forces a new resource to be created.
    """
    tags: Optional[Dict[str, str]] = pulumi.output_property("tags")
    """
    A mapping of tags to assign to the Node Pool.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    The type of Node Pool which should be created. Possible values are `AvailabilitySet` and `VirtualMachineScaleSets`. Defaults to `VirtualMachineScaleSets`.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The size of the Virtual Machine, such as `Standard_DS2_v2`.
    """
    vnet_subnet_id: Optional[str] = pulumi.output_property("vnetSubnetId")
    """
    The ID of a Subnet where the Kubernetes Node Pool should exist. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterIdentity(dict):
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The principal id of the system assigned identity which is used by master components.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID used for Azure Active Directory Application. If this isn't specified the Tenant ID of the current Subscription is used.
    """
    type: str = pulumi.output_property("type")
    """
    The type of identity used for the managed cluster. At this time the only supported value is `SystemAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterKubeAdminConfig(dict):
    client_certificate: Optional[str] = pulumi.output_property("clientCertificate")
    """
    Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
    """
    client_key: Optional[str] = pulumi.output_property("clientKey")
    """
    Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
    """
    cluster_ca_certificate: Optional[str] = pulumi.output_property("clusterCaCertificate")
    """
    Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
    """
    host: Optional[str] = pulumi.output_property("host")
    """
    The Kubernetes cluster server host.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    A password or token used to authenticate to the Kubernetes cluster.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    A username used to authenticate to the Kubernetes cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterKubeConfig(dict):
    client_certificate: Optional[str] = pulumi.output_property("clientCertificate")
    """
    Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
    """
    client_key: Optional[str] = pulumi.output_property("clientKey")
    """
    Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
    """
    cluster_ca_certificate: Optional[str] = pulumi.output_property("clusterCaCertificate")
    """
    Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
    """
    host: Optional[str] = pulumi.output_property("host")
    """
    The Kubernetes cluster server host.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    A password or token used to authenticate to the Kubernetes cluster.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    A username used to authenticate to the Kubernetes cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterKubeletIdentity(dict):
    client_id: Optional[str] = pulumi.output_property("clientId")
    """
    The Client ID for the Service Principal.
    """
    object_id: Optional[str] = pulumi.output_property("objectId")
    """
    The Object ID of the user-defined Managed Identity used by the OMS Agents.
    """
    user_assigned_identity_id: Optional[str] = pulumi.output_property("userAssignedIdentityId")
    """
    The ID of the User Assigned Identity used by the OMS Agents.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterLinuxProfile(dict):
    admin_username: str = pulumi.output_property("adminUsername")
    """
    The Admin Username for the Cluster. Changing this forces a new resource to be created.
    """
    ssh_key: 'outputs.KubernetesClusterLinuxProfileSshKey' = pulumi.output_property("sshKey")
    """
    An `ssh_key` block. Only one is currently allowed. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterLinuxProfileSshKey(dict):
    key_data: str = pulumi.output_property("keyData")
    """
    The Public SSH Key used to access the cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterNetworkProfile(dict):
    dns_service_ip: Optional[str] = pulumi.output_property("dnsServiceIp")
    """
    IP address within the Kubernetes service address range that will be used by cluster service discovery (kube-dns). Changing this forces a new resource to be created.
    """
    docker_bridge_cidr: Optional[str] = pulumi.output_property("dockerBridgeCidr")
    """
    IP address (in CIDR notation) used as the Docker bridge IP address on nodes. Changing this forces a new resource to be created.
    """
    load_balancer_profile: Optional['outputs.KubernetesClusterNetworkProfileLoadBalancerProfile'] = pulumi.output_property("loadBalancerProfile")
    """
    A `load_balancer_profile` block. This can only be specified when `load_balancer_sku` is set to `Standard`.
    """
    load_balancer_sku: Optional[str] = pulumi.output_property("loadBalancerSku")
    """
    Specifies the SKU of the Load Balancer used for this Kubernetes Cluster. Possible values are `Basic` and `Standard`. Defaults to `Standard`.
    """
    network_plugin: str = pulumi.output_property("networkPlugin")
    """
    Network plugin to use for networking. Currently supported values are `azure` and `kubenet`. Changing this forces a new resource to be created.
    """
    network_policy: Optional[str] = pulumi.output_property("networkPolicy")
    """
    Sets up network policy to be used with Azure CNI. [Network policy allows us to control the traffic flow between pods](https://docs.microsoft.com/en-us/azure/aks/use-network-policies). Currently supported values are `calico` and `azure`. Changing this forces a new resource to be created.
    """
    outbound_type: Optional[str] = pulumi.output_property("outboundType")
    """
    The outbound (egress) routing method which should be used for this Kubernetes Cluster. Possible values are `loadBalancer` and `userDefinedRouting`. Defaults to `loadBalancer`.
    """
    pod_cidr: Optional[str] = pulumi.output_property("podCidr")
    """
    The CIDR to use for pod IP addresses. This field can only be set when `network_plugin` is set to `kubenet`. Changing this forces a new resource to be created.
    """
    service_cidr: Optional[str] = pulumi.output_property("serviceCidr")
    """
    The Network Range used by the Kubernetes service. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterNetworkProfileLoadBalancerProfile(dict):
    effective_outbound_ips: Optional[List[str]] = pulumi.output_property("effectiveOutboundIps")
    """
    The outcome (resource IDs) of the specified arguments.
    """
    idle_timeout_in_minutes: Optional[float] = pulumi.output_property("idleTimeoutInMinutes")
    """
    Desired outbound flow idle timeout in minutes for the cluster load balancer. Must be between `4` and `120` inclusive. Defaults to `30`.
    """
    managed_outbound_ip_count: Optional[float] = pulumi.output_property("managedOutboundIpCount")
    """
    Count of desired managed outbound IPs for the cluster load balancer. Must be between `1` and `100` inclusive.
    """
    outbound_ip_address_ids: Optional[List[str]] = pulumi.output_property("outboundIpAddressIds")
    """
    The ID of the Public IP Addresses which should be used for outbound communication for the cluster load balancer.
    """
    outbound_ip_prefix_ids: Optional[List[str]] = pulumi.output_property("outboundIpPrefixIds")
    """
    The ID of the outbound Public IP Address Prefixes which should be used for the cluster load balancer.
    """
    outbound_ports_allocated: Optional[float] = pulumi.output_property("outboundPortsAllocated")
    """
    Number of desired SNAT port for each VM in the clusters load balancer. Must be between `0` and `64000` inclusive. Defaults to `0`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterRoleBasedAccessControl(dict):
    azure_active_directory: Optional['outputs.KubernetesClusterRoleBasedAccessControlAzureActiveDirectory'] = pulumi.output_property("azureActiveDirectory")
    """
    An `azure_active_directory` block.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control Enabled? Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterRoleBasedAccessControlAzureActiveDirectory(dict):
    admin_group_object_ids: Optional[List[str]] = pulumi.output_property("adminGroupObjectIds")
    """
    A list of Object IDs of Azure Active Directory Groups which should have Admin Role on the Cluster.
    """
    client_app_id: Optional[str] = pulumi.output_property("clientAppId")
    """
    The Client ID of an Azure Active Directory Application.
    """
    managed: Optional[bool] = pulumi.output_property("managed")
    """
    Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration.
    """
    server_app_id: Optional[str] = pulumi.output_property("serverAppId")
    """
    The Server ID of an Azure Active Directory Application.
    """
    server_app_secret: Optional[str] = pulumi.output_property("serverAppSecret")
    """
    The Server Secret of an Azure Active Directory Application.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID used for Azure Active Directory Application. If this isn't specified the Tenant ID of the current Subscription is used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterServicePrincipal(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID for the Service Principal.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The Client Secret for the Service Principal.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KubernetesClusterWindowsProfile(dict):
    admin_password: Optional[str] = pulumi.output_property("adminPassword")
    """
    The Admin Password for Windows VMs.
    """
    admin_username: str = pulumi.output_property("adminUsername")
    """
    The Admin Username for Windows VMs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryNetworkRuleSet(dict):
    default_action: Optional[str] = pulumi.output_property("defaultAction")
    """
    The behaviour for requests matching no rules. Either `Allow` or `Deny`. Defaults to `Allow`
    """
    ip_rules: Optional[List['outputs.RegistryNetworkRuleSetIpRule']] = pulumi.output_property("ipRules")
    """
    One or more `ip_rule` blocks as defined below.
    """
    virtual_networks: Optional[List['outputs.RegistryNetworkRuleSetVirtualNetwork']] = pulumi.output_property("virtualNetworks")
    """
    One or more `virtual_network` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryNetworkRuleSetIpRule(dict):
    action: str = pulumi.output_property("action")
    """
    The behaviour for requests matching this rule. At this time the only supported value is `Allow`
    """
    ip_range: str = pulumi.output_property("ipRange")
    """
    The CIDR block from which requests will match the rule.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RegistryNetworkRuleSetVirtualNetwork(dict):
    action: str = pulumi.output_property("action")
    """
    The behaviour for requests matching this rule. At this time the only supported value is `Allow`
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The subnet id from which requests will match the rule.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfile(dict):
    azure_policies: List['outputs.GetKubernetesClusterAddonProfileAzurePolicy'] = pulumi.output_property("azurePolicies")
    """
    A `azure_policy` block.
    """
    http_application_routings: List['outputs.GetKubernetesClusterAddonProfileHttpApplicationRouting'] = pulumi.output_property("httpApplicationRoutings")
    """
    A `http_application_routing` block.
    """
    kube_dashboards: List['outputs.GetKubernetesClusterAddonProfileKubeDashboard'] = pulumi.output_property("kubeDashboards")
    """
    A `kube_dashboard` block.
    """
    oms_agents: List['outputs.GetKubernetesClusterAddonProfileOmsAgent'] = pulumi.output_property("omsAgents")
    """
    A `oms_agent` block.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfileAzurePolicy(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfileHttpApplicationRouting(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control enabled?
    """
    http_application_routing_zone_name: str = pulumi.output_property("httpApplicationRoutingZoneName")
    """
    The Zone Name of the HTTP Application Routing.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfileKubeDashboard(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfileOmsAgent(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control enabled?
    """
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The ID of the Log Analytics Workspace which the OMS Agent should send data to.
    """
    oms_agent_identities: List['outputs.GetKubernetesClusterAddonProfileOmsAgentOmsAgentIdentity'] = pulumi.output_property("omsAgentIdentities")
    """
    An `oms_agent_identity` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAddonProfileOmsAgentOmsAgentIdentity(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of the user-defined Managed Identity assigned to the Kubelets.
    """
    object_id: str = pulumi.output_property("objectId")
    """
    The Object ID of the user-defined Managed Identity assigned to the Kubelets.
    """
    user_assigned_identity_id: str = pulumi.output_property("userAssignedIdentityId")
    """
    The ID of the User Assigned Identity assigned to the Kubelets.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterAgentPoolProfile(dict):
    availability_zones: List[str] = pulumi.output_property("availabilityZones")
    """
    The availability zones used for the nodes.
    """
    count: float = pulumi.output_property("count")
    """
    The number of Agents (VM's) in the Pool.
    """
    enable_auto_scaling: bool = pulumi.output_property("enableAutoScaling")
    """
    If the auto-scaler is enabled.
    """
    enable_node_public_ip: bool = pulumi.output_property("enableNodePublicIp")
    max_count: float = pulumi.output_property("maxCount")
    """
    Maximum number of nodes for auto-scaling
    """
    max_pods: float = pulumi.output_property("maxPods")
    """
    The maximum number of pods that can run on each agent.
    """
    min_count: float = pulumi.output_property("minCount")
    """
    Minimum number of nodes for auto-scaling
    """
    name: str = pulumi.output_property("name")
    """
    The name of the managed Kubernetes Cluster.
    """
    node_labels: Dict[str, str] = pulumi.output_property("nodeLabels")
    node_taints: List[str] = pulumi.output_property("nodeTaints")
    """
    The list of Kubernetes taints which are applied to nodes in the agent pool
    """
    orchestrator_version: str = pulumi.output_property("orchestratorVersion")
    """
    Kubernetes version used for the Agents.
    """
    os_disk_size_gb: float = pulumi.output_property("osDiskSizeGb")
    """
    The size of the Agent VM's Operating System Disk in GB.
    """
    os_type: str = pulumi.output_property("osType")
    """
    The Operating System used for the Agents.
    """
    tags: Dict[str, str] = pulumi.output_property("tags")
    """
    A mapping of tags to assign to the resource.
    """
    type: str = pulumi.output_property("type")
    """
    The type of identity used for the managed cluster.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The size of each VM in the Agent Pool (e.g. `Standard_F1`).
    """
    vnet_subnet_id: str = pulumi.output_property("vnetSubnetId")
    """
    The ID of the Subnet where the Agents in the Pool are provisioned.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterIdentity(dict):
    principal_id: str = pulumi.output_property("principalId")
    """
    The principal id of the system assigned identity which is used by primary components.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The tenant id of the system assigned identity which is used by primary components.
    """
    type: str = pulumi.output_property("type")
    """
    The type of identity used for the managed cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterKubeAdminConfig(dict):
    client_certificate: str = pulumi.output_property("clientCertificate")
    """
    Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
    """
    client_key: str = pulumi.output_property("clientKey")
    """
    Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
    """
    cluster_ca_certificate: str = pulumi.output_property("clusterCaCertificate")
    """
    Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
    """
    host: str = pulumi.output_property("host")
    """
    The Kubernetes cluster server host.
    """
    password: str = pulumi.output_property("password")
    """
    A password or token used to authenticate to the Kubernetes cluster.
    """
    username: str = pulumi.output_property("username")
    """
    A username used to authenticate to the Kubernetes cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterKubeConfig(dict):
    client_certificate: str = pulumi.output_property("clientCertificate")
    """
    Base64 encoded public certificate used by clients to authenticate to the Kubernetes cluster.
    """
    client_key: str = pulumi.output_property("clientKey")
    """
    Base64 encoded private key used by clients to authenticate to the Kubernetes cluster.
    """
    cluster_ca_certificate: str = pulumi.output_property("clusterCaCertificate")
    """
    Base64 encoded public CA certificate used as the root of trust for the Kubernetes cluster.
    """
    host: str = pulumi.output_property("host")
    """
    The Kubernetes cluster server host.
    """
    password: str = pulumi.output_property("password")
    """
    A password or token used to authenticate to the Kubernetes cluster.
    """
    username: str = pulumi.output_property("username")
    """
    A username used to authenticate to the Kubernetes cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterKubeletIdentity(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of the user-defined Managed Identity assigned to the Kubelets.
    """
    object_id: str = pulumi.output_property("objectId")
    """
    The Object ID of the user-defined Managed Identity assigned to the Kubelets.
    """
    user_assigned_identity_id: str = pulumi.output_property("userAssignedIdentityId")
    """
    The ID of the User Assigned Identity assigned to the Kubelets.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterLinuxProfile(dict):
    admin_username: str = pulumi.output_property("adminUsername")
    """
    The username associated with the administrator account of the Windows VMs.
    """
    ssh_keys: List['outputs.GetKubernetesClusterLinuxProfileSshKey'] = pulumi.output_property("sshKeys")
    """
    An `ssh_key` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterLinuxProfileSshKey(dict):
    key_data: str = pulumi.output_property("keyData")
    """
    The Public SSH Key used to access the cluster.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterNetworkProfile(dict):
    dns_service_ip: str = pulumi.output_property("dnsServiceIp")
    """
    IP address within the Kubernetes service address range used by cluster service discovery (kube-dns).
    """
    docker_bridge_cidr: str = pulumi.output_property("dockerBridgeCidr")
    """
    IP address (in CIDR notation) used as the Docker bridge IP address on nodes.
    """
    load_balancer_sku: str = pulumi.output_property("loadBalancerSku")
    network_plugin: str = pulumi.output_property("networkPlugin")
    """
    Network plugin used such as `azure` or `kubenet`.
    """
    network_policy: str = pulumi.output_property("networkPolicy")
    """
    Network policy to be used with Azure CNI. Eg: `calico` or `azure`
    """
    pod_cidr: str = pulumi.output_property("podCidr")
    """
    The CIDR used for pod IP addresses.
    """
    service_cidr: str = pulumi.output_property("serviceCidr")
    """
    Network range used by the Kubernetes service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterRoleBasedAccessControl(dict):
    azure_active_directories: List['outputs.GetKubernetesClusterRoleBasedAccessControlAzureActiveDirectory'] = pulumi.output_property("azureActiveDirectories")
    """
    A `azure_active_directory` block as documented above.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Role Based Access Control enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterRoleBasedAccessControlAzureActiveDirectory(dict):
    admin_group_object_ids: List[str] = pulumi.output_property("adminGroupObjectIds")
    """
    The list of Object IDs of Azure Active Directory Groups which have Admin Role on the Cluster (when using a Managed integration).
    """
    client_app_id: str = pulumi.output_property("clientAppId")
    """
    The Client ID of an Azure Active Directory Application.
    """
    managed: bool = pulumi.output_property("managed")
    """
    Is the Azure Active Directory Integration managed (also known as AAD Integration V2)?
    """
    server_app_id: str = pulumi.output_property("serverAppId")
    """
    The Server ID of an Azure Active Directory Application.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The tenant id of the system assigned identity which is used by primary components.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterServicePrincipal(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of the user-defined Managed Identity assigned to the Kubelets.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKubernetesClusterWindowsProfile(dict):
    admin_username: str = pulumi.output_property("adminUsername")
    """
    The username associated with the administrator account of the Windows VMs.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


