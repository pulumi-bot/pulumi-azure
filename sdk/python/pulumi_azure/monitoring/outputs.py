# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class ActionGroupArmRoleReceiver(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the ARM role receiver.
    """
    role_id: str = pulumi.output_property("roleId")
    """
    The arm role id.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAutomationRunbookReceiver(dict):
    automation_account_id: str = pulumi.output_property("automationAccountId")
    """
    The automation account ID which holds this runbook and authenticates to Azure resources.
    """
    is_global_runbook: bool = pulumi.output_property("isGlobalRunbook")
    """
    Indicates whether this instance is global runbook.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the automation runbook receiver.
    """
    runbook_name: str = pulumi.output_property("runbookName")
    """
    The name for this runbook.
    """
    service_uri: str = pulumi.output_property("serviceUri")
    """
    The URI where webhooks should be sent.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """
    webhook_resource_id: str = pulumi.output_property("webhookResourceId")
    """
    The resource id for webhook linked to this runbook.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAzureAppPushReceiver(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    The email address of the user signed into the mobile app who will receive push notifications from this receiver.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Azure app push receiver.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAzureFunctionReceiver(dict):
    function_app_resource_id: str = pulumi.output_property("functionAppResourceId")
    """
    The Azure resource ID of the function app.
    """
    function_name: str = pulumi.output_property("functionName")
    """
    The function name in the function app.
    """
    http_trigger_url: str = pulumi.output_property("httpTriggerUrl")
    """
    The http trigger url where http request sent to.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Azure Function receiver.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupEmailReceiver(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    The email address of this receiver.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupItsmReceiver(dict):
    connection_id: str = pulumi.output_property("connectionId")
    """
    The unique connection identifier of the ITSM connection.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the ITSM receiver.
    """
    region: str = pulumi.output_property("region")
    """
    The region of the workspace.
    """
    ticket_configuration: str = pulumi.output_property("ticketConfiguration")
    """
    A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
    """
    workspace_id: str = pulumi.output_property("workspaceId")
    """
    The Azure Log Analytics workspace ID where this connection is defined.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupLogicAppReceiver(dict):
    callback_url: str = pulumi.output_property("callbackUrl")
    """
    The callback url where http request sent to.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the logic app receiver.
    """
    resource_id: str = pulumi.output_property("resourceId")
    """
    The Azure resource ID of the logic app.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupSmsReceiver(dict):
    country_code: str = pulumi.output_property("countryCode")
    """
    The country code of the SMS receiver.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
    """
    phone_number: str = pulumi.output_property("phoneNumber")
    """
    The phone number of the SMS receiver.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupVoiceReceiver(dict):
    country_code: str = pulumi.output_property("countryCode")
    """
    The country code of the voice receiver.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the voice receiver.
    """
    phone_number: str = pulumi.output_property("phoneNumber")
    """
    The phone number of the voice receiver.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupWebhookReceiver(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
    """
    service_uri: str = pulumi.output_property("serviceUri")
    """
    The URI where webhooks should be sent.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Enables or disables the common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupCondition(dict):
    alert_context: Optional['outputs.ActionRuleActionGroupConditionAlertContext'] = pulumi.output_property("alertContext")
    """
    A `alert_context` block as defined below.
    """
    alert_rule_id: Optional['outputs.ActionRuleActionGroupConditionAlertRuleId'] = pulumi.output_property("alertRuleId")
    """
    A `alert_rule_id` block as defined below.
    """
    description: Optional['outputs.ActionRuleActionGroupConditionDescription'] = pulumi.output_property("description")
    """
    A `description` block as defined below.
    """
    monitor: Optional['outputs.ActionRuleActionGroupConditionMonitor'] = pulumi.output_property("monitor")
    """
    A `monitor` block as defined below.
    """
    monitor_service: Optional['outputs.ActionRuleActionGroupConditionMonitorService'] = pulumi.output_property("monitorService")
    """
    A `monitor_service` as block defined below.
    """
    severity: Optional['outputs.ActionRuleActionGroupConditionSeverity'] = pulumi.output_property("severity")
    """
    A `severity` block as defined below.
    """
    target_resource_type: Optional['outputs.ActionRuleActionGroupConditionTargetResourceType'] = pulumi.output_property("targetResourceType")
    """
    A `target_resource_type` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionAlertContext(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionAlertRuleId(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionDescription(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionMonitor(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionMonitorService(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Data Box Edge`, `Data Box Gateway`, `Health Platform`, `Log Analytics`, `Platform`, and `Resource Health`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionSeverity(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionTargetResourceType(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. The values should be valid resource types.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupScope(dict):
    resource_ids: List[str] = pulumi.output_property("resourceIds")
    """
    A list of resource IDs of the given scope type which will be the target of action rule.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionCondition(dict):
    alert_context: Optional['outputs.ActionRuleSuppressionConditionAlertContext'] = pulumi.output_property("alertContext")
    """
    A `alert_context` block as defined below.
    """
    alert_rule_id: Optional['outputs.ActionRuleSuppressionConditionAlertRuleId'] = pulumi.output_property("alertRuleId")
    """
    A `alert_rule_id` block as defined below.
    """
    description: Optional['outputs.ActionRuleSuppressionConditionDescription'] = pulumi.output_property("description")
    """
    A `description` block as defined below.
    """
    monitor: Optional['outputs.ActionRuleSuppressionConditionMonitor'] = pulumi.output_property("monitor")
    """
    A `monitor` block as defined below.
    """
    monitor_service: Optional['outputs.ActionRuleSuppressionConditionMonitorService'] = pulumi.output_property("monitorService")
    """
    A `monitor_service` as block defined below.
    """
    severity: Optional['outputs.ActionRuleSuppressionConditionSeverity'] = pulumi.output_property("severity")
    """
    A `severity` block as defined below.
    """
    target_resource_type: Optional['outputs.ActionRuleSuppressionConditionTargetResourceType'] = pulumi.output_property("targetResourceType")
    """
    A `target_resource_type` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionAlertContext(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionAlertRuleId(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionDescription(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionMonitor(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionMonitorService(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Data Box Edge`, `Data Box Gateway`, `Health Platform`, `Log Analytics`, `Platform`, and `Resource Health`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionSeverity(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals`and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionTargetResourceType(dict):
    operator: str = pulumi.output_property("operator")
    """
    The operator for a given condition. Possible values are `Equals` and `NotEquals`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    A list of values to match for a given condition. The values should be valid resource types.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionScope(dict):
    resource_ids: List[str] = pulumi.output_property("resourceIds")
    """
    A list of resource IDs of the given scope type which will be the target of action rule.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionSuppression(dict):
    recurrence_type: str = pulumi.output_property("recurrenceType")
    """
    Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
    """
    schedule: Optional['outputs.ActionRuleSuppressionSuppressionSchedule'] = pulumi.output_property("schedule")
    """
    A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionSuppressionSchedule(dict):
    end_date_utc: str = pulumi.output_property("endDateUtc")
    """
    specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
    """
    recurrence_monthlies: Optional[List[float]] = pulumi.output_property("recurrenceMonthlies")
    """
    specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
    """
    recurrence_weeklies: Optional[List[str]] = pulumi.output_property("recurrenceWeeklies")
    """
    specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and  `Saturday`.
    """
    start_date_utc: str = pulumi.output_property("startDateUtc")
    """
    specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActivityLogAlertAction(dict):
    action_group_id: str = pulumi.output_property("actionGroupId")
    """
    The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
    """
    webhook_properties: Optional[Dict[str, str]] = pulumi.output_property("webhookProperties")
    """
    The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActivityLogAlertCriteria(dict):
    caller: Optional[str] = pulumi.output_property("caller")
    """
    The email address or Azure Active Directory identifier of the user who performed the operation.
    """
    category: str = pulumi.output_property("category")
    """
    The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
    """
    level: Optional[str] = pulumi.output_property("level")
    """
    The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
    """
    operation_name: Optional[str] = pulumi.output_property("operationName")
    """
    The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
    """
    recommendation_category: Optional[str] = pulumi.output_property("recommendationCategory")
    """
    The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence` and `Performance`. It is only allowed when `category` is `Recommendation`.
    """
    recommendation_impact: Optional[str] = pulumi.output_property("recommendationImpact")
    """
    The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
    """
    recommendation_type: Optional[str] = pulumi.output_property("recommendationType")
    """
    The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
    """
    resource_group: Optional[str] = pulumi.output_property("resourceGroup")
    """
    The name of resource group monitored by the activity log alert.
    """
    resource_id: Optional[str] = pulumi.output_property("resourceId")
    """
    The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
    """
    resource_provider: Optional[str] = pulumi.output_property("resourceProvider")
    """
    The name of the resource provider monitored by the activity log alert.
    """
    resource_type: Optional[str] = pulumi.output_property("resourceType")
    """
    The resource type monitored by the activity log alert.
    """
    status: Optional[str] = pulumi.output_property("status")
    """
    The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
    """
    sub_status: Optional[str] = pulumi.output_property("subStatus")
    """
    The sub status of the event.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotification(dict):
    email: Optional['outputs.AutoscaleSettingNotificationEmail'] = pulumi.output_property("email")
    """
    A `email` block as defined below.
    """
    webhooks: Optional[List['outputs.AutoscaleSettingNotificationWebhook']] = pulumi.output_property("webhooks")
    """
    One or more `webhook` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotificationEmail(dict):
    custom_emails: Optional[List[str]] = pulumi.output_property("customEmails")
    """
    Specifies a list of custom email addresses to which the email notifications will be sent.
    """
    send_to_subscription_administrator: Optional[bool] = pulumi.output_property("sendToSubscriptionAdministrator")
    """
    Should email notifications be sent to the subscription administrator? Defaults to `false`.
    """
    send_to_subscription_co_administrator: Optional[bool] = pulumi.output_property("sendToSubscriptionCoAdministrator")
    """
    Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotificationWebhook(dict):
    properties: Optional[Dict[str, str]] = pulumi.output_property("properties")
    """
    A map of settings.
    """
    service_uri: str = pulumi.output_property("serviceUri")
    """
    The HTTPS URI which should receive scale notifications.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfile(dict):
    capacity: 'outputs.AutoscaleSettingProfileCapacity' = pulumi.output_property("capacity")
    """
    A `capacity` block as defined below.
    """
    fixed_date: Optional['outputs.AutoscaleSettingProfileFixedDate'] = pulumi.output_property("fixedDate")
    """
    A `fixed_date` block as defined below. This cannot be specified if a `recurrence` block is specified.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the profile.
    """
    recurrence: Optional['outputs.AutoscaleSettingProfileRecurrence'] = pulumi.output_property("recurrence")
    """
    A `recurrence` block as defined below. This cannot be specified if a `fixed_date` block is specified.
    """
    rules: Optional[List['outputs.AutoscaleSettingProfileRule']] = pulumi.output_property("rules")
    """
    One or more (up to 10) `rule` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileCapacity(dict):
    default: float = pulumi.output_property("default")
    """
    The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
    """
    maximum: float = pulumi.output_property("maximum")
    """
    The maximum number of instances for this resource. Valid values are between `0` and `1000`.
    """
    minimum: float = pulumi.output_property("minimum")
    """
    The minimum number of instances for this resource. Valid values are between `0` and `1000`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileFixedDate(dict):
    end: str = pulumi.output_property("end")
    """
    Specifies the end date for the profile, formatted as an RFC3339 date string.
    """
    start: str = pulumi.output_property("start")
    """
    Specifies the start date for the profile, formatted as an RFC3339 date string.
    """
    timezone: Optional[str] = pulumi.output_property("timezone")
    """
    The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRecurrence(dict):
    days: List[str] = pulumi.output_property("days")
    """
    A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
    """
    hours: float = pulumi.output_property("hours")
    """
    A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
    """
    minutes: float = pulumi.output_property("minutes")
    """
    A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
    """
    timezone: Optional[str] = pulumi.output_property("timezone")
    """
    The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRule(dict):
    metric_trigger: 'outputs.AutoscaleSettingProfileRuleMetricTrigger' = pulumi.output_property("metricTrigger")
    """
    A `metric_trigger` block as defined below.
    """
    scale_action: 'outputs.AutoscaleSettingProfileRuleScaleAction' = pulumi.output_property("scaleAction")
    """
    A `scale_action` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRuleMetricTrigger(dict):
    metric_name: str = pulumi.output_property("metricName")
    """
    The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
    """
    metric_resource_id: str = pulumi.output_property("metricResourceId")
    """
    The ID of the Resource which the Rule monitors.
    """
    operator: str = pulumi.output_property("operator")
    """
    Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
    """
    statistic: str = pulumi.output_property("statistic")
    """
    Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Min` and `Max`.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    Specifies the threshold of the metric that triggers the scale action.
    """
    time_aggregation: str = pulumi.output_property("timeAggregation")
    """
    Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`. Defaults to `Average`.
    """
    time_grain: str = pulumi.output_property("timeGrain")
    """
    Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
    """
    time_window: str = pulumi.output_property("timeWindow")
    """
    Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRuleScaleAction(dict):
    cooldown: str = pulumi.output_property("cooldown")
    """
    The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
    """
    direction: str = pulumi.output_property("direction")
    """
    The scale direction. Possible values are `Increase` and `Decrease`.
    """
    type: str = pulumi.output_property("type")
    """
    The type of action that should occur. Possible values are `ChangeCount`, `ExactCount` and `PercentChangeCount`.
    """
    value: float = pulumi.output_property("value")
    """
    The number of instances involved in the scaling action. Defaults to `1`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingLog(dict):
    category: str = pulumi.output_property("category")
    """
    The name of a Diagnostic Log Category for this Resource.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is this Diagnostic Log enabled? Defaults to `true`.
    """
    retention_policy: Optional['outputs.DiagnosticSettingLogRetentionPolicy'] = pulumi.output_property("retentionPolicy")
    """
    A `retention_policy` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingLogRetentionPolicy(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    The number of days for which this Retention Policy should apply.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is this Retention Policy enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingMetric(dict):
    category: str = pulumi.output_property("category")
    """
    The name of a Diagnostic Metric Category for this Resource.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is this Diagnostic Metric enabled? Defaults to `true`.
    """
    retention_policy: Optional['outputs.DiagnosticSettingMetricRetentionPolicy'] = pulumi.output_property("retentionPolicy")
    """
    A `retention_policy` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingMetricRetentionPolicy(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    The number of days for which this Retention Policy should apply.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is this Retention Policy enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LogProfileRetentionPolicy(dict):
    days: Optional[float] = pulumi.output_property("days")
    """
    The number of days for the retention policy. Defaults to 0.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    A boolean value to indicate whether the retention policy is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertAction(dict):
    action_group_id: str = pulumi.output_property("actionGroupId")
    """
    The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
    """
    webhook_properties: Optional[Dict[str, str]] = pulumi.output_property("webhookProperties")
    """
    The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertCriteria(dict):
    aggregation: str = pulumi.output_property("aggregation")
    """
    The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
    """
    dimensions: Optional[List['outputs.MetricAlertCriteriaDimension']] = pulumi.output_property("dimensions")
    """
    One or more `dimension` blocks as defined below.
    """
    metric_name: str = pulumi.output_property("metricName")
    """
    One of the metric names to be monitored.
    """
    metric_namespace: str = pulumi.output_property("metricNamespace")
    """
    One of the metric namespaces to be monitored.
    """
    operator: str = pulumi.output_property("operator")
    """
    The criteria operator. Possible values are `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    The criteria threshold value that activates the alert.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertCriteriaDimension(dict):
    name: str = pulumi.output_property("name")
    """
    One of the dimension names.
    """
    operator: str = pulumi.output_property("operator")
    """
    The dimension operator. Possible values are `Include` and `Exclude`.
    """
    values: List[str] = pulumi.output_property("values")
    """
    The list of dimension values.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertAction(dict):
    action_groups: List[str] = pulumi.output_property("actionGroups")
    """
    List of action group reference resource IDs.
    """
    custom_webhook_payload: Optional[str] = pulumi.output_property("customWebhookPayload")
    """
    Custom payload to be sent for all webhook payloads in alerting action.
    """
    email_subject: Optional[str] = pulumi.output_property("emailSubject")
    """
    Custom subject override for all email ids in Azure action group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertTrigger(dict):
    metric_trigger: Optional['outputs.ScheduledQueryRulesAlertTriggerMetricTrigger'] = pulumi.output_property("metricTrigger")
    operator: str = pulumi.output_property("operator")
    """
    Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertTriggerMetricTrigger(dict):
    metric_column: str = pulumi.output_property("metricColumn")
    metric_trigger_type: str = pulumi.output_property("metricTriggerType")
    operator: str = pulumi.output_property("operator")
    """
    Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesLogCriteria(dict):
    dimensions: List['outputs.ScheduledQueryRulesLogCriteriaDimension'] = pulumi.output_property("dimensions")
    """
    A `dimension` block as defined below.
    """
    metric_name: str = pulumi.output_property("metricName")
    """
    Name of the metric.  Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesLogCriteriaDimension(dict):
    name: str = pulumi.output_property("name")
    """
    Name of the dimension.
    """
    operator: Optional[str] = pulumi.output_property("operator")
    """
    Operator for dimension values, - 'Include'.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of dimension values.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupArmRoleReceiver(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    role_id: str = pulumi.output_property("roleId")
    """
    The arm role id.
    """
    use_common_alert_schema: bool = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupAutomationRunbookReceiver(dict):
    automation_account_id: str = pulumi.output_property("automationAccountId")
    """
    The automation account ID which holds this runbook and authenticates to Azure resources.
    """
    is_global_runbook: bool = pulumi.output_property("isGlobalRunbook")
    """
    Indicates whether this instance is global runbook.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    runbook_name: str = pulumi.output_property("runbookName")
    """
    The name for this runbook.
    """
    service_uri: str = pulumi.output_property("serviceUri")
    """
    The URI where webhooks should be sent.
    """
    use_common_alert_schema: bool = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """
    webhook_resource_id: str = pulumi.output_property("webhookResourceId")
    """
    The resource id for webhook linked to this runbook.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupAzureAppPushReceiver(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    The email address of this receiver.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupAzureFunctionReceiver(dict):
    function_app_resource_id: str = pulumi.output_property("functionAppResourceId")
    function_name: str = pulumi.output_property("functionName")
    """
    The function name in the function app.
    """
    http_trigger_url: str = pulumi.output_property("httpTriggerUrl")
    """
    The http trigger url where http request sent to.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    use_common_alert_schema: bool = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupEmailReceiver(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    The email address of this receiver.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    use_common_alert_schema: bool = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupItsmReceiver(dict):
    connection_id: str = pulumi.output_property("connectionId")
    """
    The unique connection identifier of the ITSM connection.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    region: str = pulumi.output_property("region")
    """
    The region of the workspace.
    """
    ticket_configuration: str = pulumi.output_property("ticketConfiguration")
    """
    A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
    """
    workspace_id: str = pulumi.output_property("workspaceId")
    """
    The Azure Log Analytics workspace ID where this connection is defined.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupLogicAppReceiver(dict):
    callback_url: str = pulumi.output_property("callbackUrl")
    """
    The callback url where http request sent to.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    resource_id: str = pulumi.output_property("resourceId")
    """
    The Azure resource ID of the logic app.
    """
    use_common_alert_schema: bool = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupSmsReceiver(dict):
    country_code: str = pulumi.output_property("countryCode")
    """
    The country code of the voice receiver.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    phone_number: str = pulumi.output_property("phoneNumber")
    """
    The phone number of the voice receiver.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupVoiceReceiver(dict):
    country_code: str = pulumi.output_property("countryCode")
    """
    The country code of the voice receiver.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    phone_number: str = pulumi.output_property("phoneNumber")
    """
    The phone number of the voice receiver.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupWebhookReceiver(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Action Group.
    """
    service_uri: str = pulumi.output_property("serviceUri")
    """
    The URI where webhooks should be sent.
    """
    use_common_alert_schema: Optional[bool] = pulumi.output_property("useCommonAlertSchema")
    """
    Indicates whether to use common alert schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetLogProfileRetentionPolicy(dict):
    days: float = pulumi.output_property("days")
    """
    The number of days for the retention policy.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    A boolean value indicating whether the retention policy is enabled.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScheduledQueryRulesAlertAction(dict):
    action_groups: List[str] = pulumi.output_property("actionGroups")
    """
    List of action group reference resource IDs.
    """
    custom_webhook_payload: str = pulumi.output_property("customWebhookPayload")
    """
    Custom payload to be sent for all webhook URI in Azure action group.
    """
    email_subject: str = pulumi.output_property("emailSubject")
    """
    Custom subject override for all email IDs in Azure action group.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScheduledQueryRulesAlertTrigger(dict):
    metric_triggers: List['outputs.GetScheduledQueryRulesAlertTriggerMetricTrigger'] = pulumi.output_property("metricTriggers")
    operator: str = pulumi.output_property("operator")
    """
    Evaluation operation for rule.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    Result or count threshold based on which rule should be triggered.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScheduledQueryRulesAlertTriggerMetricTrigger(dict):
    metric_column: str = pulumi.output_property("metricColumn")
    metric_trigger_type: str = pulumi.output_property("metricTriggerType")
    operator: str = pulumi.output_property("operator")
    """
    Evaluation operation for rule.
    """
    threshold: float = pulumi.output_property("threshold")
    """
    Result or count threshold based on which rule should be triggered.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScheduledQueryRulesLogCriteria(dict):
    dimensions: List['outputs.GetScheduledQueryRulesLogCriteriaDimension'] = pulumi.output_property("dimensions")
    """
    A `dimension` block as defined below.
    """
    metric_name: str = pulumi.output_property("metricName")
    """
    Name of the metric.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetScheduledQueryRulesLogCriteriaDimension(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the scheduled query rule.
    """
    operator: str = pulumi.output_property("operator")
    """
    Operator for dimension values.
    """
    values: List[str] = pulumi.output_property("values")
    """
    List of dimension values.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


