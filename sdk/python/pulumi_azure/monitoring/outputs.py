# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ActionGroupArmRoleReceiver',
    'ActionGroupAutomationRunbookReceiver',
    'ActionGroupAzureAppPushReceiver',
    'ActionGroupAzureFunctionReceiver',
    'ActionGroupEmailReceiver',
    'ActionGroupItsmReceiver',
    'ActionGroupLogicAppReceiver',
    'ActionGroupSmsReceiver',
    'ActionGroupVoiceReceiver',
    'ActionGroupWebhookReceiver',
    'ActionRuleActionGroupCondition',
    'ActionRuleActionGroupConditionAlertContext',
    'ActionRuleActionGroupConditionAlertRuleId',
    'ActionRuleActionGroupConditionDescription',
    'ActionRuleActionGroupConditionMonitor',
    'ActionRuleActionGroupConditionMonitorService',
    'ActionRuleActionGroupConditionSeverity',
    'ActionRuleActionGroupConditionTargetResourceType',
    'ActionRuleActionGroupScope',
    'ActionRuleSuppressionCondition',
    'ActionRuleSuppressionConditionAlertContext',
    'ActionRuleSuppressionConditionAlertRuleId',
    'ActionRuleSuppressionConditionDescription',
    'ActionRuleSuppressionConditionMonitor',
    'ActionRuleSuppressionConditionMonitorService',
    'ActionRuleSuppressionConditionSeverity',
    'ActionRuleSuppressionConditionTargetResourceType',
    'ActionRuleSuppressionScope',
    'ActionRuleSuppressionSuppression',
    'ActionRuleSuppressionSuppressionSchedule',
    'ActivityLogAlertAction',
    'ActivityLogAlertCriteria',
    'AutoscaleSettingNotification',
    'AutoscaleSettingNotificationEmail',
    'AutoscaleSettingNotificationWebhook',
    'AutoscaleSettingProfile',
    'AutoscaleSettingProfileCapacity',
    'AutoscaleSettingProfileFixedDate',
    'AutoscaleSettingProfileRecurrence',
    'AutoscaleSettingProfileRule',
    'AutoscaleSettingProfileRuleMetricTrigger',
    'AutoscaleSettingProfileRuleScaleAction',
    'DiagnosticSettingLog',
    'DiagnosticSettingLogRetentionPolicy',
    'DiagnosticSettingMetric',
    'DiagnosticSettingMetricRetentionPolicy',
    'LogProfileRetentionPolicy',
    'MetricAlertAction',
    'MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria',
    'MetricAlertCriteria',
    'MetricAlertCriteriaDimension',
    'MetricAlertDynamicCriteria',
    'MetricAlertDynamicCriteriaDimension',
    'ScheduledQueryRulesAlertAction',
    'ScheduledQueryRulesAlertTrigger',
    'ScheduledQueryRulesAlertTriggerMetricTrigger',
    'ScheduledQueryRulesLogCriteria',
    'ScheduledQueryRulesLogCriteriaDimension',
    'GetActionGroupArmRoleReceiverResult',
    'GetActionGroupAutomationRunbookReceiverResult',
    'GetActionGroupAzureAppPushReceiverResult',
    'GetActionGroupAzureFunctionReceiverResult',
    'GetActionGroupEmailReceiverResult',
    'GetActionGroupItsmReceiverResult',
    'GetActionGroupLogicAppReceiverResult',
    'GetActionGroupSmsReceiverResult',
    'GetActionGroupVoiceReceiverResult',
    'GetActionGroupWebhookReceiverResult',
    'GetLogProfileRetentionPolicyResult',
    'GetScheduledQueryRulesAlertActionResult',
    'GetScheduledQueryRulesAlertTriggerResult',
    'GetScheduledQueryRulesAlertTriggerMetricTriggerResult',
    'GetScheduledQueryRulesLogCriteriaResult',
    'GetScheduledQueryRulesLogCriteriaDimensionResult',
]

@pulumi.output_type
class ActionGroupArmRoleReceiver(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ARM role receiver.
        """
        ...

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The arm role id.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAutomationRunbookReceiver(dict):
    @property
    @pulumi.getter(name="automationAccountId")
    def automation_account_id(self) -> str:
        """
        The automation account ID which holds this runbook and authenticates to Azure resources.
        """
        ...

    @property
    @pulumi.getter(name="isGlobalRunbook")
    def is_global_runbook(self) -> bool:
        """
        Indicates whether this instance is global runbook.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the automation runbook receiver.
        """
        ...

    @property
    @pulumi.getter(name="runbookName")
    def runbook_name(self) -> str:
        """
        The name for this runbook.
        """
        ...

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    @property
    @pulumi.getter(name="webhookResourceId")
    def webhook_resource_id(self) -> str:
        """
        The resource id for webhook linked to this runbook.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAzureAppPushReceiver(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of the user signed into the mobile app who will receive push notifications from this receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure app push receiver.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupAzureFunctionReceiver(dict):
    @property
    @pulumi.getter(name="functionAppResourceId")
    def function_app_resource_id(self) -> str:
        """
        The Azure resource ID of the function app.
        """
        ...

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        The function name in the function app.
        """
        ...

    @property
    @pulumi.getter(name="httpTriggerUrl")
    def http_trigger_url(self) -> str:
        """
        The http trigger url where http request sent to.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure Function receiver.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupEmailReceiver(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupItsmReceiver(dict):
    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The unique connection identifier of the ITSM connection.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ITSM receiver.
        """
        ...

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the workspace.
        """
        ...

    @property
    @pulumi.getter(name="ticketConfiguration")
    def ticket_configuration(self) -> str:
        """
        A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        """
        ...

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The Azure Log Analytics workspace ID where this connection is defined.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupLogicAppReceiver(dict):
    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> str:
        """
        The callback url where http request sent to.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the logic app receiver.
        """
        ...

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The Azure resource ID of the logic app.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupSmsReceiver(dict):
    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the SMS receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        ...

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the SMS receiver.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupVoiceReceiver(dict):
    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the voice receiver.
        """
        ...

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionGroupWebhookReceiver(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
        """
        ...

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Enables or disables the common alert schema.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupCondition(dict):
    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.ActionRuleActionGroupConditionAlertContext']:
        """
        A `alert_context` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.ActionRuleActionGroupConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.ActionRuleActionGroupConditionDescription']:
        """
        A `description` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def monitor(self) -> Optional['outputs.ActionRuleActionGroupConditionMonitor']:
        """
        A `monitor` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.ActionRuleActionGroupConditionMonitorService']:
        """
        A `monitor_service` as block defined below.
        """
        ...

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.ActionRuleActionGroupConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.ActionRuleActionGroupConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionAlertContext(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionAlertRuleId(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionDescription(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionMonitor(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionMonitorService(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Data Box Edge`, `Data Box Gateway`, `Health Platform`, `Log Analytics`, `Platform`, and `Resource Health`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionSeverity(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupConditionTargetResourceType(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleActionGroupScope(dict):
    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> List[str]:
        """
        A list of resource IDs of the given scope type which will be the target of action rule.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionCondition(dict):
    @property
    @pulumi.getter(name="alertContext")
    def alert_context(self) -> Optional['outputs.ActionRuleSuppressionConditionAlertContext']:
        """
        A `alert_context` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> Optional['outputs.ActionRuleSuppressionConditionAlertRuleId']:
        """
        A `alert_rule_id` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional['outputs.ActionRuleSuppressionConditionDescription']:
        """
        A `description` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def monitor(self) -> Optional['outputs.ActionRuleSuppressionConditionMonitor']:
        """
        A `monitor` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.ActionRuleSuppressionConditionMonitorService']:
        """
        A `monitor_service` as block defined below.
        """
        ...

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.ActionRuleSuppressionConditionSeverity']:
        """
        A `severity` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['outputs.ActionRuleSuppressionConditionTargetResourceType']:
        """
        A `target_resource_type` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionAlertContext(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionAlertRuleId(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionDescription(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionMonitor(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionMonitorService(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Data Box Edge`, `Data Box Gateway`, `Health Platform`, `Log Analytics`, `Platform`, and `Resource Health`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionSeverity(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals`and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionConditionTargetResourceType(dict):
    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator for a given condition. Possible values are `Equals` and `NotEquals`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        A list of values to match for a given condition. The values should be valid resource types.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionScope(dict):
    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> List[str]:
        """
        A list of resource IDs of the given scope type which will be the target of action rule.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionSuppression(dict):
    @property
    @pulumi.getter(name="recurrenceType")
    def recurrence_type(self) -> str:
        """
        Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
        """
        ...

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.ActionRuleSuppressionSuppressionSchedule']:
        """
        A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActionRuleSuppressionSuppressionSchedule(dict):
    @property
    @pulumi.getter(name="endDateUtc")
    def end_date_utc(self) -> str:
        """
        specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
        """
        ...

    @property
    @pulumi.getter(name="recurrenceMonthlies")
    def recurrence_monthlies(self) -> Optional[List[float]]:
        """
        specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
        """
        ...

    @property
    @pulumi.getter(name="recurrenceWeeklies")
    def recurrence_weeklies(self) -> Optional[List[str]]:
        """
        specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and  `Saturday`.
        """
        ...

    @property
    @pulumi.getter(name="startDateUtc")
    def start_date_utc(self) -> str:
        """
        specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActivityLogAlertAction(dict):
    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> str:
        """
        The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
        """
        ...

    @property
    @pulumi.getter(name="webhookProperties")
    def webhook_properties(self) -> Optional[Mapping[str, str]]:
        """
        The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ActivityLogAlertCriteria(dict):
    @property
    @pulumi.getter
    def caller(self) -> Optional[str]:
        """
        The email address or Azure Active Directory identifier of the user who performed the operation.
        """
        ...

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        """
        ...

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        """
        ...

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        """
        The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
        """
        ...

    @property
    @pulumi.getter(name="recommendationCategory")
    def recommendation_category(self) -> Optional[str]:
        """
        The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence` and `Performance`. It is only allowed when `category` is `Recommendation`.
        """
        ...

    @property
    @pulumi.getter(name="recommendationImpact")
    def recommendation_impact(self) -> Optional[str]:
        """
        The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
        """
        ...

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> Optional[str]:
        """
        The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
        """
        ...

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        The name of resource group monitored by the activity log alert.
        """
        ...

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        """
        ...

    @property
    @pulumi.getter(name="resourceProvider")
    def resource_provider(self) -> Optional[str]:
        """
        The name of the resource provider monitored by the activity log alert.
        """
        ...

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource type monitored by the activity log alert.
        """
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        """
        ...

    @property
    @pulumi.getter(name="subStatus")
    def sub_status(self) -> Optional[str]:
        """
        The sub status of the event.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotification(dict):
    @property
    @pulumi.getter
    def email(self) -> Optional['outputs.AutoscaleSettingNotificationEmail']:
        """
        A `email` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def webhooks(self) -> Optional[List['outputs.AutoscaleSettingNotificationWebhook']]:
        """
        One or more `webhook` blocks as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotificationEmail(dict):
    @property
    @pulumi.getter(name="customEmails")
    def custom_emails(self) -> Optional[List[str]]:
        """
        Specifies a list of custom email addresses to which the email notifications will be sent.
        """
        ...

    @property
    @pulumi.getter(name="sendToSubscriptionAdministrator")
    def send_to_subscription_administrator(self) -> Optional[bool]:
        """
        Should email notifications be sent to the subscription administrator? Defaults to `false`.
        """
        ...

    @property
    @pulumi.getter(name="sendToSubscriptionCoAdministrator")
    def send_to_subscription_co_administrator(self) -> Optional[bool]:
        """
        Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingNotificationWebhook(dict):
    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A map of settings.
        """
        ...

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The HTTPS URI which should receive scale notifications.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfile(dict):
    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.AutoscaleSettingProfileCapacity':
        """
        A `capacity` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="fixedDate")
    def fixed_date(self) -> Optional['outputs.AutoscaleSettingProfileFixedDate']:
        """
        A `fixed_date` block as defined below. This cannot be specified if a `recurrence` block is specified.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the profile.
        """
        ...

    @property
    @pulumi.getter
    def recurrence(self) -> Optional['outputs.AutoscaleSettingProfileRecurrence']:
        """
        A `recurrence` block as defined below. This cannot be specified if a `fixed_date` block is specified.
        """
        ...

    @property
    @pulumi.getter
    def rules(self) -> Optional[List['outputs.AutoscaleSettingProfileRule']]:
        """
        One or more (up to 10) `rule` blocks as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileCapacity(dict):
    @property
    @pulumi.getter
    def default(self) -> float:
        """
        The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
        """
        ...

    @property
    @pulumi.getter
    def maximum(self) -> float:
        """
        The maximum number of instances for this resource. Valid values are between `0` and `1000`.
        """
        ...

    @property
    @pulumi.getter
    def minimum(self) -> float:
        """
        The minimum number of instances for this resource. Valid values are between `0` and `1000`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileFixedDate(dict):
    @property
    @pulumi.getter
    def end(self) -> str:
        """
        Specifies the end date for the profile, formatted as an RFC3339 date string.
        """
        ...

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        Specifies the start date for the profile, formatted as an RFC3339 date string.
        """
        ...

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRecurrence(dict):
    @property
    @pulumi.getter
    def days(self) -> List[str]:
        """
        A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
        """
        ...

    @property
    @pulumi.getter
    def hours(self) -> float:
        """
        A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
        """
        ...

    @property
    @pulumi.getter
    def minutes(self) -> float:
        """
        A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
        """
        ...

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRule(dict):
    @property
    @pulumi.getter(name="metricTrigger")
    def metric_trigger(self) -> 'outputs.AutoscaleSettingProfileRuleMetricTrigger':
        """
        A `metric_trigger` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="scaleAction")
    def scale_action(self) -> 'outputs.AutoscaleSettingProfileRuleScaleAction':
        """
        A `scale_action` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRuleMetricTrigger(dict):
    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
        """
        ...

    @property
    @pulumi.getter(name="metricResourceId")
    def metric_resource_id(self) -> str:
        """
        The ID of the Resource which the Rule monitors.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
        """
        ...

    @property
    @pulumi.getter
    def statistic(self) -> str:
        """
        Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Min` and `Max`.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Specifies the threshold of the metric that triggers the scale action.
        """
        ...

    @property
    @pulumi.getter(name="timeAggregation")
    def time_aggregation(self) -> str:
        """
        Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`. Defaults to `Average`.
        """
        ...

    @property
    @pulumi.getter(name="timeGrain")
    def time_grain(self) -> str:
        """
        Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
        """
        ...

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> str:
        """
        Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AutoscaleSettingProfileRuleScaleAction(dict):
    @property
    @pulumi.getter
    def cooldown(self) -> str:
        """
        The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
        """
        ...

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The scale direction. Possible values are `Increase` and `Decrease`.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of action that should occur. Possible values are `ChangeCount`, `ExactCount` and `PercentChangeCount`.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The number of instances involved in the scaling action. Defaults to `1`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingLog(dict):
    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The name of a Diagnostic Log Category for this Resource.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Diagnostic Log enabled? Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional['outputs.DiagnosticSettingLogRetentionPolicy']:
        """
        A `retention_policy` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingLogRetentionPolicy(dict):
    @property
    @pulumi.getter
    def days(self) -> Optional[float]:
        """
        The number of days for which this Retention Policy should apply.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is this Retention Policy enabled?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingMetric(dict):
    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The name of a Diagnostic Metric Category for this Resource.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is this Diagnostic Metric enabled? Defaults to `true`.
        """
        ...

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional['outputs.DiagnosticSettingMetricRetentionPolicy']:
        """
        A `retention_policy` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiagnosticSettingMetricRetentionPolicy(dict):
    @property
    @pulumi.getter
    def days(self) -> Optional[float]:
        """
        The number of days for which this Retention Policy should apply.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is this Retention Policy enabled?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LogProfileRetentionPolicy(dict):
    @property
    @pulumi.getter
    def days(self) -> Optional[float]:
        """
        The number of days for the retention policy. Defaults to 0.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        A boolean value to indicate whether the retention policy is enabled.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertAction(dict):
    @property
    @pulumi.getter(name="actionGroupId")
    def action_group_id(self) -> str:
        """
        The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
        """
        ...

    @property
    @pulumi.getter(name="webhookProperties")
    def webhook_properties(self) -> Optional[Mapping[str, str]]:
        """
        The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria(dict):
    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> str:
        """
        The ID of the Application Insights Resource.
        """
        ...

    @property
    @pulumi.getter(name="failedLocationCount")
    def failed_location_count(self) -> float:
        """
        The number of failed locations.
        """
        ...

    @property
    @pulumi.getter(name="webTestId")
    def web_test_id(self) -> str:
        """
        The ID of the Application Insights Web Test.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertCriteria(dict):
    @property
    @pulumi.getter
    def aggregation(self) -> str:
        """
        The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        """
        ...

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[List['outputs.MetricAlertCriteriaDimension']]:
        """
        One or more `dimension` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        One of the metric names to be monitored.
        """
        ...

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> str:
        """
        One of the metric namespaces to be monitored.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The criteria operator. Possible values are `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The criteria threshold value that activates the alert.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertCriteriaDimension(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        One of the dimension names.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The dimension operator. Possible values are `Include` and `Exclude`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        The list of dimension values.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertDynamicCriteria(dict):
    @property
    @pulumi.getter
    def aggregation(self) -> str:
        """
        The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
        """
        ...

    @property
    @pulumi.getter(name="alertSensitivity")
    def alert_sensitivity(self) -> str:
        """
        The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
        """
        ...

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[List['outputs.MetricAlertDynamicCriteriaDimension']]:
        """
        One or more `dimension` blocks as defined below.
        """
        ...

    @property
    @pulumi.getter(name="evaluationFailureCount")
    def evaluation_failure_count(self) -> Optional[float]:
        """
        The number of violations to trigger an alert. Should be smaller or equal to `evaluation_total_count`.
        """
        ...

    @property
    @pulumi.getter(name="evaluationTotalCount")
    def evaluation_total_count(self) -> Optional[float]:
        """
        The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`window_size`) and the selected number of aggregated points.
        """
        ...

    @property
    @pulumi.getter(name="ignoreDataBefore")
    def ignore_data_before(self) -> Optional[str]:
        """
        The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
        """
        ...

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        One of the metric names to be monitored.
        """
        ...

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> str:
        """
        One of the metric namespaces to be monitored.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricAlertDynamicCriteriaDimension(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        One of the dimension names.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The dimension operator. Possible values are `Include` and `Exclude`.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        The list of dimension values.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertAction(dict):
    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> List[str]:
        """
        List of action group reference resource IDs.
        """
        ...

    @property
    @pulumi.getter(name="customWebhookPayload")
    def custom_webhook_payload(self) -> Optional[str]:
        """
        Custom payload to be sent for all webhook payloads in alerting action.
        """
        ...

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[str]:
        """
        Custom subject override for all email ids in Azure action group.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertTrigger(dict):
    @property
    @pulumi.getter(name="metricTrigger")
    def metric_trigger(self) -> Optional['outputs.ScheduledQueryRulesAlertTriggerMetricTrigger']:
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesAlertTriggerMetricTrigger(dict):
    @property
    @pulumi.getter(name="metricColumn")
    def metric_column(self) -> str:
        ...

    @property
    @pulumi.getter(name="metricTriggerType")
    def metric_trigger_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesLogCriteria(dict):
    @property
    @pulumi.getter
    def dimensions(self) -> List['outputs.ScheduledQueryRulesLogCriteriaDimension']:
        """
        A `dimension` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Name of the metric.  Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScheduledQueryRulesLogCriteriaDimension(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dimension.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator for dimension values, - 'Include'.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of dimension values.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetActionGroupArmRoleReceiverResult(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The arm role id.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        ...


@pulumi.output_type
class GetActionGroupAutomationRunbookReceiverResult(dict):
    @property
    @pulumi.getter(name="automationAccountId")
    def automation_account_id(self) -> str:
        """
        The automation account ID which holds this runbook and authenticates to Azure resources.
        """
        ...

    @property
    @pulumi.getter(name="isGlobalRunbook")
    def is_global_runbook(self) -> bool:
        """
        Indicates whether this instance is global runbook.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="runbookName")
    def runbook_name(self) -> str:
        """
        The name for this runbook.
        """
        ...

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        ...

    @property
    @pulumi.getter(name="webhookResourceId")
    def webhook_resource_id(self) -> str:
        """
        The resource id for webhook linked to this runbook.
        """
        ...


@pulumi.output_type
class GetActionGroupAzureAppPushReceiverResult(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...


@pulumi.output_type
class GetActionGroupAzureFunctionReceiverResult(dict):
    @property
    @pulumi.getter(name="functionAppResourceId")
    def function_app_resource_id(self) -> str:
        ...

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        The function name in the function app.
        """
        ...

    @property
    @pulumi.getter(name="httpTriggerUrl")
    def http_trigger_url(self) -> str:
        """
        The http trigger url where http request sent to.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        ...


@pulumi.output_type
class GetActionGroupEmailReceiverResult(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        ...


@pulumi.output_type
class GetActionGroupItsmReceiverResult(dict):
    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The unique connection identifier of the ITSM connection.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the workspace.
        """
        ...

    @property
    @pulumi.getter(name="ticketConfiguration")
    def ticket_configuration(self) -> str:
        """
        A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
        """
        ...

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The Azure Log Analytics workspace ID where this connection is defined.
        """
        ...


@pulumi.output_type
class GetActionGroupLogicAppReceiverResult(dict):
    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> str:
        """
        The callback url where http request sent to.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The Azure resource ID of the logic app.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> bool:
        """
        Indicates whether to use common alert schema.
        """
        ...


@pulumi.output_type
class GetActionGroupSmsReceiverResult(dict):
    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        ...


@pulumi.output_type
class GetActionGroupVoiceReceiverResult(dict):
    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of the voice receiver.
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        The phone number of the voice receiver.
        """
        ...


@pulumi.output_type
class GetActionGroupWebhookReceiverResult(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Action Group.
        """
        ...

    @property
    @pulumi.getter(name="serviceUri")
    def service_uri(self) -> str:
        """
        The URI where webhooks should be sent.
        """
        ...

    @property
    @pulumi.getter(name="useCommonAlertSchema")
    def use_common_alert_schema(self) -> Optional[bool]:
        """
        Indicates whether to use common alert schema.
        """
        ...


@pulumi.output_type
class GetLogProfileRetentionPolicyResult(dict):
    @property
    @pulumi.getter
    def days(self) -> float:
        """
        The number of days for the retention policy.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        A boolean value indicating whether the retention policy is enabled.
        """
        ...


@pulumi.output_type
class GetScheduledQueryRulesAlertActionResult(dict):
    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> List[str]:
        """
        List of action group reference resource IDs.
        """
        ...

    @property
    @pulumi.getter(name="customWebhookPayload")
    def custom_webhook_payload(self) -> str:
        """
        Custom payload to be sent for all webhook URI in Azure action group.
        """
        ...

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> str:
        """
        Custom subject override for all email IDs in Azure action group.
        """
        ...


@pulumi.output_type
class GetScheduledQueryRulesAlertTriggerResult(dict):
    @property
    @pulumi.getter(name="metricTriggers")
    def metric_triggers(self) -> List['outputs.GetScheduledQueryRulesAlertTriggerMetricTriggerResult']:
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered.
        """
        ...


@pulumi.output_type
class GetScheduledQueryRulesAlertTriggerMetricTriggerResult(dict):
    @property
    @pulumi.getter(name="metricColumn")
    def metric_column(self) -> str:
        ...

    @property
    @pulumi.getter(name="metricTriggerType")
    def metric_trigger_type(self) -> str:
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Evaluation operation for rule.
        """
        ...

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Result or count threshold based on which rule should be triggered.
        """
        ...


@pulumi.output_type
class GetScheduledQueryRulesLogCriteriaResult(dict):
    @property
    @pulumi.getter
    def dimensions(self) -> List['outputs.GetScheduledQueryRulesLogCriteriaDimensionResult']:
        """
        A `dimension` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Name of the metric.
        """
        ...


@pulumi.output_type
class GetScheduledQueryRulesLogCriteriaDimensionResult(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the scheduled query rule.
        """
        ...

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator for dimension values.
        """
        ...

    @property
    @pulumi.getter
    def values(self) -> List[str]:
        """
        List of dimension values.
        """
        ...


