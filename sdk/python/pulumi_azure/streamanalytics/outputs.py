# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class FunctionJavaScriptUDFInput(dict):
    type: str = pulumi.output_property("type")
    """
    The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionJavaScriptUDFOutput(dict):
    type: str = pulumi.output_property("type")
    """
    The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputBlobSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[str] = pulumi.output_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputEventHubSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[str] = pulumi.output_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputServiceBusQueueSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[str] = pulumi.output_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputServicebusTopicSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[str] = pulumi.output_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ReferenceInputBlobSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StreamInputBlobSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StreamInputEventHubSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StreamInputIotHubSerialization(dict):
    encoding: Optional[str] = pulumi.output_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[str] = pulumi.output_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    type: str = pulumi.output_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


