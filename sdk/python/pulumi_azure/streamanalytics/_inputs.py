# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.input_type
class FunctionJavaScriptUDFInputArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] type: The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        __self__.type = type

@pulumi.input_type
class FunctionJavaScriptUDFOutputArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] type: The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
        """
        __self__.type = type

@pulumi.input_type
class OutputBlobSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        :param pulumi.Input[str] format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter
        __self__.format = format

@pulumi.input_type
class OutputEventHubSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        :param pulumi.Input[str] format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter
        __self__.format = format

@pulumi.input_type
class OutputServiceBusQueueSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        :param pulumi.Input[str] format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter
        __self__.format = format

@pulumi.input_type
class OutputServicebusTopicSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        :param pulumi.Input[str] format: Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter
        __self__.format = format

@pulumi.input_type
class ReferenceInputBlobSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter

@pulumi.input_type
class StreamInputBlobSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter

@pulumi.input_type
class StreamInputEventHubSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter

@pulumi.input_type
class StreamInputIotHubSerializationArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
    """
    encoding: Optional[pulumi.Input[str]] = pulumi.input_property("encoding")
    """
    The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
    """
    field_delimiter: Optional[pulumi.Input[str]] = pulumi.input_property("fieldDelimiter")
    """
    The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], encoding: Optional[pulumi.Input[str]] = None, field_delimiter: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
        :param pulumi.Input[str] encoding: The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
        :param pulumi.Input[str] field_delimiter: The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
        """
        __self__.type = type
        __self__.encoding = encoding
        __self__.field_delimiter = field_delimiter

