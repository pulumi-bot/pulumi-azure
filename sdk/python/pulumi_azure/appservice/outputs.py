# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class AppServiceAuthSettings(dict):
    active_directory: Optional['outputs.AppServiceAuthSettingsActiveDirectory'] = pulumi.output_property("activeDirectory")
    """
    A `active_directory` block as defined below.
    """
    additional_login_params: Optional[Dict[str, str]] = pulumi.output_property("additionalLoginParams")
    """
    Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
    """
    allowed_external_redirect_urls: Optional[List[str]] = pulumi.output_property("allowedExternalRedirectUrls")
    """
    External URLs that can be redirected to as part of logging in or logging out of the app.
    """
    default_provider: Optional[str] = pulumi.output_property("defaultProvider")
    """
    The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Authentication enabled?
    """
    facebook: Optional['outputs.AppServiceAuthSettingsFacebook'] = pulumi.output_property("facebook")
    """
    A `facebook` block as defined below.
    """
    google: Optional['outputs.AppServiceAuthSettingsGoogle'] = pulumi.output_property("google")
    """
    A `google` block as defined below.
    """
    issuer: Optional[str] = pulumi.output_property("issuer")
    """
    Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
    """
    microsoft: Optional['outputs.AppServiceAuthSettingsMicrosoft'] = pulumi.output_property("microsoft")
    """
    A `microsoft` block as defined below.
    """
    runtime_version: Optional[str] = pulumi.output_property("runtimeVersion")
    """
    The runtime version of the Authentication/Authorization module.
    """
    token_refresh_extension_hours: Optional[float] = pulumi.output_property("tokenRefreshExtensionHours")
    """
    The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.
    """
    token_store_enabled: Optional[bool] = pulumi.output_property("tokenStoreEnabled")
    """
    If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.
    """
    twitter: Optional['outputs.AppServiceAuthSettingsTwitter'] = pulumi.output_property("twitter")
    """
    A `twitter` block as defined below.
    """
    unauthenticated_client_action: Optional[str] = pulumi.output_property("unauthenticatedClientAction")
    """
    The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceAuthSettingsActiveDirectory(dict):
    allowed_audiences: Optional[List[str]] = pulumi.output_property("allowedAudiences")
    """
    Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of this relying party application. Enables OpenIDConnection authentication with Azure Active Directory.
    """
    client_secret: Optional[str] = pulumi.output_property("clientSecret")
    """
    The Client Secret of this relying party application. If no secret is provided, implicit flow will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceAuthSettingsFacebook(dict):
    app_id: str = pulumi.output_property("appId")
    """
    The App ID of the Facebook app used for login
    """
    app_secret: str = pulumi.output_property("appSecret")
    """
    The App Secret of the Facebook app used for Facebook Login.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. https://developers.facebook.com/docs/facebook-login
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceAuthSettingsGoogle(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OpenID Connect Client ID for the Google web application.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The client secret associated with the Google web application.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. https://developers.google.com/identity/sign-in/web/
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceAuthSettingsMicrosoft(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client ID that was created for the app used for authentication.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret that was created for the app used for authentication.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. https://msdn.microsoft.com/en-us/library/dn631845.aspx
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceAuthSettingsTwitter(dict):
    consumer_key: str = pulumi.output_property("consumerKey")
    consumer_secret: str = pulumi.output_property("consumerSecret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceBackup(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is this Backup enabled?
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name for this Backup.
    """
    schedule: 'outputs.AppServiceBackupSchedule' = pulumi.output_property("schedule")
    """
    A `schedule` block as defined below.
    """
    storage_account_url: str = pulumi.output_property("storageAccountUrl")
    """
    The SAS URL to a Storage Container where Backups should be saved.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceBackupSchedule(dict):
    frequency_interval: float = pulumi.output_property("frequencyInterval")
    """
    Sets how often the backup should be executed.
    """
    frequency_unit: str = pulumi.output_property("frequencyUnit")
    """
    Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`.
    """
    keep_at_least_one_backup: Optional[bool] = pulumi.output_property("keepAtLeastOneBackup")
    """
    Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?
    """
    retention_period_in_days: Optional[float] = pulumi.output_property("retentionPeriodInDays")
    """
    Specifies the number of days after which Backups should be deleted.
    """
    start_time: Optional[str] = pulumi.output_property("startTime")
    """
    Sets when the schedule should start working.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Connection String.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and  `SQLServer`.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the App Service. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogs(dict):
    application_logs: Optional['outputs.AppServiceLogsApplicationLogs'] = pulumi.output_property("applicationLogs")
    """
    An `application_logs` block as defined below.
    """
    http_logs: Optional['outputs.AppServiceLogsHttpLogs'] = pulumi.output_property("httpLogs")
    """
    An `http_logs` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogsApplicationLogs(dict):
    azure_blob_storage: Optional['outputs.AppServiceLogsApplicationLogsAzureBlobStorage'] = pulumi.output_property("azureBlobStorage")
    """
    An `azure_blob_storage` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogsApplicationLogsAzureBlobStorage(dict):
    level: str = pulumi.output_property("level")
    """
    The level at which to log. Possible values include `Error`, `Warning`, `Information`, `Verbose` and `Off`. **NOTE:** this field is not available for `http_logs`
    """
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    sas_url: str = pulumi.output_property("sasUrl")
    """
    The URL to the storage container, with a Service SAS token appended. **NOTE:** there is currently no means of generating Service SAS tokens with the `azurerm` provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogsHttpLogs(dict):
    azure_blob_storage: Optional['outputs.AppServiceLogsHttpLogsAzureBlobStorage'] = pulumi.output_property("azureBlobStorage")
    """
    An `azure_blob_storage` block as defined below.
    """
    file_system: Optional['outputs.AppServiceLogsHttpLogsFileSystem'] = pulumi.output_property("fileSystem")
    """
    A `file_system` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogsHttpLogsAzureBlobStorage(dict):
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    sas_url: str = pulumi.output_property("sasUrl")
    """
    The URL to the storage container, with a Service SAS token appended. **NOTE:** there is currently no means of generating Service SAS tokens with the `azurerm` provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceLogsHttpLogsFileSystem(dict):
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    retention_in_mb: float = pulumi.output_property("retentionInMb")
    """
    The maximum size in megabytes that http log files can use before being removed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSiteConfig(dict):
    always_on: Optional[bool] = pulumi.output_property("alwaysOn")
    """
    Should the app be loaded at all times? Defaults to `false`.
    """
    app_command_line: Optional[str] = pulumi.output_property("appCommandLine")
    """
    App command line to launch, e.g. `/sbin/myserver -b 0.0.0.0`.
    """
    auto_swap_slot_name: Optional[str] = pulumi.output_property("autoSwapSlotName")
    cors: Optional['outputs.AppServiceSiteConfigCors'] = pulumi.output_property("cors")
    """
    A `cors` block as defined below.
    """
    default_documents: Optional[List[str]] = pulumi.output_property("defaultDocuments")
    """
    The ordering of default documents to load, if an address isn't specified.
    """
    dotnet_framework_version: Optional[str] = pulumi.output_property("dotnetFrameworkVersion")
    """
    The version of the .net framework's CLR used in this App Service. Possible values are `v2.0` (which will use the latest version of the .net framework for the .net CLR v2 - currently `.net 3.5`) and `v4.0` (which corresponds to the latest version of the .net CLR v4 - which at the time of writing is `.net 4.7.1`). [For more information on which .net CLR version to use based on the .net framework you're targeting - please see this table](https://en.wikipedia.org/wiki/.NET_Framework_version_history#Overview). Defaults to `v4.0`.
    """
    ftps_state: Optional[str] = pulumi.output_property("ftpsState")
    """
    State of FTP / FTPS service for this App Service. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.
    """
    health_check_path: Optional[str] = pulumi.output_property("healthCheckPath")
    """
    The health check path to be pinged by App Service. [For more information - please see the corresponding Kudu Wiki page](https://github.com/projectkudu/kudu/wiki/Health-Check-(Preview)).
    """
    http2_enabled: Optional[bool] = pulumi.output_property("http2Enabled")
    """
    Is HTTP2 Enabled on this App Service? Defaults to `false`.
    """
    ip_restrictions: Optional[List['outputs.AppServiceSiteConfigIpRestriction']] = pulumi.output_property("ipRestrictions")
    """
    A list of objects representing ip restrictions as defined below.
    """
    java_container: Optional[str] = pulumi.output_property("javaContainer")
    """
    The Java Container to use. If specified `java_version` and `java_container_version` must also be specified. Possible values are `JAVA`, `JETTY`, and `TOMCAT`.
    """
    java_container_version: Optional[str] = pulumi.output_property("javaContainerVersion")
    """
    The version of the Java Container to use. If specified `java_version` and `java_container` must also be specified.
    """
    java_version: Optional[str] = pulumi.output_property("javaVersion")
    """
    The version of Java to use. If specified `java_container` and `java_container_version` must also be specified. Possible values are `1.7`, `1.8` and `11` and their specific versions - except for Java 11 (e.g. `1.7.0_80`, `1.8.0_181`, `11`)
    """
    linux_fx_version: Optional[str] = pulumi.output_property("linuxFxVersion")
    """
    Linux App Framework and version for the App Service. Possible options are a Docker container (`DOCKER|<user/image:tag>`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64("compose.yml")}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64("kubernetes.yml")}`).
    """
    local_mysql_enabled: Optional[bool] = pulumi.output_property("localMysqlEnabled")
    """
    Is "MySQL In App" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
    """
    managed_pipeline_mode: Optional[str] = pulumi.output_property("managedPipelineMode")
    """
    The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`.
    """
    min_tls_version: Optional[str] = pulumi.output_property("minTlsVersion")
    """
    The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services.
    """
    php_version: Optional[str] = pulumi.output_property("phpVersion")
    """
    The version of PHP to use in this App Service. Possible values are `5.5`, `5.6`, `7.0`, `7.1`, `7.2`, and `7.3`.
    """
    python_version: Optional[str] = pulumi.output_property("pythonVersion")
    """
    The version of Python to use in this App Service. Possible values are `2.7` and `3.4`.
    """
    remote_debugging_enabled: Optional[bool] = pulumi.output_property("remoteDebuggingEnabled")
    """
    Is Remote Debugging Enabled? Defaults to `false`.
    """
    remote_debugging_version: Optional[str] = pulumi.output_property("remoteDebuggingVersion")
    """
    Which version of Visual Studio should the Remote Debugger be compatible with? Possible values are `VS2012`, `VS2013`, `VS2015` and `VS2017`.
    """
    scm_ip_restrictions: Optional[List['outputs.AppServiceSiteConfigScmIpRestriction']] = pulumi.output_property("scmIpRestrictions")
    """
    A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing ip restrictions as defined below.
    """
    scm_type: Optional[str] = pulumi.output_property("scmType")
    """
    The type of Source Control enabled for this App Service. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
    """
    scm_use_main_ip_restriction: Optional[bool] = pulumi.output_property("scmUseMainIpRestriction")
    """
    IP security restrictions for scm to use main. Defaults to false.
    """
    use32_bit_worker_process: Optional[bool] = pulumi.output_property("use32BitWorkerProcess")
    """
    Should the App Service run in 32 bit mode, rather than 64 bit mode?
    """
    websockets_enabled: Optional[bool] = pulumi.output_property("websocketsEnabled")
    """
    Should WebSockets be enabled?
    """
    windows_fx_version: Optional[str] = pulumi.output_property("windowsFxVersion")
    """
    The Windows Docker container image (`DOCKER|<user/image:tag>`)
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSiteConfigCors(dict):
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
    """
    support_credentials: Optional[bool] = pulumi.output_property("supportCredentials")
    """
    Are credentials supported?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSiteConfigIpRestriction(dict):
    action: Optional[str] = pulumi.output_property("action")
    """
    Does this restriction `Allow` or `Deny` access for this IP range. Defaults to `Allow`.
    """
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction in CIDR notation.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name for this IP Restriction.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    The priority for this IP Restriction. Restrictions are enforced in priority order. By default, priority is set to 65000 if not specified.
    """
    virtual_network_subnet_id: Optional[str] = pulumi.output_property("virtualNetworkSubnetId")
    """
    The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSiteConfigScmIpRestriction(dict):
    action: Optional[str] = pulumi.output_property("action")
    """
    Allow or Deny access for this IP range. Defaults to Allow.
    """
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction in CIDR notation.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name for this IP Restriction.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    """
    The priority for this IP Restriction. Restrictions are enforced in priority order. By default, priority is set to 65000 if not specified.
    """
    virtual_network_subnet_id: Optional[str] = pulumi.output_property("virtualNetworkSubnetId")
    """
    The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSiteCredential(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the username, which can be used to publish to this App Service.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    The username which can be used to publish to this App Service
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceSourceControl(dict):
    branch: Optional[str] = pulumi.output_property("branch")
    """
    Branch name of the Git repository for this App Service.
    """
    repo_url: Optional[str] = pulumi.output_property("repoUrl")
    """
    URL of the Git repository for this App Service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppServiceStorageAccount(dict):
    access_key: str = pulumi.output_property("accessKey")
    """
    The access key for the storage account.
    """
    account_name: str = pulumi.output_property("accountName")
    """
    The name of the storage account.
    """
    mount_path: Optional[str] = pulumi.output_property("mountPath")
    """
    The path to mount the storage within the site's runtime environment.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the storage account identifier.
    """
    share_name: str = pulumi.output_property("shareName")
    """
    The name of the file share (container name, for Blob storage).
    """
    type: str = pulumi.output_property("type")
    """
    The type of storage. Possible values are `AzureBlob` and `AzureFiles`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateOrderCertificate(dict):
    certificate_name: Optional[str] = pulumi.output_property("certificateName")
    """
    The name of the App Service Certificate.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    Key Vault resource Id.
    """
    key_vault_secret_name: Optional[str] = pulumi.output_property("keyVaultSecretName")
    """
    Key Vault secret name.
    """
    provisioning_state: Optional[str] = pulumi.output_property("provisioningState")
    """
    Status of the Key Vault secret.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettings(dict):
    active_directory: Optional['outputs.FunctionAppAuthSettingsActiveDirectory'] = pulumi.output_property("activeDirectory")
    """
    A `active_directory` block as defined below.
    """
    additional_login_params: Optional[Dict[str, str]] = pulumi.output_property("additionalLoginParams")
    """
    Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
    """
    allowed_external_redirect_urls: Optional[List[str]] = pulumi.output_property("allowedExternalRedirectUrls")
    """
    External URLs that can be redirected to as part of logging in or logging out of the app.
    """
    default_provider: Optional[str] = pulumi.output_property("defaultProvider")
    """
    The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Authentication enabled?
    """
    facebook: Optional['outputs.FunctionAppAuthSettingsFacebook'] = pulumi.output_property("facebook")
    """
    A `facebook` block as defined below.
    """
    google: Optional['outputs.FunctionAppAuthSettingsGoogle'] = pulumi.output_property("google")
    """
    A `google` block as defined below.
    """
    issuer: Optional[str] = pulumi.output_property("issuer")
    """
    Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
    """
    microsoft: Optional['outputs.FunctionAppAuthSettingsMicrosoft'] = pulumi.output_property("microsoft")
    """
    A `microsoft` block as defined below.
    """
    runtime_version: Optional[str] = pulumi.output_property("runtimeVersion")
    """
    The runtime version of the Authentication/Authorization module.
    """
    token_refresh_extension_hours: Optional[float] = pulumi.output_property("tokenRefreshExtensionHours")
    """
    The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.
    """
    token_store_enabled: Optional[bool] = pulumi.output_property("tokenStoreEnabled")
    """
    If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.
    """
    twitter: Optional['outputs.FunctionAppAuthSettingsTwitter'] = pulumi.output_property("twitter")
    """
    A `twitter` block as defined below.
    """
    unauthenticated_client_action: Optional[str] = pulumi.output_property("unauthenticatedClientAction")
    """
    The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettingsActiveDirectory(dict):
    allowed_audiences: Optional[List[str]] = pulumi.output_property("allowedAudiences")
    """
    Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of this relying party application. Enables OpenIDConnection authentication with Azure Active Directory.
    """
    client_secret: Optional[str] = pulumi.output_property("clientSecret")
    """
    The Client Secret of this relying party application. If no secret is provided, implicit flow will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettingsFacebook(dict):
    app_id: str = pulumi.output_property("appId")
    """
    The App ID of the Facebook app used for login
    """
    app_secret: str = pulumi.output_property("appSecret")
    """
    The App Secret of the Facebook app used for Facebook Login.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. https://developers.facebook.com/docs/facebook-login
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettingsGoogle(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OpenID Connect Client ID for the Google web application.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The client secret associated with the Google web application.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. https://developers.google.com/identity/sign-in/web/
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettingsMicrosoft(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client ID that was created for the app used for authentication.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret that was created for the app used for authentication.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. https://msdn.microsoft.com/en-us/library/dn631845.aspx
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppAuthSettingsTwitter(dict):
    consumer_key: str = pulumi.output_property("consumerKey")
    consumer_secret: str = pulumi.output_property("consumerSecret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Connection String.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and  `SQLServer`.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the Function App. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSiteConfig(dict):
    always_on: Optional[bool] = pulumi.output_property("alwaysOn")
    """
    Should the Function App be loaded at all times? Defaults to `false`.
    """
    cors: Optional['outputs.FunctionAppSiteConfigCors'] = pulumi.output_property("cors")
    """
    A `cors` block as defined below.
    """
    ftps_state: Optional[str] = pulumi.output_property("ftpsState")
    """
    State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.
    """
    http2_enabled: Optional[bool] = pulumi.output_property("http2Enabled")
    """
    Specifies whether or not the http2 protocol should be enabled. Defaults to `false`.
    """
    ip_restrictions: Optional[List['outputs.FunctionAppSiteConfigIpRestriction']] = pulumi.output_property("ipRestrictions")
    """
    A list of objects representing ip restrictions as defined below.
    """
    linux_fx_version: Optional[str] = pulumi.output_property("linuxFxVersion")
    """
    Linux App Framework and version for the AppService, e.g. `DOCKER|(golang:latest)`.
    """
    min_tls_version: Optional[str] = pulumi.output_property("minTlsVersion")
    """
    The minimum supported TLS version for the function app. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new function apps.
    """
    pre_warmed_instance_count: Optional[float] = pulumi.output_property("preWarmedInstanceCount")
    """
    The number of pre-warmed instances for this function app. Only affects apps on the Premium plan.
    """
    use32_bit_worker_process: Optional[bool] = pulumi.output_property("use32BitWorkerProcess")
    """
    Should the Function App run in 32 bit mode, rather than 64 bit mode? Defaults to `true`.
    """
    websockets_enabled: Optional[bool] = pulumi.output_property("websocketsEnabled")
    """
    Should WebSockets be enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSiteConfigCors(dict):
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
    """
    support_credentials: Optional[bool] = pulumi.output_property("supportCredentials")
    """
    Are credentials supported?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSiteConfigIpRestriction(dict):
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address CIDR notation used for this IP Restriction.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSiteCredential(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the username, which can be used to publish to this App Service.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    The username which can be used to publish to this App Service
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettings(dict):
    active_directory: Optional['outputs.FunctionAppSlotAuthSettingsActiveDirectory'] = pulumi.output_property("activeDirectory")
    """
    An `active_directory` block as defined below.
    """
    additional_login_params: Optional[Dict[str, str]] = pulumi.output_property("additionalLoginParams")
    """
    Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
    """
    allowed_external_redirect_urls: Optional[List[str]] = pulumi.output_property("allowedExternalRedirectUrls")
    """
    External URLs that can be redirected to as part of logging in or logging out of the app.
    """
    default_provider: Optional[str] = pulumi.output_property("defaultProvider")
    """
    The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Authentication enabled?
    """
    facebook: Optional['outputs.FunctionAppSlotAuthSettingsFacebook'] = pulumi.output_property("facebook")
    """
    A `facebook` block as defined below.
    """
    google: Optional['outputs.FunctionAppSlotAuthSettingsGoogle'] = pulumi.output_property("google")
    """
    A `google` block as defined below.
    """
    issuer: Optional[str] = pulumi.output_property("issuer")
    """
    Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
    """
    microsoft: Optional['outputs.FunctionAppSlotAuthSettingsMicrosoft'] = pulumi.output_property("microsoft")
    """
    A `microsoft` block as defined below.
    """
    runtime_version: Optional[str] = pulumi.output_property("runtimeVersion")
    """
    The runtime version of the Authentication/Authorization module.
    """
    token_refresh_extension_hours: Optional[float] = pulumi.output_property("tokenRefreshExtensionHours")
    """
    The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.
    """
    token_store_enabled: Optional[bool] = pulumi.output_property("tokenStoreEnabled")
    """
    If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.
    """
    twitter: Optional['outputs.FunctionAppSlotAuthSettingsTwitter'] = pulumi.output_property("twitter")
    """
    A `twitter` block as defined below.
    """
    unauthenticated_client_action: Optional[str] = pulumi.output_property("unauthenticatedClientAction")
    """
    The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettingsActiveDirectory(dict):
    allowed_audiences: Optional[List[str]] = pulumi.output_property("allowedAudiences")
    """
    Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of this relying party application. Enables OpenIDConnection authentication with Azure Active Directory.
    """
    client_secret: Optional[str] = pulumi.output_property("clientSecret")
    """
    The Client Secret of this relying party application. If no secret is provided, implicit flow will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettingsFacebook(dict):
    app_id: str = pulumi.output_property("appId")
    """
    The App ID of the Facebook app used for login
    """
    app_secret: str = pulumi.output_property("appSecret")
    """
    The App Secret of the Facebook app used for Facebook Login.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. https://developers.facebook.com/docs/facebook-login
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettingsGoogle(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OpenID Connect Client ID for the Google web application.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The client secret associated with the Google web application.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. https://developers.google.com/identity/sign-in/web/
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettingsMicrosoft(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client ID that was created for the app used for authentication.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret that was created for the app used for authentication.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. https://msdn.microsoft.com/en-us/library/dn631845.aspx
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotAuthSettingsTwitter(dict):
    consumer_key: str = pulumi.output_property("consumerKey")
    consumer_secret: str = pulumi.output_property("consumerSecret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Connection String.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and  `SQLServer`.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the Function App. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotSiteConfig(dict):
    always_on: Optional[bool] = pulumi.output_property("alwaysOn")
    """
    Should the Function App be loaded at all times? Defaults to `false`.
    """
    cors: Optional['outputs.FunctionAppSlotSiteConfigCors'] = pulumi.output_property("cors")
    """
    A `cors` block as defined below.
    """
    ftps_state: Optional[str] = pulumi.output_property("ftpsState")
    """
    State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.
    """
    http2_enabled: Optional[bool] = pulumi.output_property("http2Enabled")
    """
    Specifies whether or not the http2 protocol should be enabled. Defaults to `false`.
    """
    ip_restrictions: Optional[List['outputs.FunctionAppSlotSiteConfigIpRestriction']] = pulumi.output_property("ipRestrictions")
    """
    A [List of objects](https://www.terraform.io/docs/configuration/attr-as-blocks.html) representing ip restrictions as defined below.
    """
    linux_fx_version: Optional[str] = pulumi.output_property("linuxFxVersion")
    """
    Linux App Framework and version for the AppService, e.g. `DOCKER|(golang:latest)`.
    """
    min_tls_version: Optional[str] = pulumi.output_property("minTlsVersion")
    """
    The minimum supported TLS version for the function app. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new function apps.
    """
    pre_warmed_instance_count: Optional[float] = pulumi.output_property("preWarmedInstanceCount")
    """
    The number of pre-warmed instances for this function app. Only affects apps on the Premium plan.
    """
    use32_bit_worker_process: Optional[bool] = pulumi.output_property("use32BitWorkerProcess")
    """
    Should the Function App run in 32 bit mode, rather than 64 bit mode? Defaults to `true`.
    """
    websockets_enabled: Optional[bool] = pulumi.output_property("websocketsEnabled")
    """
    Should WebSockets be enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotSiteConfigCors(dict):
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
    """
    support_credentials: Optional[bool] = pulumi.output_property("supportCredentials")
    """
    Are credentials supported?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotSiteConfigIpRestriction(dict):
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address CIDR notation used for this IP Restriction.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class FunctionAppSlotSiteCredential(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the username, which can be used to publish to this App Service.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    The username which can be used to publish to this App Service
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanSku(dict):
    capacity: Optional[float] = pulumi.output_property("capacity")
    """
    Specifies the number of workers associated with this App Service Plan.
    """
    size: str = pulumi.output_property("size")
    """
    Specifies the plan's instance size.
    """
    tier: str = pulumi.output_property("tier")
    """
    Specifies the plan's pricing tier.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettings(dict):
    active_directory: Optional['outputs.SlotAuthSettingsActiveDirectory'] = pulumi.output_property("activeDirectory")
    """
    A `active_directory` block as defined below.
    """
    additional_login_params: Optional[Dict[str, str]] = pulumi.output_property("additionalLoginParams")
    """
    Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
    """
    allowed_external_redirect_urls: Optional[List[str]] = pulumi.output_property("allowedExternalRedirectUrls")
    """
    External URLs that can be redirected to as part of logging in or logging out of the app.
    """
    default_provider: Optional[str] = pulumi.output_property("defaultProvider")
    """
    The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Authentication enabled?
    """
    facebook: Optional['outputs.SlotAuthSettingsFacebook'] = pulumi.output_property("facebook")
    """
    A `facebook` block as defined below.
    """
    google: Optional['outputs.SlotAuthSettingsGoogle'] = pulumi.output_property("google")
    """
    A `google` block as defined below.
    """
    issuer: Optional[str] = pulumi.output_property("issuer")
    """
    Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
    """
    microsoft: Optional['outputs.SlotAuthSettingsMicrosoft'] = pulumi.output_property("microsoft")
    """
    A `microsoft` block as defined below.
    """
    runtime_version: Optional[str] = pulumi.output_property("runtimeVersion")
    """
    The runtime version of the Authentication/Authorization module.
    """
    token_refresh_extension_hours: Optional[float] = pulumi.output_property("tokenRefreshExtensionHours")
    """
    The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.
    """
    token_store_enabled: Optional[bool] = pulumi.output_property("tokenStoreEnabled")
    """
    If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.
    """
    twitter: Optional['outputs.SlotAuthSettingsTwitter'] = pulumi.output_property("twitter")
    """
    A `twitter` block as defined below.
    """
    unauthenticated_client_action: Optional[str] = pulumi.output_property("unauthenticatedClientAction")
    """
    The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettingsActiveDirectory(dict):
    allowed_audiences: Optional[List[str]] = pulumi.output_property("allowedAudiences")
    """
    Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
    """
    client_id: str = pulumi.output_property("clientId")
    """
    The Client ID of this relying party application. Enables OpenIDConnection authentication with Azure Active Directory.
    """
    client_secret: Optional[str] = pulumi.output_property("clientSecret")
    """
    The Client Secret of this relying party application. If no secret is provided, implicit flow will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettingsFacebook(dict):
    app_id: str = pulumi.output_property("appId")
    """
    The App ID of the Facebook app used for login
    """
    app_secret: str = pulumi.output_property("appSecret")
    """
    The App Secret of the Facebook app used for Facebook Login.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. https://developers.facebook.com/docs/facebook-login
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettingsGoogle(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OpenID Connect Client ID for the Google web application.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The client secret associated with the Google web application.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. https://developers.google.com/identity/sign-in/web/
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettingsMicrosoft(dict):
    client_id: str = pulumi.output_property("clientId")
    """
    The OAuth 2.0 client ID that was created for the app used for authentication.
    """
    client_secret: str = pulumi.output_property("clientSecret")
    """
    The OAuth 2.0 client secret that was created for the app used for authentication.
    """
    oauth_scopes: Optional[List[str]] = pulumi.output_property("oauthScopes")
    """
    The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. https://msdn.microsoft.com/en-us/library/dn631845.aspx
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotAuthSettingsTwitter(dict):
    consumer_key: str = pulumi.output_property("consumerKey")
    consumer_secret: str = pulumi.output_property("consumerSecret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Connection String.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure`, and  `SQLServer`.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type of the App Service. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogs(dict):
    application_logs: Optional['outputs.SlotLogsApplicationLogs'] = pulumi.output_property("applicationLogs")
    """
    An `application_logs` block as defined below.
    """
    http_logs: Optional['outputs.SlotLogsHttpLogs'] = pulumi.output_property("httpLogs")
    """
    An `http_logs` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogsApplicationLogs(dict):
    azure_blob_storage: Optional['outputs.SlotLogsApplicationLogsAzureBlobStorage'] = pulumi.output_property("azureBlobStorage")
    """
    An `azure_blob_storage` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogsApplicationLogsAzureBlobStorage(dict):
    level: str = pulumi.output_property("level")
    """
    The level at which to log. Possible values include `Error`, `Warning`, `Information`, `Verbose` and `Off`. **NOTE:** this field is not available for `http_logs`
    """
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    sas_url: str = pulumi.output_property("sasUrl")
    """
    The URL to the storage container, with a Service SAS token appended. **NOTE:** there is currently no means of generating Service SAS tokens with the `azurerm` provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogsHttpLogs(dict):
    azure_blob_storage: Optional['outputs.SlotLogsHttpLogsAzureBlobStorage'] = pulumi.output_property("azureBlobStorage")
    """
    An `azure_blob_storage` block as defined below.
    """
    file_system: Optional['outputs.SlotLogsHttpLogsFileSystem'] = pulumi.output_property("fileSystem")
    """
    A `file_system` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogsHttpLogsAzureBlobStorage(dict):
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    sas_url: str = pulumi.output_property("sasUrl")
    """
    The URL to the storage container, with a Service SAS token appended. **NOTE:** there is currently no means of generating Service SAS tokens with the `azurerm` provider.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotLogsHttpLogsFileSystem(dict):
    retention_in_days: float = pulumi.output_property("retentionInDays")
    """
    The number of days to retain logs for.
    """
    retention_in_mb: float = pulumi.output_property("retentionInMb")
    """
    The maximum size in megabytes that http log files can use before being removed.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotSiteConfig(dict):
    always_on: Optional[bool] = pulumi.output_property("alwaysOn")
    """
    Should the app be loaded at all times? Defaults to `false`.
    """
    app_command_line: Optional[str] = pulumi.output_property("appCommandLine")
    """
    App command line to launch, e.g. `/sbin/myserver -b 0.0.0.0`.
    """
    auto_swap_slot_name: Optional[str] = pulumi.output_property("autoSwapSlotName")
    """
    The name of the swap to automatically swap to during deployment
    """
    cors: Optional['outputs.SlotSiteConfigCors'] = pulumi.output_property("cors")
    """
    A `cors` block as defined below.
    """
    default_documents: Optional[List[str]] = pulumi.output_property("defaultDocuments")
    """
    The ordering of default documents to load, if an address isn't specified.
    """
    dotnet_framework_version: Optional[str] = pulumi.output_property("dotnetFrameworkVersion")
    """
    The version of the .net framework's CLR used in this App Service Slot. Possible values are `v2.0` (which will use the latest version of the .net framework for the .net CLR v2 - currently `.net 3.5`) and `v4.0` (which corresponds to the latest version of the .net CLR v4 - which at the time of writing is `.net 4.7.1`). [For more information on which .net CLR version to use based on the .net framework you're targeting - please see this table](https://en.wikipedia.org/wiki/.NET_Framework_version_history#Overview). Defaults to `v4.0`.
    """
    ftps_state: Optional[str] = pulumi.output_property("ftpsState")
    health_check_path: Optional[str] = pulumi.output_property("healthCheckPath")
    http2_enabled: Optional[bool] = pulumi.output_property("http2Enabled")
    """
    Is HTTP2 Enabled on this App Service? Defaults to `false`.
    """
    ip_restrictions: Optional[List['outputs.SlotSiteConfigIpRestriction']] = pulumi.output_property("ipRestrictions")
    """
    A list of objects representing ip restrictions as defined below.
    """
    java_container: Optional[str] = pulumi.output_property("javaContainer")
    """
    The Java Container to use. If specified `java_version` and `java_container_version` must also be specified. Possible values are `JETTY` and `TOMCAT`.
    """
    java_container_version: Optional[str] = pulumi.output_property("javaContainerVersion")
    """
    The version of the Java Container to use. If specified `java_version` and `java_container` must also be specified.
    """
    java_version: Optional[str] = pulumi.output_property("javaVersion")
    """
    The version of Java to use. If specified `java_container` and `java_container_version` must also be specified. Possible values are `1.7`, `1.8`, and `11` and their specific versions - except for Java 11 (e.g. `1.7.0_80`, `1.8.0_181`, `11`)
    """
    linux_fx_version: Optional[str] = pulumi.output_property("linuxFxVersion")
    local_mysql_enabled: Optional[bool] = pulumi.output_property("localMysqlEnabled")
    """
    Is "MySQL In App" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
    """
    managed_pipeline_mode: Optional[str] = pulumi.output_property("managedPipelineMode")
    """
    The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`.
    """
    min_tls_version: Optional[str] = pulumi.output_property("minTlsVersion")
    """
    The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services.
    """
    php_version: Optional[str] = pulumi.output_property("phpVersion")
    """
    The version of PHP to use in this App Service Slot. Possible values are `5.5`, `5.6`, `7.0`, `7.1`, `7.2`, and `7.3`.
    """
    python_version: Optional[str] = pulumi.output_property("pythonVersion")
    """
    The version of Python to use in this App Service Slot. Possible values are `2.7` and `3.4`.
    """
    remote_debugging_enabled: Optional[bool] = pulumi.output_property("remoteDebuggingEnabled")
    """
    Is Remote Debugging Enabled? Defaults to `false`.
    """
    remote_debugging_version: Optional[str] = pulumi.output_property("remoteDebuggingVersion")
    """
    Which version of Visual Studio should the Remote Debugger be compatible with? Possible values are `VS2012`, `VS2013`, `VS2015`, and `VS2017`.
    """
    scm_ip_restrictions: Optional[List['outputs.SlotSiteConfigScmIpRestriction']] = pulumi.output_property("scmIpRestrictions")
    scm_type: Optional[str] = pulumi.output_property("scmType")
    """
    The type of Source Control enabled for this App Service Slot. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
    """
    scm_use_main_ip_restriction: Optional[bool] = pulumi.output_property("scmUseMainIpRestriction")
    use32_bit_worker_process: Optional[bool] = pulumi.output_property("use32BitWorkerProcess")
    """
    Should the App Service Slot run in 32 bit mode, rather than 64 bit mode?
    """
    websockets_enabled: Optional[bool] = pulumi.output_property("websocketsEnabled")
    """
    Should WebSockets be enabled?
    """
    windows_fx_version: Optional[str] = pulumi.output_property("windowsFxVersion")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotSiteConfigCors(dict):
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.
    """
    support_credentials: Optional[bool] = pulumi.output_property("supportCredentials")
    """
    Are credentials supported?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotSiteConfigIpRestriction(dict):
    action: Optional[str] = pulumi.output_property("action")
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    Specifies the name of the App Service Slot component. Changing this forces a new resource to be created.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    virtual_network_subnet_id: Optional[str] = pulumi.output_property("virtualNetworkSubnetId")
    """
    (Optional.The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotSiteConfigScmIpRestriction(dict):
    action: Optional[str] = pulumi.output_property("action")
    ip_address: Optional[str] = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    Specifies the name of the App Service Slot component. Changing this forces a new resource to be created.
    """
    priority: Optional[float] = pulumi.output_property("priority")
    virtual_network_subnet_id: Optional[str] = pulumi.output_property("virtualNetworkSubnetId")
    """
    (Optional.The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SlotSiteCredential(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the username, which can be used to publish to this App Service.
    """
    username: Optional[str] = pulumi.output_property("username")
    """
    The username which can be used to publish to this App Service
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the App Service.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServicePlanSku(dict):
    capacity: float = pulumi.output_property("capacity")
    """
    Specifies the number of workers associated with this App Service Plan.
    """
    size: str = pulumi.output_property("size")
    """
    Specifies the plan's instance size.
    """
    tier: str = pulumi.output_property("tier")
    """
    Specifies the plan's pricing tier.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSiteConfig(dict):
    always_on: bool = pulumi.output_property("alwaysOn")
    """
    Is the app be loaded at all times?
    """
    app_command_line: str = pulumi.output_property("appCommandLine")
    """
    App command line to launch.
    """
    cors: List['outputs.GetAppServiceSiteConfigCor'] = pulumi.output_property("cors")
    """
    A `cors` block as defined above.
    """
    default_documents: List[str] = pulumi.output_property("defaultDocuments")
    """
    The ordering of default documents to load, if an address isn't specified.
    """
    dotnet_framework_version: str = pulumi.output_property("dotnetFrameworkVersion")
    """
    The version of the .net framework's CLR used in this App Service.
    """
    ftps_state: str = pulumi.output_property("ftpsState")
    """
    State of FTP / FTPS service for this AppService.
    """
    health_check_path: str = pulumi.output_property("healthCheckPath")
    """
    The health check path to be pinged by App Service.
    """
    http2_enabled: bool = pulumi.output_property("http2Enabled")
    """
    Is HTTP2 Enabled on this App Service?
    """
    ip_restrictions: List['outputs.GetAppServiceSiteConfigIpRestriction'] = pulumi.output_property("ipRestrictions")
    """
    One or more `ip_restriction` blocks as defined above.
    """
    java_container: str = pulumi.output_property("javaContainer")
    """
    The Java Container in use.
    """
    java_container_version: str = pulumi.output_property("javaContainerVersion")
    """
    The version of the Java Container in use.
    """
    java_version: str = pulumi.output_property("javaVersion")
    """
    The version of Java in use.
    """
    linux_fx_version: str = pulumi.output_property("linuxFxVersion")
    """
    Linux App Framework and version for the AppService.
    """
    local_mysql_enabled: bool = pulumi.output_property("localMysqlEnabled")
    """
    Is "MySQL In App" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
    """
    managed_pipeline_mode: str = pulumi.output_property("managedPipelineMode")
    """
    The Managed Pipeline Mode used in this App Service.
    """
    min_tls_version: str = pulumi.output_property("minTlsVersion")
    """
    The minimum supported TLS version for this App Service.
    """
    php_version: str = pulumi.output_property("phpVersion")
    """
    The version of PHP used in this App Service.
    """
    python_version: str = pulumi.output_property("pythonVersion")
    """
    The version of Python used in this App Service.
    """
    remote_debugging_enabled: bool = pulumi.output_property("remoteDebuggingEnabled")
    """
    Is Remote Debugging Enabled in this App Service?
    """
    remote_debugging_version: str = pulumi.output_property("remoteDebuggingVersion")
    """
    Which version of Visual Studio is the Remote Debugger compatible with?
    """
    scm_ip_restrictions: List['outputs.GetAppServiceSiteConfigScmIpRestriction'] = pulumi.output_property("scmIpRestrictions")
    """
    One or more `scm_ip_restriction` blocks as defined above.
    """
    scm_type: str = pulumi.output_property("scmType")
    """
    The type of Source Control enabled for this App Service.
    """
    scm_use_main_ip_restriction: bool = pulumi.output_property("scmUseMainIpRestriction")
    """
    IP security restrictions for scm to use main.
    """
    use32_bit_worker_process: bool = pulumi.output_property("use32BitWorkerProcess")
    """
    Does the App Service run in 32 bit mode, rather than 64 bit mode?
    """
    websockets_enabled: bool = pulumi.output_property("websocketsEnabled")
    """
    Are WebSockets enabled for this App Service?
    """
    windows_fx_version: str = pulumi.output_property("windowsFxVersion")
    """
    Windows Container Docker Image for the AppService.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSiteConfigCor(dict):
    allowed_origins: List[str] = pulumi.output_property("allowedOrigins")
    """
    A list of origins which are able to make cross-origin calls.
    """
    support_credentials: bool = pulumi.output_property("supportCredentials")
    """
    Are credentials supported?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSiteConfigIpRestriction(dict):
    action: str = pulumi.output_property("action")
    """
    Allow or Deny access for this IP range. Defaults to Allow.
    """
    ip_address: str = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction in CIDR notation.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the App Service.
    """
    priority: float = pulumi.output_property("priority")
    """
    The priority for this IP Restriction.
    """
    virtual_network_subnet_id: str = pulumi.output_property("virtualNetworkSubnetId")
    """
    The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSiteConfigScmIpRestriction(dict):
    action: str = pulumi.output_property("action")
    """
    Allow or Deny access for this IP range. Defaults to Allow.
    """
    ip_address: str = pulumi.output_property("ipAddress")
    """
    The IP Address used for this IP Restriction in CIDR notation.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the App Service.
    """
    priority: float = pulumi.output_property("priority")
    """
    The priority for this IP Restriction.
    """
    virtual_network_subnet_id: str = pulumi.output_property("virtualNetworkSubnetId")
    """
    The Virtual Network Subnet ID used for this IP Restriction.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSiteCredential(dict):
    password: str = pulumi.output_property("password")
    username: str = pulumi.output_property("username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAppServiceSourceControl(dict):
    branch: str = pulumi.output_property("branch")
    repo_url: str = pulumi.output_property("repoUrl")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateOrderCertificate(dict):
    certificate_name: str = pulumi.output_property("certificateName")
    """
    The name of the App Service Certificate.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    Key Vault resource Id.
    """
    key_vault_secret_name: str = pulumi.output_property("keyVaultSecretName")
    """
    Key Vault secret name.
    """
    provisioning_state: str = pulumi.output_property("provisioningState")
    """
    Status of the Key Vault secret.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionAppConnectionString(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Function App resource.
    """
    type: str = pulumi.output_property("type")
    """
    The type of the Connection String.
    """
    value: str = pulumi.output_property("value")
    """
    The value for the Connection String.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetFunctionAppSiteCredential(dict):
    password: str = pulumi.output_property("password")
    """
    The password associated with the username, which can be used to publish to this App Service.
    """
    username: str = pulumi.output_property("username")
    """
    The username which can be used to publish to this App Service
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


