# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'BastionHostIpConfiguration',
    'DiskEncryptionSetIdentity',
    'ImageDataDisk',
    'ImageOsDisk',
    'LinuxVirtualMachineAdditionalCapabilities',
    'LinuxVirtualMachineAdminSshKey',
    'LinuxVirtualMachineBootDiagnostics',
    'LinuxVirtualMachineIdentity',
    'LinuxVirtualMachineOsDisk',
    'LinuxVirtualMachineOsDiskDiffDiskSettings',
    'LinuxVirtualMachinePlan',
    'LinuxVirtualMachineScaleSetAdditionalCapabilities',
    'LinuxVirtualMachineScaleSetAdminSshKey',
    'LinuxVirtualMachineScaleSetAutomaticInstanceRepair',
    'LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy',
    'LinuxVirtualMachineScaleSetBootDiagnostics',
    'LinuxVirtualMachineScaleSetDataDisk',
    'LinuxVirtualMachineScaleSetIdentity',
    'LinuxVirtualMachineScaleSetNetworkInterface',
    'LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration',
    'LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress',
    'LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag',
    'LinuxVirtualMachineScaleSetOsDisk',
    'LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings',
    'LinuxVirtualMachineScaleSetPlan',
    'LinuxVirtualMachineScaleSetRollingUpgradePolicy',
    'LinuxVirtualMachineScaleSetSecret',
    'LinuxVirtualMachineScaleSetSecretCertificate',
    'LinuxVirtualMachineScaleSetSourceImageReference',
    'LinuxVirtualMachineScaleSetTerminateNotification',
    'LinuxVirtualMachineSecret',
    'LinuxVirtualMachineSecretCertificate',
    'LinuxVirtualMachineSourceImageReference',
    'ManagedDiskEncryptionSettings',
    'ManagedDiskEncryptionSettingsDiskEncryptionKey',
    'ManagedDiskEncryptionSettingsKeyEncryptionKey',
    'ScaleSetBootDiagnostics',
    'ScaleSetExtension',
    'ScaleSetIdentity',
    'ScaleSetNetworkProfile',
    'ScaleSetNetworkProfileDnsSettings',
    'ScaleSetNetworkProfileIpConfiguration',
    'ScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration',
    'ScaleSetOsProfile',
    'ScaleSetOsProfileLinuxConfig',
    'ScaleSetOsProfileLinuxConfigSshKey',
    'ScaleSetOsProfileSecret',
    'ScaleSetOsProfileSecretVaultCertificate',
    'ScaleSetOsProfileWindowsConfig',
    'ScaleSetOsProfileWindowsConfigAdditionalUnattendConfig',
    'ScaleSetOsProfileWindowsConfigWinrm',
    'ScaleSetPlan',
    'ScaleSetRollingUpgradePolicy',
    'ScaleSetSku',
    'ScaleSetStorageProfileDataDisk',
    'ScaleSetStorageProfileImageReference',
    'ScaleSetStorageProfileOsDisk',
    'SharedImageIdentifier',
    'SharedImageVersionTargetRegion',
    'SnapshotEncryptionSettings',
    'SnapshotEncryptionSettingsDiskEncryptionKey',
    'SnapshotEncryptionSettingsKeyEncryptionKey',
    'VirtualMachineAdditionalCapabilities',
    'VirtualMachineBootDiagnostics',
    'VirtualMachineIdentity',
    'VirtualMachineOsProfile',
    'VirtualMachineOsProfileLinuxConfig',
    'VirtualMachineOsProfileLinuxConfigSshKey',
    'VirtualMachineOsProfileSecret',
    'VirtualMachineOsProfileSecretVaultCertificate',
    'VirtualMachineOsProfileWindowsConfig',
    'VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig',
    'VirtualMachineOsProfileWindowsConfigWinrm',
    'VirtualMachinePlan',
    'VirtualMachineStorageDataDisk',
    'VirtualMachineStorageImageReference',
    'VirtualMachineStorageOsDisk',
    'WindowsVirtualMachineAdditionalCapabilities',
    'WindowsVirtualMachineAdditionalUnattendContent',
    'WindowsVirtualMachineBootDiagnostics',
    'WindowsVirtualMachineIdentity',
    'WindowsVirtualMachineOsDisk',
    'WindowsVirtualMachineOsDiskDiffDiskSettings',
    'WindowsVirtualMachinePlan',
    'WindowsVirtualMachineScaleSetAdditionalCapabilities',
    'WindowsVirtualMachineScaleSetAdditionalUnattendContent',
    'WindowsVirtualMachineScaleSetAutomaticInstanceRepair',
    'WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy',
    'WindowsVirtualMachineScaleSetBootDiagnostics',
    'WindowsVirtualMachineScaleSetDataDisk',
    'WindowsVirtualMachineScaleSetIdentity',
    'WindowsVirtualMachineScaleSetNetworkInterface',
    'WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration',
    'WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress',
    'WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag',
    'WindowsVirtualMachineScaleSetOsDisk',
    'WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings',
    'WindowsVirtualMachineScaleSetPlan',
    'WindowsVirtualMachineScaleSetRollingUpgradePolicy',
    'WindowsVirtualMachineScaleSetSecret',
    'WindowsVirtualMachineScaleSetSecretCertificate',
    'WindowsVirtualMachineScaleSetSourceImageReference',
    'WindowsVirtualMachineScaleSetTerminateNotification',
    'WindowsVirtualMachineScaleSetWinrmListener',
    'WindowsVirtualMachineSecret',
    'WindowsVirtualMachineSecretCertificate',
    'WindowsVirtualMachineSourceImageReference',
    'WindowsVirtualMachineWinrmListener',
    'GetImageDataDisk',
    'GetImageOsDisk',
    'GetSharedImageIdentifier',
    'GetSharedImageVersionTargetRegion',
    'GetSharedImageVersionsImage',
    'GetSharedImageVersionsImageTargetRegion',
    'GetSnapshotEncryptionSetting',
    'GetSnapshotEncryptionSettingDiskEncryptionKey',
    'GetSnapshotEncryptionSettingKeyEncryptionKey',
    'GetVirtualMachineIdentity',
    'GetVirtualMachineScaleSetIdentity',
]

@pulumi.output_type
class BastionHostIpConfiguration(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the IP configuration.
    """
    public_ip_address_id: str = pulumi.output_property("publicIpAddressId")
    """
    Reference to a Public IP Address to associate with this Bastion Host.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    Reference to a subnet in which this Bastion Host has been created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DiskEncryptionSetIdentity(dict):
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The (Client) ID of the Service Principal.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The ID of the Tenant the Service Principal is assigned in.
    """
    type: str = pulumi.output_property("type")
    """
    The Type of Identity which should be used for this Disk Encryption Set. At this time the only possible value is `SystemAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageDataDisk(dict):
    blob_uri: Optional[str] = pulumi.output_property("blobUri")
    """
    Specifies the URI in Azure storage of the blob that you want to use to create the image.
    """
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
    """
    lun: Optional[float] = pulumi.output_property("lun")
    """
    Specifies the logical unit number of the data disk.
    """
    managed_disk_id: Optional[str] = pulumi.output_property("managedDiskId")
    """
    Specifies the ID of the managed disk resource that you want to use to create the image.
    """
    size_gb: Optional[float] = pulumi.output_property("sizeGb")
    """
    Specifies the size of the image to be created. The target size can't be smaller than the source size.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ImageOsDisk(dict):
    blob_uri: Optional[str] = pulumi.output_property("blobUri")
    """
    Specifies the URI in Azure storage of the blob that you want to use to create the image.
    """
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
    """
    managed_disk_id: Optional[str] = pulumi.output_property("managedDiskId")
    """
    Specifies the ID of the managed disk resource that you want to use to create the image.
    """
    os_state: Optional[str] = pulumi.output_property("osState")
    """
    Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized.
    """
    os_type: Optional[str] = pulumi.output_property("osType")
    """
    Specifies the type of operating system contained in the virtual machine image. Possible values are: Windows or Linux.
    """
    size_gb: Optional[float] = pulumi.output_property("sizeGb")
    """
    Specifies the size of the image to be created. The target size can't be smaller than the source size.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineAdditionalCapabilities(dict):
    ultra_ssd_enabled: Optional[bool] = pulumi.output_property("ultraSsdEnabled")
    """
    Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine? Defaults to `false`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineAdminSshKey(dict):
    public_key: str = pulumi.output_property("publicKey")
    """
    The Public Key which should be used for authentication, which needs to be at least 2048-bit and in `ssh-rsa` format. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username for which this Public SSH Key should be configured. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineBootDiagnostics(dict):
    storage_account_uri: str = pulumi.output_property("storageAccountUri")
    """
    The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    A list of User Managed Identity ID's which should be assigned to the Linux Virtual Machine.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The ID of the Tenant the System Managed Service Principal is assigned in.
    """
    type: str = pulumi.output_property("type")
    """
    The type of Managed Identity which should be assigned to the Linux Virtual Machine. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineOsDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    diff_disk_settings: Optional['outputs.LinuxVirtualMachineOsDiskDiffDiskSettings'] = pulumi.output_property("diffDiskSettings")
    """
    A `diff_disk_settings` block as defined above.
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine is sourced from.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name which should be used for the Internal OS Disk. Changing this forces a new resource to be created.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this the Internal OS Disk. Possible values are `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`. Changing this forces a new resource to be created.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineOsDiskDiffDiskSettings(dict):
    option: str = pulumi.output_property("option")
    """
    Specifies the Ephemeral Disk Settings for the OS Disk. At this time the only possible value is `Local`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachinePlan(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the Name of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    product: str = pulumi.output_property("product")
    """
    Specifies the Product of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetAdditionalCapabilities(dict):
    ultra_ssd_enabled: Optional[bool] = pulumi.output_property("ultraSsdEnabled")
    """
    Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine Scale Set? Defaults to `false`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetAdminSshKey(dict):
    public_key: str = pulumi.output_property("publicKey")
    """
    The Public Key which should be used for authentication, which needs to be at least 2048-bit and in `ssh-rsa` format.
    """
    username: str = pulumi.output_property("username")
    """
    The Username for which this Public SSH Key should be configured.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetAutomaticInstanceRepair(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should the automatic instance repair be enabled on this Virtual Machine Scale Set?
    """
    grace_period: Optional[str] = pulumi.output_property("gracePeriod")
    """
    Amount of time (in minutes, between 30 and 90, defaults to 30 minutes) for which automatic repairs will be delayed. The grace period starts right after the VM is found unhealthy. The time duration should be specified in ISO 8601 format.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy(dict):
    disable_automatic_rollback: bool = pulumi.output_property("disableAutomaticRollback")
    """
    Should automatic rollbacks be disabled? Changing this forces a new resource to be created.
    """
    enable_automatic_os_upgrade: bool = pulumi.output_property("enableAutomaticOsUpgrade")
    """
    Should OS Upgrades automatically be applied to Scale Set instances in a rolling fashion when a newer version of the OS Image becomes available? Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetBootDiagnostics(dict):
    storage_account_uri: str = pulumi.output_property("storageAccountUri")
    """
    The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetDataDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    create_option: Optional[str] = pulumi.output_property("createOption")
    """
    The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
    """
    disk_size_gb: float = pulumi.output_property("diskSizeGb")
    """
    The size of the Data Disk which should be created.
    """
    lun: float = pulumi.output_property("lun")
    """
    The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    A list of User Managed Identity ID's which should be assigned to the Linux Virtual Machine Scale Set.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal.
    """
    type: str = pulumi.output_property("type")
    """
    The type of Managed Identity which should be assigned to the Linux Virtual Machine Scale Set. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetNetworkInterface(dict):
    dns_servers: Optional[List[str]] = pulumi.output_property("dnsServers")
    """
    A list of IP Addresses of DNS Servers which should be assigned to the Network Interface.
    """
    enable_accelerated_networking: Optional[bool] = pulumi.output_property("enableAcceleratedNetworking")
    """
    Does this Network Interface support Accelerated Networking? Defaults to `false`.
    """
    enable_ip_forwarding: Optional[bool] = pulumi.output_property("enableIpForwarding")
    """
    Does this Network Interface support IP Forwarding? Defaults to `false`.
    """
    ip_configurations: List['outputs.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration'] = pulumi.output_property("ipConfigurations")
    """
    One or more `ip_configuration` blocks as defined above.
    """
    name: str = pulumi.output_property("name")
    """
    The Name which should be used for this Network Interface. Changing this forces a new resource to be created.
    """
    network_security_group_id: Optional[str] = pulumi.output_property("networkSecurityGroupId")
    """
    The ID of a Network Security Group which should be assigned to this Network Interface.
    """
    primary: Optional[bool] = pulumi.output_property("primary")
    """
    Is this the Primary IP Configuration?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration(dict):
    application_gateway_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("applicationGatewayBackendAddressPoolIds")
    """
    A list of Backend Address Pools ID's from a Application Gateway which this Virtual Machine Scale Set should be connected to.
    """
    application_security_group_ids: Optional[List[str]] = pulumi.output_property("applicationSecurityGroupIds")
    """
    A list of Application Security Group ID's which this Virtual Machine Scale Set should be connected to.
    """
    load_balancer_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("loadBalancerBackendAddressPoolIds")
    """
    A list of Backend Address Pools ID's from a Load Balancer which this Virtual Machine Scale Set should be connected to.
    """
    load_balancer_inbound_nat_rules_ids: Optional[List[str]] = pulumi.output_property("loadBalancerInboundNatRulesIds")
    """
    A list of NAT Rule ID's from a Load Balancer which this Virtual Machine Scale Set should be connected to.
    """
    name: str = pulumi.output_property("name")
    """
    The Name which should be used for this IP Configuration.
    """
    primary: Optional[bool] = pulumi.output_property("primary")
    """
    Is this the Primary IP Configuration for this Network Interface? Defaults to `false`.
    """
    public_ip_addresses: Optional[List['outputs.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress']] = pulumi.output_property("publicIpAddresses")
    """
    A `public_ip_address` block as defined below.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet which this IP Configuration should be connected to.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    The Internet Protocol Version which should be used for this IP Configuration. Possible values are `IPv4` and `IPv6`. Defaults to `IPv4`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress(dict):
    domain_name_label: Optional[str] = pulumi.output_property("domainNameLabel")
    """
    The Prefix which should be used for the Domain Name Label for each Virtual Machine Instance. Azure concatenates the Domain Name Label and Virtual Machine Index to create a unique Domain Name Label for each Virtual Machine.
    """
    idle_timeout_in_minutes: Optional[float] = pulumi.output_property("idleTimeoutInMinutes")
    """
    The Idle Timeout in Minutes for the Public IP Address. Possible values are in the range `4` to `32`.
    """
    ip_tags: Optional[List['outputs.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag']] = pulumi.output_property("ipTags")
    """
    One or more `ip_tag` blocks as defined above.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Public IP Address Configuration.
    """
    public_ip_prefix_id: Optional[str] = pulumi.output_property("publicIpPrefixId")
    """
    The ID of the Public IP Address Prefix from where Public IP Addresses should be allocated. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag(dict):
    tag: str = pulumi.output_property("tag")
    """
    The IP Tag associated with the Public IP, such as `SQL` or `Storage`.
    """
    type: str = pulumi.output_property("type")
    """
    The Type of IP Tag, such as `FirstPartyUsage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetOsDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    diff_disk_settings: Optional['outputs.LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings'] = pulumi.output_property("diffDiskSettings")
    """
    A `diff_disk_settings` block as defined above. Changing this forces a new resource to be created.
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to encrypt this OS Disk.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine Scale Set is sourced from.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this the Internal OS Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings(dict):
    option: str = pulumi.output_property("option")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetPlan(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
    """
    product: str = pulumi.output_property("product")
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetRollingUpgradePolicy(dict):
    max_batch_instance_percent: float = pulumi.output_property("maxBatchInstancePercent")
    """
    The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Changing this forces a new resource to be created.
    """
    max_unhealthy_instance_percent: float = pulumi.output_property("maxUnhealthyInstancePercent")
    """
    The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Changing this forces a new resource to be created.
    """
    max_unhealthy_upgraded_instance_percent: float = pulumi.output_property("maxUnhealthyUpgradedInstancePercent")
    """
    The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Changing this forces a new resource to be created.
    """
    pause_time_between_batches: str = pulumi.output_property("pauseTimeBetweenBatches")
    """
    The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetSecret(dict):
    certificates: List['outputs.LinuxVirtualMachineScaleSetSecretCertificate'] = pulumi.output_property("certificates")
    """
    One or more `certificate` blocks as defined above.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault from which all Secrets should be sourced.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetSecretCertificate(dict):
    url: str = pulumi.output_property("url")
    """
    The Secret URL of a Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetSourceImageReference(dict):
    offer: str = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """
    sku: str = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines.
    """
    version: str = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineScaleSetTerminateNotification(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should the terminate notification be enabled on this Virtual Machine Scale Set? Defaults to `false`.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Length of time (in minutes, between 5 and 15) a notification to be sent to the VM on the instance metadata server till the VM gets deleted. The time duration should be specified in ISO 8601 format.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineSecret(dict):
    certificates: List['outputs.LinuxVirtualMachineSecretCertificate'] = pulumi.output_property("certificates")
    """
    One or more `certificate` blocks as defined above.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault from which all Secrets should be sourced.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineSecretCertificate(dict):
    url: str = pulumi.output_property("url")
    """
    The Secret URL of a Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LinuxVirtualMachineSourceImageReference(dict):
    offer: str = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """
    sku: str = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines.
    """
    version: str = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagedDiskEncryptionSettings(dict):
    disk_encryption_key: Optional['outputs.ManagedDiskEncryptionSettingsDiskEncryptionKey'] = pulumi.output_property("diskEncryptionKey")
    """
    A `disk_encryption_key` block as defined above.
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Is Encryption enabled on this Managed Disk? Changing this forces a new resource to be created.
    """
    key_encryption_key: Optional['outputs.ManagedDiskEncryptionSettingsKeyEncryptionKey'] = pulumi.output_property("keyEncryptionKey")
    """
    A `key_encryption_key` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagedDiskEncryptionSettingsDiskEncryptionKey(dict):
    secret_url: str = pulumi.output_property("secretUrl")
    """
    The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as `id` on the `keyvault.Secret` resource.
    """
    source_vault_id: str = pulumi.output_property("sourceVaultId")
    """
    The ID of the source Key Vault.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ManagedDiskEncryptionSettingsKeyEncryptionKey(dict):
    key_url: str = pulumi.output_property("keyUrl")
    """
    The URL to the Key Vault Key used as the Key Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
    """
    source_vault_id: str = pulumi.output_property("sourceVaultId")
    """
    The ID of the source Key Vault.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetBootDiagnostics(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    storage_uri: str = pulumi.output_property("storageUri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetExtension(dict):
    auto_upgrade_minor_version: Optional[bool] = pulumi.output_property("autoUpgradeMinorVersion")
    """
    Specifies whether or not to use the latest minor version available.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the extension.
    """
    protected_settings: Optional[str] = pulumi.output_property("protectedSettings")
    """
    The protected_settings passed to the extension, like settings, these are specified as a JSON object in a string.
    """
    provision_after_extensions: Optional[List[str]] = pulumi.output_property("provisionAfterExtensions")
    """
    Specifies a dependency array of extensions required to be executed before, the array stores the name of each extension.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    The publisher of the extension, available publishers can be found by using the Azure CLI.
    """
    settings: Optional[str] = pulumi.output_property("settings")
    """
    The settings passed to the extension, these are specified as a JSON object in a string.
    """
    type: str = pulumi.output_property("type")
    """
    The type of extension, available types for a publisher can be found using the Azure CLI.
    """
    type_handler_version: str = pulumi.output_property("typeHandlerVersion")
    """
    Specifies the version of the extension to use, available versions can be found using the Azure CLI.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned to the VMSS. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    type: str = pulumi.output_property("type")
    """
    Specifies the identity type to be assigned to the scale set. Allowable values are `SystemAssigned` and `UserAssigned`. For the `SystemAssigned` identity the scale set's Service Principal ID (SPN) can be retrieved after the scale set has been created. See [documentation](https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview) for more information.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetNetworkProfile(dict):
    accelerated_networking: Optional[bool] = pulumi.output_property("acceleratedNetworking")
    """
    Specifies whether to enable accelerated networking or not. Defaults to `false`.
    """
    dns_settings: Optional['outputs.ScaleSetNetworkProfileDnsSettings'] = pulumi.output_property("dnsSettings")
    """
    A dns_settings block as documented below.
    """
    ip_configurations: List['outputs.ScaleSetNetworkProfileIpConfiguration'] = pulumi.output_property("ipConfigurations")
    """
    An ip_configuration block as documented below.
    """
    ip_forwarding: Optional[bool] = pulumi.output_property("ipForwarding")
    """
    Whether IP forwarding is enabled on this NIC. Defaults to `false`.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the network interface configuration.
    """
    network_security_group_id: Optional[str] = pulumi.output_property("networkSecurityGroupId")
    """
    Specifies the identifier for the network security group.
    """
    primary: bool = pulumi.output_property("primary")
    """
    Indicates whether network interfaces created from the network interface configuration will be the primary NIC of the VM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetNetworkProfileDnsSettings(dict):
    dns_servers: List[str] = pulumi.output_property("dnsServers")
    """
    Specifies an array of dns servers.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetNetworkProfileIpConfiguration(dict):
    application_gateway_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("applicationGatewayBackendAddressPoolIds")
    """
    Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets can use the same application gateway.
    """
    application_security_group_ids: Optional[List[str]] = pulumi.output_property("applicationSecurityGroupIds")
    """
    Specifies up to `20` application security group IDs.
    """
    load_balancer_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("loadBalancerBackendAddressPoolIds")
    """
    Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer.
    """
    load_balancer_inbound_nat_rules_ids: Optional[List[str]] = pulumi.output_property("loadBalancerInboundNatRulesIds")
    """
    Specifies an array of references to inbound NAT pools for load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same load balancer.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies name of the IP configuration.
    """
    primary: bool = pulumi.output_property("primary")
    """
    Specifies if this ip_configuration is the primary one.
    """
    public_ip_address_configuration: Optional['outputs.ScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration'] = pulumi.output_property("publicIpAddressConfiguration")
    """
    Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration. The public_ip_address_configuration is documented below.
    """
    subnet_id: str = pulumi.output_property("subnetId")
    """
    Specifies the identifier of the subnet.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration(dict):
    domain_name_label: str = pulumi.output_property("domainNameLabel")
    """
    The domain name label for the dns settings.
    """
    idle_timeout: float = pulumi.output_property("idleTimeout")
    """
    The idle timeout in minutes. This value must be between 4 and 30.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the public ip address configuration
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfile(dict):
    admin_password: Optional[str] = pulumi.output_property("adminPassword")
    """
    Specifies the administrator password to use for all the instances of virtual machines in a scale set.
    """
    admin_username: str = pulumi.output_property("adminUsername")
    """
    Specifies the administrator account name to use for all the instances of virtual machines in the scale set.
    """
    computer_name_prefix: str = pulumi.output_property("computerNamePrefix")
    """
    Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 9 characters long for windows images and 1 - 58 for linux. Changing this forces a new resource to be created.
    """
    custom_data: Optional[str] = pulumi.output_property("customData")
    """
    Specifies custom data to supply to the machine. On linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileLinuxConfig(dict):
    disable_password_authentication: Optional[bool] = pulumi.output_property("disablePasswordAuthentication")
    """
    Specifies whether password authentication should be disabled. Defaults to `false`. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List['outputs.ScaleSetOsProfileLinuxConfigSshKey']] = pulumi.output_property("sshKeys")
    """
    Specifies a collection of `path` and `key_data` to be placed on the virtual machine.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileLinuxConfigSshKey(dict):
    key_data: Optional[str] = pulumi.output_property("keyData")
    path: str = pulumi.output_property("path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileSecret(dict):
    source_vault_id: str = pulumi.output_property("sourceVaultId")
    """
    Specifies the key vault to use.
    """
    vault_certificates: Optional[List['outputs.ScaleSetOsProfileSecretVaultCertificate']] = pulumi.output_property("vaultCertificates")
    """
    A collection of Vault Certificates as documented below
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileSecretVaultCertificate(dict):
    certificate_store: Optional[str] = pulumi.output_property("certificateStore")
    """
    Specifies the certificate store on the Virtual Machine where the certificate should be added to.
    """
    certificate_url: str = pulumi.output_property("certificateUrl")
    """
    It is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be `data`, `dataType` and `password`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileWindowsConfig(dict):
    additional_unattend_configs: Optional[List['outputs.ScaleSetOsProfileWindowsConfigAdditionalUnattendConfig']] = pulumi.output_property("additionalUnattendConfigs")
    """
    An Additional Unattended Config block as documented below.
    """
    enable_automatic_upgrades: Optional[bool] = pulumi.output_property("enableAutomaticUpgrades")
    """
    Indicates whether virtual machines in the scale set are enabled for automatic updates.
    """
    provision_vm_agent: Optional[bool] = pulumi.output_property("provisionVmAgent")
    """
    Indicates whether virtual machine agent should be provisioned on the virtual machines in the scale set.
    """
    winrms: Optional[List['outputs.ScaleSetOsProfileWindowsConfigWinrm']] = pulumi.output_property("winrms")
    """
    A collection of WinRM configuration blocks as documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileWindowsConfigAdditionalUnattendConfig(dict):
    component: str = pulumi.output_property("component")
    """
    Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
    """
    content: str = pulumi.output_property("content")
    """
    Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
    """
    pass_: str = pulumi.output_property("pass")
    """
    Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
    """
    setting_name: str = pulumi.output_property("settingName")
    """
    Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetOsProfileWindowsConfigWinrm(dict):
    certificate_url: Optional[str] = pulumi.output_property("certificateUrl")
    """
    Specifies URL of the certificate with which new Virtual Machines is provisioned.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    Specifies the protocol of listener
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetPlan(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the image from the marketplace.
    """
    product: str = pulumi.output_property("product")
    """
    Specifies the product of the image from the marketplace.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetRollingUpgradePolicy(dict):
    max_batch_instance_percent: Optional[float] = pulumi.output_property("maxBatchInstancePercent")
    """
    The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Defaults to `20`.
    """
    max_unhealthy_instance_percent: Optional[float] = pulumi.output_property("maxUnhealthyInstancePercent")
    """
    The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Defaults to `20`.
    """
    max_unhealthy_upgraded_instance_percent: Optional[float] = pulumi.output_property("maxUnhealthyUpgradedInstancePercent")
    """
    The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Defaults to `20`.
    """
    pause_time_between_batches: Optional[str] = pulumi.output_property("pauseTimeBetweenBatches")
    """
    The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format for duration (https://en.wikipedia.org/wiki/ISO_8601#Durations). Defaults to `0` seconds represented as `PT0S`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetSku(dict):
    capacity: float = pulumi.output_property("capacity")
    """
    Specifies the number of virtual machines in the scale set.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the size of virtual machines in a scale set.
    """
    tier: Optional[str] = pulumi.output_property("tier")
    """
    Specifies the tier of virtual machines in a scale set. Possible values, `standard` or `basic`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetStorageProfileDataDisk(dict):
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
    """
    create_option: str = pulumi.output_property("createOption")
    """
    Specifies how the data disk should be created. The only possible options are `FromImage` and `Empty`.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    Specifies the size of the disk in GB. This element is required when creating an empty disk.
    """
    lun: float = pulumi.output_property("lun")
    """
    Specifies the Logical Unit Number of the disk in each virtual machine in the scale set.
    """
    managed_disk_type: Optional[str] = pulumi.output_property("managedDiskType")
    """
    Specifies the type of managed disk to create. Value must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetStorageProfileImageReference(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies the ID of the (custom) image to use to create the virtual
    machine scale set, as in the example below.
    """
    offer: Optional[str] = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines.
    """
    publisher: Optional[str] = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """
    sku: Optional[str] = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ScaleSetStorageProfileOsDisk(dict):
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching requirements. Possible values include: `None` (default), `ReadOnly`, `ReadWrite`.
    """
    create_option: str = pulumi.output_property("createOption")
    """
    Specifies how the virtual machine should be created. The only possible option is `FromImage`.
    """
    image: Optional[str] = pulumi.output_property("image")
    """
    Specifies the blob uri for user image. A virtual machine scale set creates an os disk in the same container as the user image.
    Updating the osDisk image causes the existing disk to be deleted and a new one created with the new image. If the VM scale set is in Manual upgrade mode then the virtual machines are not updated until they have manualUpgrade applied to them.
    When setting this field `os_type` needs to be specified. Cannot be used when `vhd_containers`, `managed_disk_type` or `storage_profile_image_reference` are specified.
    """
    managed_disk_type: Optional[str] = pulumi.output_property("managedDiskType")
    """
    Specifies the type of managed disk to create. Value you must be either `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`. Cannot be used when `vhd_containers` or `image` is specified.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    Specifies the disk name. Must be specified when using unmanaged disk ('managed_disk_type' property not set).
    """
    os_type: Optional[str] = pulumi.output_property("osType")
    """
    Specifies the operating system Type, valid values are windows, linux.
    """
    vhd_containers: Optional[List[str]] = pulumi.output_property("vhdContainers")
    """
    Specifies the vhd uri. Cannot be used when `image` or `managed_disk_type` is specified.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SharedImageIdentifier(dict):
    offer: str = pulumi.output_property("offer")
    """
    The Offer Name for this Shared Image.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    The Publisher Name for this Gallery Image.
    """
    sku: str = pulumi.output_property("sku")
    """
    The Name of the SKU for this Gallery Image.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SharedImageVersionTargetRegion(dict):
    name: str = pulumi.output_property("name")
    """
    The Azure Region in which this Image Version should exist.
    """
    regional_replica_count: float = pulumi.output_property("regionalReplicaCount")
    """
    The number of replicas of the Image Version to be created per region.
    """
    storage_account_type: Optional[str] = pulumi.output_property("storageAccountType")
    """
    The storage account type for the image version. Possible values are `Standard_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SnapshotEncryptionSettings(dict):
    disk_encryption_key: Optional['outputs.SnapshotEncryptionSettingsDiskEncryptionKey'] = pulumi.output_property("diskEncryptionKey")
    enabled: bool = pulumi.output_property("enabled")
    key_encryption_key: Optional['outputs.SnapshotEncryptionSettingsKeyEncryptionKey'] = pulumi.output_property("keyEncryptionKey")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SnapshotEncryptionSettingsDiskEncryptionKey(dict):
    secret_url: str = pulumi.output_property("secretUrl")
    source_vault_id: str = pulumi.output_property("sourceVaultId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SnapshotEncryptionSettingsKeyEncryptionKey(dict):
    key_url: str = pulumi.output_property("keyUrl")
    source_vault_id: str = pulumi.output_property("sourceVaultId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineAdditionalCapabilities(dict):
    ultra_ssd_enabled: bool = pulumi.output_property("ultraSsdEnabled")
    """
    Should Ultra SSD disk be enabled for this Virtual Machine?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineBootDiagnostics(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should Boot Diagnostics be enabled for this Virtual Machine?
    """
    storage_uri: str = pulumi.output_property("storageUri")
    """
    The Storage Account's Blob Endpoint which should hold the virtual machine's diagnostic files.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    Specifies a list of user managed identity ids to be assigned to the VM. Required if `type` is `UserAssigned`.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID for the Service Principal associated with the Managed Service Identity of this Virtual Machine.
    """
    type: str = pulumi.output_property("type")
    """
    The Managed Service Identity Type of this Virtual Machine. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` (where you can specify the Service Principal ID's) to be used by this Virtual Machine using the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfile(dict):
    admin_password: Optional[str] = pulumi.output_property("adminPassword")
    """
    The password associated with the local administrator account.
    """
    admin_username: str = pulumi.output_property("adminUsername")
    """
    Specifies the name of the local administrator account.
    """
    computer_name: str = pulumi.output_property("computerName")
    """
    Specifies the name of the Virtual Machine.
    """
    custom_data: Optional[str] = pulumi.output_property("customData")
    """
    Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileLinuxConfig(dict):
    disable_password_authentication: bool = pulumi.output_property("disablePasswordAuthentication")
    """
    Specifies whether password authentication should be disabled. If set to `false`, an `admin_password` must be specified.
    """
    ssh_keys: Optional[List['outputs.VirtualMachineOsProfileLinuxConfigSshKey']] = pulumi.output_property("sshKeys")
    """
    One or more `ssh_keys` blocks. This field is required if `disable_password_authentication` is set to `true`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileLinuxConfigSshKey(dict):
    key_data: str = pulumi.output_property("keyData")
    """
    The Public SSH Key which should be written to the `path` defined above.
    """
    path: str = pulumi.output_property("path")
    """
    The path of the destination file on the virtual machine
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileSecret(dict):
    source_vault_id: str = pulumi.output_property("sourceVaultId")
    """
    Specifies the ID of the Key Vault to use.
    """
    vault_certificates: Optional[List['outputs.VirtualMachineOsProfileSecretVaultCertificate']] = pulumi.output_property("vaultCertificates")
    """
    One or more `vault_certificates` blocks.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileSecretVaultCertificate(dict):
    certificate_store: Optional[str] = pulumi.output_property("certificateStore")
    """
    Specifies the certificate store on the Virtual Machine where the certificate should be added to, such as `My`.
    """
    certificate_url: str = pulumi.output_property("certificateUrl")
    """
    The ID of the Key Vault Secret. Stored secret is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be:
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileWindowsConfig(dict):
    additional_unattend_configs: Optional[List['outputs.VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig']] = pulumi.output_property("additionalUnattendConfigs")
    """
    A `additional_unattend_config` block.
    """
    enable_automatic_upgrades: Optional[bool] = pulumi.output_property("enableAutomaticUpgrades")
    """
    Are automatic updates enabled on this Virtual Machine? Defaults to `false.`
    """
    provision_vm_agent: Optional[bool] = pulumi.output_property("provisionVmAgent")
    """
    Should the Azure Virtual Machine Guest Agent be installed on this Virtual Machine? Defaults to `false`.
    """
    timezone: Optional[str] = pulumi.output_property("timezone")
    """
    Specifies the time zone of the virtual machine, [the possible values are defined here](http://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
    """
    winrms: Optional[List['outputs.VirtualMachineOsProfileWindowsConfigWinrm']] = pulumi.output_property("winrms")
    """
    One or more `winrm` block.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig(dict):
    component: str = pulumi.output_property("component")
    """
    Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
    """
    content: str = pulumi.output_property("content")
    """
    Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
    """
    pass_: str = pulumi.output_property("pass")
    """
    Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
    """
    setting_name: str = pulumi.output_property("settingName")
    """
    Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineOsProfileWindowsConfigWinrm(dict):
    certificate_url: Optional[str] = pulumi.output_property("certificateUrl")
    """
    The ID of the Key Vault Secret which contains the encrypted Certificate which should be installed on the Virtual Machine. This certificate must also be specified in the `vault_certificates` block within the `os_profile_secrets` block.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    Specifies the protocol of listener. Possible values are `HTTP` or `HTTPS`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachinePlan(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the image from the marketplace.
    """
    product: str = pulumi.output_property("product")
    """
    Specifies the product of the image from the marketplace.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineStorageDataDisk(dict):
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
    """
    create_option: str = pulumi.output_property("createOption")
    """
    Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    Specifies the size of the data disk in gigabytes.
    """
    lun: float = pulumi.output_property("lun")
    """
    Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
    """
    managed_disk_id: Optional[str] = pulumi.output_property("managedDiskId")
    """
    Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
    """
    managed_disk_type: Optional[str] = pulumi.output_property("managedDiskType")
    """
    Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the Data Disk.
    """
    vhd_uri: Optional[str] = pulumi.output_property("vhdUri")
    """
    Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineStorageImageReference(dict):
    id: Optional[str] = pulumi.output_property("id")
    """
    Specifies the ID of the Custom Image which the Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    offer: Optional[str] = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machine. Changing this forces a new resource to be created.
    """
    publisher: Optional[str] = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machine. Changing this forces a new resource to be created.
    """
    sku: Optional[str] = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machine. Changing this forces a new resource to be created.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machine. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualMachineStorageOsDisk(dict):
    caching: Optional[str] = pulumi.output_property("caching")
    """
    Specifies the caching requirements for the OS Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
    """
    create_option: str = pulumi.output_property("createOption")
    """
    Specifies how the OS Disk should be created. Possible values are `Attach` (managed disks only) and `FromImage`.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    Specifies the size of the OS Disk in gigabytes.
    """
    image_uri: Optional[str] = pulumi.output_property("imageUri")
    """
    Specifies the Image URI in the format `publisherName:offer:skus:version`. This field can also specify the [VHD uri](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-cli-deploy-templates/#create-a-custom-vm-image) of a custom VM image to clone. When cloning a Custom (Unmanaged) Disk Image the `os_type` field must be set.
    """
    managed_disk_id: Optional[str] = pulumi.output_property("managedDiskId")
    """
    Specifies the ID of an existing Managed Disk which should be attached as the OS Disk of this Virtual Machine. If this is set then the `create_option` must be set to `Attach`.
    """
    managed_disk_type: Optional[str] = pulumi.output_property("managedDiskType")
    """
    Specifies the type of Managed Disk which should be created. Possible values are `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
    """
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the OS Disk.
    """
    os_type: Optional[str] = pulumi.output_property("osType")
    """
    Specifies the Operating System on the OS Disk. Possible values are `Linux` and `Windows`.
    """
    vhd_uri: Optional[str] = pulumi.output_property("vhdUri")
    """
    Specifies the URI of the VHD file backing this Unmanaged OS Disk. Changing this forces a new resource to be created.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineAdditionalCapabilities(dict):
    ultra_ssd_enabled: Optional[bool] = pulumi.output_property("ultraSsdEnabled")
    """
    Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine? Defaults to `false`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineAdditionalUnattendContent(dict):
    content: str = pulumi.output_property("content")
    """
    The XML formatted content that is added to the unattend.xml file for the specified path and component. Changing this forces a new resource to be created.
    """
    setting: str = pulumi.output_property("setting")
    """
    The name of the setting to which the content applies. Possible values are `AutoLogon` and `FirstLogonCommands`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineBootDiagnostics(dict):
    storage_account_uri: str = pulumi.output_property("storageAccountUri")
    """
    The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    A list of User Managed Identity ID's which should be assigned to the Windows Virtual Machine.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The ID of the Tenant the System Managed Service Principal is assigned in.
    """
    type: str = pulumi.output_property("type")
    """
    The type of Managed Identity which should be assigned to the Windows Virtual Machine. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineOsDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    diff_disk_settings: Optional['outputs.WindowsVirtualMachineOsDiskDiffDiskSettings'] = pulumi.output_property("diffDiskSettings")
    """
    A `diff_disk_settings` block as defined above.
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine is sourced from.
    """
    name: Optional[str] = pulumi.output_property("name")
    """
    The name which should be used for the Internal OS Disk. Changing this forces a new resource to be created.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this the Internal OS Disk. Possible values are `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`. Changing this forces a new resource to be created.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineOsDiskDiffDiskSettings(dict):
    option: str = pulumi.output_property("option")
    """
    Specifies the Ephemeral Disk Settings for the OS Disk. At this time the only possible value is `Local`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachinePlan(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the Name of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    product: str = pulumi.output_property("product")
    """
    Specifies the Product of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetAdditionalCapabilities(dict):
    ultra_ssd_enabled: Optional[bool] = pulumi.output_property("ultraSsdEnabled")
    """
    Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine Scale Set? Defaults to `false`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetAdditionalUnattendContent(dict):
    content: str = pulumi.output_property("content")
    """
    The XML formatted content that is added to the unattend.xml file for the specified path and component. Changing this forces a new resource to be created.
    """
    setting: str = pulumi.output_property("setting")
    """
    The name of the setting to which the content applies. Possible values are `AutoLogon` and `FirstLogonCommands`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetAutomaticInstanceRepair(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should the automatic instance repair be enabled on this Virtual Machine Scale Set?
    """
    grace_period: Optional[str] = pulumi.output_property("gracePeriod")
    """
    Amount of time (in minutes, between 30 and 90, defaults to 30 minutes) for which automatic repairs will be delayed. The grace period starts right after the VM is found unhealthy. The time duration should be specified in ISO 8601 format.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy(dict):
    disable_automatic_rollback: bool = pulumi.output_property("disableAutomaticRollback")
    """
    Should automatic rollbacks be disabled? Changing this forces a new resource to be created.
    """
    enable_automatic_os_upgrade: bool = pulumi.output_property("enableAutomaticOsUpgrade")
    """
    Should OS Upgrades automatically be applied to Scale Set instances in a rolling fashion when a newer version of the OS Image becomes available? Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetBootDiagnostics(dict):
    storage_account_uri: str = pulumi.output_property("storageAccountUri")
    """
    The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetDataDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    create_option: Optional[str] = pulumi.output_property("createOption")
    """
    The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
    """
    disk_size_gb: float = pulumi.output_property("diskSizeGb")
    """
    The size of the Data Disk which should be created.
    """
    lun: float = pulumi.output_property("lun")
    """
    The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    A list of User Managed Identity ID's which should be assigned to the Windows Virtual Machine Scale Set.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal.
    """
    type: str = pulumi.output_property("type")
    """
    The type of Managed Identity which should be assigned to the Windows Virtual Machine Scale Set. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetNetworkInterface(dict):
    dns_servers: Optional[List[str]] = pulumi.output_property("dnsServers")
    """
    A list of IP Addresses of DNS Servers which should be assigned to the Network Interface.
    """
    enable_accelerated_networking: Optional[bool] = pulumi.output_property("enableAcceleratedNetworking")
    """
    Does this Network Interface support Accelerated Networking? Defaults to `false`.
    """
    enable_ip_forwarding: Optional[bool] = pulumi.output_property("enableIpForwarding")
    """
    Does this Network Interface support IP Forwarding? Defaults to `false`.
    """
    ip_configurations: List['outputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration'] = pulumi.output_property("ipConfigurations")
    """
    One or more `ip_configuration` blocks as defined above.
    """
    name: str = pulumi.output_property("name")
    """
    The Name which should be used for this Network Interface. Changing this forces a new resource to be created.
    """
    network_security_group_id: Optional[str] = pulumi.output_property("networkSecurityGroupId")
    """
    The ID of a Network Security Group which should be assigned to this Network Interface.
    """
    primary: Optional[bool] = pulumi.output_property("primary")
    """
    Is this the Primary IP Configuration?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration(dict):
    application_gateway_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("applicationGatewayBackendAddressPoolIds")
    """
    A list of Backend Address Pools ID's from a Application Gateway which this Virtual Machine Scale Set should be connected to.
    """
    application_security_group_ids: Optional[List[str]] = pulumi.output_property("applicationSecurityGroupIds")
    """
    A list of Application Security Group ID's which this Virtual Machine Scale Set should be connected to.
    """
    load_balancer_backend_address_pool_ids: Optional[List[str]] = pulumi.output_property("loadBalancerBackendAddressPoolIds")
    """
    A list of Backend Address Pools ID's from a Load Balancer which this Virtual Machine Scale Set should be connected to.
    """
    load_balancer_inbound_nat_rules_ids: Optional[List[str]] = pulumi.output_property("loadBalancerInboundNatRulesIds")
    """
    A list of NAT Rule ID's from a Load Balancer which this Virtual Machine Scale Set should be connected to.
    """
    name: str = pulumi.output_property("name")
    """
    The Name which should be used for this IP Configuration.
    """
    primary: Optional[bool] = pulumi.output_property("primary")
    """
    Is this the Primary IP Configuration for this Network Interface? Defaults to `false`.
    """
    public_ip_addresses: Optional[List['outputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress']] = pulumi.output_property("publicIpAddresses")
    """
    A `public_ip_address` block as defined below.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet which this IP Configuration should be connected to.
    """
    version: Optional[str] = pulumi.output_property("version")
    """
    The Internet Protocol Version which should be used for this IP Configuration. Possible values are `IPv4` and `IPv6`. Defaults to `IPv4`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddress(dict):
    domain_name_label: Optional[str] = pulumi.output_property("domainNameLabel")
    """
    The Prefix which should be used for the Domain Name Label for each Virtual Machine Instance. Azure concatenates the Domain Name Label and Virtual Machine Index to create a unique Domain Name Label for each Virtual Machine.
    """
    idle_timeout_in_minutes: Optional[float] = pulumi.output_property("idleTimeoutInMinutes")
    """
    The Idle Timeout in Minutes for the Public IP Address. Possible values are in the range `4` to `32`.
    """
    ip_tags: Optional[List['outputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag']] = pulumi.output_property("ipTags")
    """
    One or more `ip_tag` blocks as defined above.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of the Public IP Address Configuration.
    """
    public_ip_prefix_id: Optional[str] = pulumi.output_property("publicIpPrefixId")
    """
    The ID of the Public IP Address Prefix from where Public IP Addresses should be allocated. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationPublicIpAddressIpTag(dict):
    tag: str = pulumi.output_property("tag")
    """
    The IP Tag associated with the Public IP, such as `SQL` or `Storage`.
    """
    type: str = pulumi.output_property("type")
    """
    The Type of IP Tag, such as `FirstPartyUsage`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetOsDisk(dict):
    caching: str = pulumi.output_property("caching")
    """
    The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
    """
    diff_disk_settings: Optional['outputs.WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings'] = pulumi.output_property("diffDiskSettings")
    """
    A `diff_disk_settings` block as defined above. Changing this forces a new resource to be created.
    """
    disk_encryption_set_id: Optional[str] = pulumi.output_property("diskEncryptionSetId")
    """
    The ID of the Disk Encryption Set which should be used to encrypt this OS Disk.
    """
    disk_size_gb: Optional[float] = pulumi.output_property("diskSizeGb")
    """
    The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine Scale Set is sourced from.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The Type of Storage Account which should back this the Internal OS Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`.
    """
    write_accelerator_enabled: Optional[bool] = pulumi.output_property("writeAcceleratorEnabled")
    """
    Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings(dict):
    option: str = pulumi.output_property("option")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetPlan(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
    """
    product: str = pulumi.output_property("product")
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetRollingUpgradePolicy(dict):
    max_batch_instance_percent: float = pulumi.output_property("maxBatchInstancePercent")
    """
    The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Changing this forces a new resource to be created.
    """
    max_unhealthy_instance_percent: float = pulumi.output_property("maxUnhealthyInstancePercent")
    """
    The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Changing this forces a new resource to be created.
    """
    max_unhealthy_upgraded_instance_percent: float = pulumi.output_property("maxUnhealthyUpgradedInstancePercent")
    """
    The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Changing this forces a new resource to be created.
    """
    pause_time_between_batches: str = pulumi.output_property("pauseTimeBetweenBatches")
    """
    The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetSecret(dict):
    certificates: List['outputs.WindowsVirtualMachineScaleSetSecretCertificate'] = pulumi.output_property("certificates")
    """
    One or more `certificate` blocks as defined above.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault from which all Secrets should be sourced.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetSecretCertificate(dict):
    store: str = pulumi.output_property("store")
    """
    The certificate store on the Virtual Machine where the certificate should be added.
    """
    url: str = pulumi.output_property("url")
    """
    The Secret URL of a Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetSourceImageReference(dict):
    offer: str = pulumi.output_property("offer")
    """
    Specifies the offer of the image used to create the virtual machines.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the publisher of the image used to create the virtual machines.
    """
    sku: str = pulumi.output_property("sku")
    """
    Specifies the SKU of the image used to create the virtual machines.
    """
    version: str = pulumi.output_property("version")
    """
    Specifies the version of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetTerminateNotification(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should the terminate notification be enabled on this Virtual Machine Scale Set? Defaults to `false`.
    """
    timeout: Optional[str] = pulumi.output_property("timeout")
    """
    Length of time (in minutes, between 5 and 15) a notification to be sent to the VM on the instance metadata server till the VM gets deleted. The time duration should be specified in ISO 8601 format.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineScaleSetWinrmListener(dict):
    certificate_url: Optional[str] = pulumi.output_property("certificateUrl")
    """
    The Secret URL of a Key Vault Certificate, which must be specified when `protocol` is set to `Https`.
    """
    protocol: str = pulumi.output_property("protocol")
    """
    The Protocol of the WinRM Listener. Possible values are `Http` and `Https`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineSecret(dict):
    certificates: List['outputs.WindowsVirtualMachineSecretCertificate'] = pulumi.output_property("certificates")
    """
    One or more `certificate` blocks as defined above.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault from which all Secrets should be sourced.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineSecretCertificate(dict):
    store: str = pulumi.output_property("store")
    """
    The certificate store on the Virtual Machine where the certificate should be added.
    """
    url: str = pulumi.output_property("url")
    """
    The Secret URL of a Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineSourceImageReference(dict):
    offer: str = pulumi.output_property("offer")
    """
    (Optional) Specifies the offer of the image used to create the virtual machines.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
    """
    sku: str = pulumi.output_property("sku")
    """
    (Optional) Specifies the SKU of the image used to create the virtual machines.
    """
    version: str = pulumi.output_property("version")
    """
    (Optional) Specifies the version of the image used to create the virtual machines.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WindowsVirtualMachineWinrmListener(dict):
    certificate_url: Optional[str] = pulumi.output_property("certificateUrl")
    """
    The Secret URL of a Key Vault Certificate, which must be specified when `protocol` is set to `Https`.
    """
    protocol: str = pulumi.output_property("protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetImageDataDisk(dict):
    blob_uri: str = pulumi.output_property("blobUri")
    """
    the URI in Azure storage of the blob used to create the image.
    """
    caching: str = pulumi.output_property("caching")
    """
    the caching mode for the Data Disk, such as `ReadWrite`, `ReadOnly`, or `None`.
    """
    lun: float = pulumi.output_property("lun")
    """
    the logical unit number of the data disk.
    """
    managed_disk_id: str = pulumi.output_property("managedDiskId")
    """
    the ID of the Managed Disk used as the Data Disk Image.
    """
    size_gb: float = pulumi.output_property("sizeGb")
    """
    the size of this Data Disk in GB.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetImageOsDisk(dict):
    blob_uri: str = pulumi.output_property("blobUri")
    """
    the URI in Azure storage of the blob used to create the image.
    """
    caching: str = pulumi.output_property("caching")
    """
    the caching mode for the Data Disk, such as `ReadWrite`, `ReadOnly`, or `None`.
    """
    managed_disk_id: str = pulumi.output_property("managedDiskId")
    """
    the ID of the Managed Disk used as the Data Disk Image.
    """
    os_state: str = pulumi.output_property("osState")
    """
    the State of the OS used in the Image, such as `Generalized`.
    """
    os_type: str = pulumi.output_property("osType")
    """
    the type of Operating System used on the OS Disk. such as `Linux` or `Windows`.
    """
    size_gb: float = pulumi.output_property("sizeGb")
    """
    the size of this Data Disk in GB.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSharedImageIdentifier(dict):
    offer: str = pulumi.output_property("offer")
    """
    The Offer Name for this Shared Image.
    """
    publisher: str = pulumi.output_property("publisher")
    """
    The Publisher Name for this Gallery Image.
    """
    sku: str = pulumi.output_property("sku")
    """
    The Name of the SKU for this Gallery Image.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSharedImageVersionTargetRegion(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Image Version.
    """
    regional_replica_count: float = pulumi.output_property("regionalReplicaCount")
    """
    The number of replicas of the Image Version to be created per region.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The storage account type for the image version.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSharedImageVersionsImage(dict):
    exclude_from_latest: bool = pulumi.output_property("excludeFromLatest")
    """
    Is this Image Version excluded from the `latest` filter?
    """
    location: str = pulumi.output_property("location")
    """
    The supported Azure location where the Shared Image Gallery exists.
    """
    managed_image_id: str = pulumi.output_property("managedImageId")
    """
    The ID of the Managed Image which was the source of this Shared Image Version.
    """
    name: str = pulumi.output_property("name")
    """
    The Azure Region in which this Image Version exists.
    """
    tags: Dict[str, str] = pulumi.output_property("tags")
    """
    A mapping of tags assigned to the Shared Image.
    """
    target_regions: List['outputs.GetSharedImageVersionsImageTargetRegion'] = pulumi.output_property("targetRegions")
    """
    One or more `target_region` blocks as documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSharedImageVersionsImageTargetRegion(dict):
    name: str = pulumi.output_property("name")
    """
    The Azure Region in which this Image Version exists.
    """
    regional_replica_count: float = pulumi.output_property("regionalReplicaCount")
    """
    The number of replicas of the Image Version to be created per region.
    """
    storage_account_type: str = pulumi.output_property("storageAccountType")
    """
    The storage account type for the image version.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSnapshotEncryptionSetting(dict):
    disk_encryption_keys: List['outputs.GetSnapshotEncryptionSettingDiskEncryptionKey'] = pulumi.output_property("diskEncryptionKeys")
    enabled: bool = pulumi.output_property("enabled")
    key_encryption_keys: List['outputs.GetSnapshotEncryptionSettingKeyEncryptionKey'] = pulumi.output_property("keyEncryptionKeys")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSnapshotEncryptionSettingDiskEncryptionKey(dict):
    secret_url: str = pulumi.output_property("secretUrl")
    source_vault_id: str = pulumi.output_property("sourceVaultId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetSnapshotEncryptionSettingKeyEncryptionKey(dict):
    key_url: str = pulumi.output_property("keyUrl")
    source_vault_id: str = pulumi.output_property("sourceVaultId")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualMachineIdentity(dict):
    identity_ids: List[str] = pulumi.output_property("identityIds")
    """
    The list of User Managed Identity ID's which are assigned to the Virtual Machine.
    """
    principal_id: str = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal assigned to the Virtual Machine.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The ID of the Tenant of the System Managed Service Principal assigned to the Virtual Machine.
    """
    type: str = pulumi.output_property("type")
    """
    The identity type of the Managed Identity assigned to the Virtual Machine.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetVirtualMachineScaleSetIdentity(dict):
    identity_ids: List[str] = pulumi.output_property("identityIds")
    """
    The list of User Managed Identity ID's which are assigned to the Virtual Machine Scale Set.
    """
    principal_id: str = pulumi.output_property("principalId")
    """
    The ID of the System Managed Service Principal assigned to the Virtual Machine Scale Set.
    """
    type: str = pulumi.output_property("type")
    """
    The identity type of the Managed Identity assigned to the Virtual Machine Scale Set.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


