# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.input_type
class AccountActiveDirectoryArgs:
    dns_servers: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("dnsServers")
    """
    A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
    """
    domain: pulumi.Input[str] = pulumi.input_property("domain")
    """
    The name of the Active Directory domain.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password associated with the `username`.
    """
    smb_server_name: pulumi.Input[str] = pulumi.input_property("smbServerName")
    """
    The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of Active Directory Domain Administrator.
    """
    organizational_unit: Optional[pulumi.Input[str]] = pulumi.input_property("organizationalUnit")
    """
    The Organizational Unit (OU) within the Active Directory Domain.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dns_servers: pulumi.Input[List[pulumi.Input[str]]], domain: pulumi.Input[str], password: pulumi.Input[str], smb_server_name: pulumi.Input[str], username: pulumi.Input[str], organizational_unit: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] dns_servers: A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
        :param pulumi.Input[str] domain: The name of the Active Directory domain.
        :param pulumi.Input[str] password: The password associated with the `username`.
        :param pulumi.Input[str] smb_server_name: The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
        :param pulumi.Input[str] username: The Username of Active Directory Domain Administrator.
        :param pulumi.Input[str] organizational_unit: The Organizational Unit (OU) within the Active Directory Domain.
        """
        __self__.dns_servers = dns_servers
        __self__.domain = domain
        __self__.password = password
        __self__.smb_server_name = smb_server_name
        __self__.username = username
        __self__.organizational_unit = organizational_unit

@pulumi.input_type
class VolumeExportPolicyRuleArgs:
    allowed_clients: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("allowedClients")
    """
    A list of allowed clients IPv4 addresses.
    """
    rule_index: pulumi.Input[float] = pulumi.input_property("ruleIndex")
    """
    The index number of the rule.
    """
    cifs_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("cifsEnabled")
    """
    Is the CIFS protocol allowed?
    """
    nfsv3_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("nfsv3Enabled")
    """
    Is the NFSv3 protocol allowed?
    """
    nfsv4_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("nfsv4Enabled")
    """
    Is the NFSv4 protocol allowed?
    """
    protocols_enabled: Optional[pulumi.Input[str]] = pulumi.input_property("protocolsEnabled")
    """
    A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
    """
    unix_read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("unixReadOnly")
    """
    Is the file system on unix read only?
    """
    unix_read_write: Optional[pulumi.Input[bool]] = pulumi.input_property("unixReadWrite")
    """
    Is the file system on unix read and write?
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_clients: pulumi.Input[List[pulumi.Input[str]]], rule_index: pulumi.Input[float], cifs_enabled: Optional[pulumi.Input[bool]] = None, nfsv3_enabled: Optional[pulumi.Input[bool]] = None, nfsv4_enabled: Optional[pulumi.Input[bool]] = None, protocols_enabled: Optional[pulumi.Input[str]] = None, unix_read_only: Optional[pulumi.Input[bool]] = None, unix_read_write: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_clients: A list of allowed clients IPv4 addresses.
        :param pulumi.Input[float] rule_index: The index number of the rule.
        :param pulumi.Input[bool] cifs_enabled: Is the CIFS protocol allowed?
        :param pulumi.Input[bool] nfsv3_enabled: Is the NFSv3 protocol allowed?
        :param pulumi.Input[bool] nfsv4_enabled: Is the NFSv4 protocol allowed?
        :param pulumi.Input[str] protocols_enabled: A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
        :param pulumi.Input[bool] unix_read_only: Is the file system on unix read only?
        :param pulumi.Input[bool] unix_read_write: Is the file system on unix read and write?
        """
        __self__.allowed_clients = allowed_clients
        __self__.rule_index = rule_index
        if cifs_enabled is not None:
            warnings.warn("Deprecated in favour of `protocols_enabled`", DeprecationWarning)
            pulumi.log.warn("cifs_enabled is deprecated: Deprecated in favour of `protocols_enabled`")
        __self__.cifs_enabled = cifs_enabled
        if nfsv3_enabled is not None:
            warnings.warn("Deprecated in favour of `protocols_enabled`", DeprecationWarning)
            pulumi.log.warn("nfsv3_enabled is deprecated: Deprecated in favour of `protocols_enabled`")
        __self__.nfsv3_enabled = nfsv3_enabled
        if nfsv4_enabled is not None:
            warnings.warn("Deprecated in favour of `protocols_enabled`", DeprecationWarning)
            pulumi.log.warn("nfsv4_enabled is deprecated: Deprecated in favour of `protocols_enabled`")
        __self__.nfsv4_enabled = nfsv4_enabled
        __self__.protocols_enabled = protocols_enabled
        __self__.unix_read_only = unix_read_only
        __self__.unix_read_write = unix_read_write

