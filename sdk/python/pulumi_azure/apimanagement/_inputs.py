# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ApiImportArgs',
    'ApiImportWsdlSelectorArgs',
    'ApiOperationRequestArgs',
    'ApiOperationRequestHeaderArgs',
    'ApiOperationRequestQueryParameterArgs',
    'ApiOperationRequestRepresentationArgs',
    'ApiOperationRequestRepresentationFormParameterArgs',
    'ApiOperationResponseArgs',
    'ApiOperationResponseHeaderArgs',
    'ApiOperationResponseRepresentationArgs',
    'ApiOperationResponseRepresentationFormParameterArgs',
    'ApiOperationTemplateParameterArgs',
    'ApiSubscriptionKeyParameterNamesArgs',
    'AuthorizationServerTokenBodyParameterArgs',
    'BackendCredentialsArgs',
    'BackendCredentialsAuthorizationArgs',
    'BackendProxyArgs',
    'BackendServiceFabricClusterArgs',
    'BackendServiceFabricClusterServerX509NameArgs',
    'BackendTlsArgs',
    'LoggerApplicationInsightsArgs',
    'LoggerEventhubArgs',
    'ServiceAdditionalLocationArgs',
    'ServiceCertificateArgs',
    'ServiceHostnameConfigurationArgs',
    'ServiceHostnameConfigurationDeveloperPortalArgs',
    'ServiceHostnameConfigurationManagementArgs',
    'ServiceHostnameConfigurationPortalArgs',
    'ServiceHostnameConfigurationProxyArgs',
    'ServiceHostnameConfigurationScmArgs',
    'ServiceIdentityArgs',
    'ServicePolicyArgs',
    'ServiceProtocolsArgs',
    'ServiceSecurityArgs',
    'ServiceSignInArgs',
    'ServiceSignUpArgs',
    'ServiceSignUpTermsOfServiceArgs',
    'ServiceVirtualNetworkConfigurationArgs',
]

@pulumi.input_type
class ApiImportArgs:
    def __init__(__self__, *,
                 content_format: pulumi.Input[str],
                 content_value: pulumi.Input[str],
                 wsdl_selector: Optional[pulumi.Input['ApiImportWsdlSelectorArgs']] = None):
        """
        :param pulumi.Input[str] content_format: The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
        :param pulumi.Input[str] content_value: The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
        :param pulumi.Input['ApiImportWsdlSelectorArgs'] wsdl_selector: A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
        """
        pulumi.set(__self__, "contentFormat", content_format)
        pulumi.set(__self__, "contentValue", content_value)
        pulumi.set(__self__, "wsdlSelector", wsdl_selector)

    @property
    @pulumi.getter(name="contentFormat")
    def content_format(self) -> pulumi.Input[str]:
        """
        The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
        """
        ...

    @content_format.setter
    def content_format(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="contentValue")
    def content_value(self) -> pulumi.Input[str]:
        """
        The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
        """
        ...

    @content_value.setter
    def content_value(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="wsdlSelector")
    def wsdl_selector(self) -> Optional[pulumi.Input['ApiImportWsdlSelectorArgs']]:
        """
        A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
        """
        ...

    @wsdl_selector.setter
    def wsdl_selector(self, value: Optional[pulumi.Input['ApiImportWsdlSelectorArgs']]):
        ...


@pulumi.input_type
class ApiImportWsdlSelectorArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 service_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] endpoint_name: The name of endpoint (port) to import from WSDL.
        :param pulumi.Input[str] service_name: The name of service to import from WSDL.
        """
        pulumi.set(__self__, "endpointName", endpoint_name)
        pulumi.set(__self__, "serviceName", service_name)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        """
        The name of endpoint (port) to import from WSDL.
        """
        ...

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of service to import from WSDL.
        """
        ...

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ApiOperationRequestArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]]] = None,
                 query_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]]] = None,
                 representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]]] = None):
        """
        :param pulumi.Input[str] description: A description of the HTTP Request, which may include HTML tags.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]] headers: One or more `header` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]] query_parameters: One or more `query_parameter` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]] representations: One or more `representation` blocks as defined below.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "queryParameters", query_parameters)
        pulumi.set(__self__, "representations", representations)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the HTTP Request, which may include HTML tags.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]]]:
        """
        One or more `header` blocks as defined above.
        """
        ...

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]]]):
        ...

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]]]:
        """
        One or more `query_parameter` blocks as defined above.
        """
        ...

    @query_parameters.setter
    def query_parameters(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]]]):
        ...

    @property
    @pulumi.getter
    def representations(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]]]:
        """
        One or more `representation` blocks as defined below.
        """
        ...

    @representations.setter
    def representations(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]]]):
        ...


@pulumi.input_type
class ApiOperationRequestHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Header.
        :param pulumi.Input[bool] required: Is this Header Required?
        :param pulumi.Input[str] type: The Type of this Header, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Header.
        :param pulumi.Input[str] description: A description of this Header.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Header.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Header Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Header, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Header.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Header.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Header.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiOperationRequestQueryParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Query Parameter.
        :param pulumi.Input[bool] required: Is this Query Parameter Required?
        :param pulumi.Input[str] type: The Type of this Query Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Query Parameter.
        :param pulumi.Input[str] description: A description of this Query Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Query Parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Query Parameter.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Query Parameter Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Query Parameter, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Query Parameter.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Query Parameter.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Query Parameter.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiOperationRequestRepresentationArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]]] = None,
                 sample: Optional[pulumi.Input[str]] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content_type: The Content Type of this representation, such as `application/json`.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]] form_parameters: One or more `form_parameter` block as defined above.
        :param pulumi.Input[str] sample: An example of this representation.
        :param pulumi.Input[str] schema_id: The ID of an API Management Schema which represents this Response.
        :param pulumi.Input[str] type_name: The Type Name defined by the Schema.
        """
        pulumi.set(__self__, "contentType", content_type)
        pulumi.set(__self__, "formParameters", form_parameters)
        pulumi.set(__self__, "sample", sample)
        pulumi.set(__self__, "schemaId", schema_id)
        pulumi.set(__self__, "typeName", type_name)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The Content Type of this representation, such as `application/json`.
        """
        ...

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="formParameters")
    def form_parameters(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]]]:
        """
        One or more `form_parameter` block as defined above.
        """
        ...

    @form_parameters.setter
    def form_parameters(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]]]):
        ...

    @property
    @pulumi.getter
    def sample(self) -> Optional[pulumi.Input[str]]:
        """
        An example of this representation.
        """
        ...

    @sample.setter
    def sample(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an API Management Schema which represents this Response.
        """
        ...

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Type Name defined by the Schema.
        """
        ...

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ApiOperationRequestRepresentationFormParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Form Parameter.
        :param pulumi.Input[bool] required: Is this Form Parameter Required?
        :param pulumi.Input[str] type: The Type of this Form Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Form Parameter.
        :param pulumi.Input[str] description: A description of this Form Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Form Parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Form Parameter.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Form Parameter Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Form Parameter, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Form Parameter.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Form Parameter.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Form Parameter.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiOperationResponseArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[float],
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]]] = None,
                 representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]]] = None):
        """
        :param pulumi.Input[float] status_code: The HTTP Status Code.
        :param pulumi.Input[str] description: A description of the HTTP Response, which may include HTML tags.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]] headers: One or more `header` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]] representations: One or more `representation` blocks as defined below.
        """
        pulumi.set(__self__, "statusCode", status_code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "representations", representations)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[float]:
        """
        The HTTP Status Code.
        """
        ...

    @status_code.setter
    def status_code(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the HTTP Response, which may include HTML tags.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]]]:
        """
        One or more `header` blocks as defined above.
        """
        ...

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]]]):
        ...

    @property
    @pulumi.getter
    def representations(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]]]:
        """
        One or more `representation` blocks as defined below.
        """
        ...

    @representations.setter
    def representations(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]]]):
        ...


@pulumi.input_type
class ApiOperationResponseHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Header.
        :param pulumi.Input[bool] required: Is this Header Required?
        :param pulumi.Input[str] type: The Type of this Header, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Header.
        :param pulumi.Input[str] description: A description of this Header.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Header.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Header Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Header, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Header.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Header.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Header.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiOperationResponseRepresentationArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]]] = None,
                 sample: Optional[pulumi.Input[str]] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content_type: The Content Type of this representation, such as `application/json`.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]] form_parameters: One or more `form_parameter` block as defined above.
        :param pulumi.Input[str] sample: An example of this representation.
        :param pulumi.Input[str] schema_id: The ID of an API Management Schema which represents this Response.
        :param pulumi.Input[str] type_name: The Type Name defined by the Schema.
        """
        pulumi.set(__self__, "contentType", content_type)
        pulumi.set(__self__, "formParameters", form_parameters)
        pulumi.set(__self__, "sample", sample)
        pulumi.set(__self__, "schemaId", schema_id)
        pulumi.set(__self__, "typeName", type_name)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The Content Type of this representation, such as `application/json`.
        """
        ...

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="formParameters")
    def form_parameters(self) -> Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]]]:
        """
        One or more `form_parameter` block as defined above.
        """
        ...

    @form_parameters.setter
    def form_parameters(self, value: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]]]):
        ...

    @property
    @pulumi.getter
    def sample(self) -> Optional[pulumi.Input[str]]:
        """
        An example of this representation.
        """
        ...

    @sample.setter
    def sample(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an API Management Schema which represents this Response.
        """
        ...

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Type Name defined by the Schema.
        """
        ...

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ApiOperationResponseRepresentationFormParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Form Parameter.
        :param pulumi.Input[bool] required: Is this Form Parameter Required?
        :param pulumi.Input[str] type: The Type of this Form Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Form Parameter.
        :param pulumi.Input[str] description: A description of this Form Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Form Parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Form Parameter.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Form Parameter Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Form Parameter, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Form Parameter.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Form Parameter.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Form Parameter.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiOperationTemplateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The Name of this Template Parameter.
        :param pulumi.Input[bool] required: Is this Template Parameter Required?
        :param pulumi.Input[str] type: The Type of this Template Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Template Parameter.
        :param pulumi.Input[str] description: A description of this Template Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Template Parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "defaultValue", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of this Template Parameter.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Is this Template Parameter Required?
        """
        ...

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The Type of this Template Parameter, such as a `string`.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for this Template Parameter.
        """
        ...

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this Template Parameter.
        """
        ...

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        One or more acceptable values for this Template Parameter.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ApiSubscriptionKeyParameterNamesArgs:
    def __init__(__self__, *,
                 header: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] header: The name of the HTTP Header which should be used for the Subscription Key.
        :param pulumi.Input[str] query: The name of the QueryString parameter which should be used for the Subscription Key.
        """
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input[str]:
        """
        The name of the HTTP Header which should be used for the Subscription Key.
        """
        ...

    @header.setter
    def header(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The name of the QueryString parameter which should be used for the Subscription Key.
        """
        ...

    @query.setter
    def query(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class AuthorizationServerTokenBodyParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The Name of the Parameter.
        :param pulumi.Input[str] value: The Value of the Parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Name of the Parameter.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of the Parameter.
        """
        ...

    @value.setter
    def value(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class BackendCredentialsArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input['BackendCredentialsAuthorizationArgs']] = None,
                 certificates: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 header: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 query: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['BackendCredentialsAuthorizationArgs'] authorization: An `authorization` block as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] certificates: A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] header: A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] query: A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "certificates", certificates)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['BackendCredentialsAuthorizationArgs']]:
        """
        An `authorization` block as defined below.
        """
        ...

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['BackendCredentialsAuthorizationArgs']]):
        ...

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
        """
        ...

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
        """
        ...

    @header.setter
    def header(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
        """
        ...

    @query.setter
    def query(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class BackendCredentialsAuthorizationArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parameter: The authentication Parameter value.
        :param pulumi.Input[str] scheme: The authentication Scheme name.
        """
        pulumi.set(__self__, "parameter", parameter)
        pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication Parameter value.
        """
        ...

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication Scheme name.
        """
        ...

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class BackendProxyArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: The URL of the proxy server.
        :param pulumi.Input[str] username: The username to connect to the proxy server.
        :param pulumi.Input[str] password: The password to connect to the proxy server.
        """
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the proxy server.
        """
        ...

    @url.setter
    def url(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to connect to the proxy server.
        """
        ...

    @username.setter
    def username(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to connect to the proxy server.
        """
        ...

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class BackendServiceFabricClusterArgs:
    def __init__(__self__, *,
                 client_certificate_thumbprint: pulumi.Input[str],
                 management_endpoints: pulumi.Input[List[pulumi.Input[str]]],
                 max_partition_resolution_retries: pulumi.Input[float],
                 server_certificate_thumbprints: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 server_x509_names: Optional[pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]]] = None):
        """
        :param pulumi.Input[str] client_certificate_thumbprint: The client certificate thumbprint for the management endpoint.
        :param pulumi.Input[List[pulumi.Input[str]]] management_endpoints: A list of cluster management endpoints.
        :param pulumi.Input[float] max_partition_resolution_retries: The maximum number of retries when attempting resolve the partition.
        :param pulumi.Input[List[pulumi.Input[str]]] server_certificate_thumbprints: A list of thumbprints of the server certificates of the Service Fabric cluster.
        :param pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]] server_x509_names: One or more `server_x509_name` blocks as documented below.
        """
        pulumi.set(__self__, "clientCertificateThumbprint", client_certificate_thumbprint)
        pulumi.set(__self__, "managementEndpoints", management_endpoints)
        pulumi.set(__self__, "maxPartitionResolutionRetries", max_partition_resolution_retries)
        pulumi.set(__self__, "serverCertificateThumbprints", server_certificate_thumbprints)
        pulumi.set(__self__, "serverX509Names", server_x509_names)

    @property
    @pulumi.getter(name="clientCertificateThumbprint")
    def client_certificate_thumbprint(self) -> pulumi.Input[str]:
        """
        The client certificate thumbprint for the management endpoint.
        """
        ...

    @client_certificate_thumbprint.setter
    def client_certificate_thumbprint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="managementEndpoints")
    def management_endpoints(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        A list of cluster management endpoints.
        """
        ...

    @management_endpoints.setter
    def management_endpoints(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="maxPartitionResolutionRetries")
    def max_partition_resolution_retries(self) -> pulumi.Input[float]:
        """
        The maximum number of retries when attempting resolve the partition.
        """
        ...

    @max_partition_resolution_retries.setter
    def max_partition_resolution_retries(self, value: pulumi.Input[float]):
        ...

    @property
    @pulumi.getter(name="serverCertificateThumbprints")
    def server_certificate_thumbprints(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of thumbprints of the server certificates of the Service Fabric cluster.
        """
        ...

    @server_certificate_thumbprints.setter
    def server_certificate_thumbprints(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="serverX509Names")
    def server_x509_names(self) -> Optional[pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]]]:
        """
        One or more `server_x509_name` blocks as documented below.
        """
        ...

    @server_x509_names.setter
    def server_x509_names(self, value: Optional[pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]]]):
        ...


@pulumi.input_type
class BackendServiceFabricClusterServerX509NameArgs:
    def __init__(__self__, *,
                 issuer_certificate_thumbprint: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] issuer_certificate_thumbprint: The thumbprint for the issuer of the certificate.
        :param pulumi.Input[str] name: The name of the API Management backend. Changing this forces a new resource to be created.
        """
        pulumi.set(__self__, "issuerCertificateThumbprint", issuer_certificate_thumbprint)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="issuerCertificateThumbprint")
    def issuer_certificate_thumbprint(self) -> pulumi.Input[str]:
        """
        The thumbprint for the issuer of the certificate.
        """
        ...

    @issuer_certificate_thumbprint.setter
    def issuer_certificate_thumbprint(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the API Management backend. Changing this forces a new resource to be created.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class BackendTlsArgs:
    def __init__(__self__, *,
                 validate_certificate_chain: Optional[pulumi.Input[bool]] = None,
                 validate_certificate_name: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] validate_certificate_chain: Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for the backend host.
        :param pulumi.Input[bool] validate_certificate_name: Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for the backend host.
        """
        pulumi.set(__self__, "validateCertificateChain", validate_certificate_chain)
        pulumi.set(__self__, "validateCertificateName", validate_certificate_name)

    @property
    @pulumi.getter(name="validateCertificateChain")
    def validate_certificate_chain(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for the backend host.
        """
        ...

    @validate_certificate_chain.setter
    def validate_certificate_chain(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="validateCertificateName")
    def validate_certificate_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for the backend host.
        """
        ...

    @validate_certificate_name.setter
    def validate_certificate_name(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class LoggerApplicationInsightsArgs:
    def __init__(__self__, *,
                 instrumentation_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instrumentation_key: The instrumentation key used to push data to Application Insights.
        """
        pulumi.set(__self__, "instrumentationKey", instrumentation_key)

    @property
    @pulumi.getter(name="instrumentationKey")
    def instrumentation_key(self) -> pulumi.Input[str]:
        """
        The instrumentation key used to push data to Application Insights.
        """
        ...

    @instrumentation_key.setter
    def instrumentation_key(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class LoggerEventhubArgs:
    def __init__(__self__, *,
                 connection_string: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] connection_string: The connection string of an EventHub Namespace.
        :param pulumi.Input[str] name: The name of an EventHub.
        """
        pulumi.set(__self__, "connectionString", connection_string)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Input[str]:
        """
        The connection string of an EventHub Namespace.
        """
        ...

    @connection_string.setter
    def connection_string(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of an EventHub.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ServiceAdditionalLocationArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 gateway_regional_url: Optional[pulumi.Input[str]] = None,
                 public_ip_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] location: The name of the Azure Region in which the API Management Service should be expanded to.
        :param pulumi.Input[str] gateway_regional_url: The URL of the Regional Gateway for the API Management Service in the specified region.
        :param pulumi.Input[List[pulumi.Input[str]]] public_ip_addresses: Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "gatewayRegionalUrl", gateway_regional_url)
        pulumi.set(__self__, "publicIpAddresses", public_ip_addresses)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The name of the Azure Region in which the API Management Service should be expanded to.
        """
        ...

    @location.setter
    def location(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="gatewayRegionalUrl")
    def gateway_regional_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Regional Gateway for the API Management Service in the specified region.
        """
        ...

    @gateway_regional_url.setter
    def gateway_regional_url(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        """
        ...

    @public_ip_addresses.setter
    def public_ip_addresses(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ServiceCertificateArgs:
    def __init__(__self__, *,
                 certificate_password: pulumi.Input[str],
                 encoded_certificate: pulumi.Input[str],
                 store_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] encoded_certificate: The Base64 Encoded PFX Certificate.
        :param pulumi.Input[str] store_name: The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
        """
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "encodedCertificate", encoded_certificate)
        pulumi.set(__self__, "storeName", store_name)

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> pulumi.Input[str]:
        """
        The password for the certificate.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="encodedCertificate")
    def encoded_certificate(self) -> pulumi.Input[str]:
        """
        The Base64 Encoded PFX Certificate.
        """
        ...

    @encoded_certificate.setter
    def encoded_certificate(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="storeName")
    def store_name(self) -> pulumi.Input[str]:
        """
        The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
        """
        ...

    @store_name.setter
    def store_name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationArgs:
    def __init__(__self__, *,
                 developer_portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]]] = None,
                 managements: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]]] = None,
                 portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]]] = None,
                 proxies: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]]] = None,
                 scms: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]]] = None):
        """
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]] developer_portals: One or more `developer_portal` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]] managements: One or more `management` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]] portals: One or more `portal` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]] proxies: One or more `proxy` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]] scms: One or more `scm` blocks as documented below.
        """
        pulumi.set(__self__, "developerPortals", developer_portals)
        pulumi.set(__self__, "managements", managements)
        pulumi.set(__self__, "portals", portals)
        pulumi.set(__self__, "proxies", proxies)
        pulumi.set(__self__, "scms", scms)

    @property
    @pulumi.getter(name="developerPortals")
    def developer_portals(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]]]:
        """
        One or more `developer_portal` blocks as documented below.
        """
        ...

    @developer_portals.setter
    def developer_portals(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]]]):
        ...

    @property
    @pulumi.getter
    def managements(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]]]:
        """
        One or more `management` blocks as documented below.
        """
        ...

    @managements.setter
    def managements(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]]]):
        ...

    @property
    @pulumi.getter
    def portals(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]]]:
        """
        One or more `portal` blocks as documented below.
        """
        ...

    @portals.setter
    def portals(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]]]):
        ...

    @property
    @pulumi.getter
    def proxies(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]]]:
        """
        One or more `proxy` blocks as documented below.
        """
        ...

    @proxies.setter
    def proxies(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]]]):
        ...

    @property
    @pulumi.getter
    def scms(self) -> Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]]]:
        """
        One or more `scm` blocks as documented below.
        """
        ...

    @scms.setter
    def scms(self, value: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]]]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationDeveloperPortalArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_password: Optional[pulumi.Input[str]] = None,
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 negotiate_client_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        pulumi.set(__self__, "hostName", host_name)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "keyVaultId", key_vault_id)
        pulumi.set(__self__, "negotiateClientCertificate", negotiate_client_certificate)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        The Hostname to use for the Management API.
        """
        ...

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        One or more (up to 10) `certificate` blocks as defined below.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the certificate.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        """
        ...

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="negotiateClientCertificate")
    def negotiate_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        ...

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationManagementArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_password: Optional[pulumi.Input[str]] = None,
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 negotiate_client_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: The Base64 Encoded Certificate.
        :param pulumi.Input[str] certificate_password: The password associated with the certificate provided above.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        pulumi.set(__self__, "hostName", host_name)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "keyVaultId", key_vault_id)
        pulumi.set(__self__, "negotiateClientCertificate", negotiate_client_certificate)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        The Hostname to use for the Management API.
        """
        ...

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The Base64 Encoded Certificate.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with the certificate provided above.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        """
        ...

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="negotiateClientCertificate")
    def negotiate_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        ...

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationPortalArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_password: Optional[pulumi.Input[str]] = None,
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 negotiate_client_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        pulumi.set(__self__, "hostName", host_name)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "keyVaultId", key_vault_id)
        pulumi.set(__self__, "negotiateClientCertificate", negotiate_client_certificate)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        The Hostname to use for the Management API.
        """
        ...

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        One or more (up to 10) `certificate` blocks as defined below.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the certificate.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        """
        ...

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="negotiateClientCertificate")
    def negotiate_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        ...

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationProxyArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_password: Optional[pulumi.Input[str]] = None,
                 default_ssl_binding: Optional[pulumi.Input[bool]] = None,
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 negotiate_client_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: The Base64 Encoded Certificate.
        :param pulumi.Input[str] certificate_password: The password associated with the certificate provided above.
        :param pulumi.Input[bool] default_ssl_binding: Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        pulumi.set(__self__, "hostName", host_name)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "defaultSslBinding", default_ssl_binding)
        pulumi.set(__self__, "keyVaultId", key_vault_id)
        pulumi.set(__self__, "negotiateClientCertificate", negotiate_client_certificate)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        The Hostname to use for the Management API.
        """
        ...

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The Base64 Encoded Certificate.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with the certificate provided above.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="defaultSslBinding")
    def default_ssl_binding(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
        """
        ...

    @default_ssl_binding.setter
    def default_ssl_binding(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        """
        ...

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="negotiateClientCertificate")
    def negotiate_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        ...

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceHostnameConfigurationScmArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_password: Optional[pulumi.Input[str]] = None,
                 key_vault_id: Optional[pulumi.Input[str]] = None,
                 negotiate_client_certificate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        pulumi.set(__self__, "hostName", host_name)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "certificatePassword", certificate_password)
        pulumi.set(__self__, "keyVaultId", key_vault_id)
        pulumi.set(__self__, "negotiateClientCertificate", negotiate_client_certificate)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        The Hostname to use for the Management API.
        """
        ...

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        One or more (up to 10) `certificate` blocks as defined below.
        """
        ...

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="certificatePassword")
    def certificate_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the certificate.
        """
        ...

    @certificate_password.setter
    def certificate_password(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="keyVaultId")
    def key_vault_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        """
        ...

    @key_vault_id.setter
    def key_vault_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="negotiateClientCertificate")
    def negotiate_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        ...

    @negotiate_client_certificate.setter
    def negotiate_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceIdentityArgs:
    def __init__(__self__, *,
                 identity_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[List[pulumi.Input[str]]] identity_ids: A list of IDs for User Assigned Managed Identity resources to be assigned.
        :param pulumi.Input[str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[str] tenant_id: The Tenant ID associated with this Managed Service Identity.
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are `SystemAssigned`, `UserAssigned` or `SystemAssigned, UserAssigned` (to enable both).
        """
        pulumi.set(__self__, "identityIds", identity_ids)
        pulumi.set(__self__, "principalId", principal_id)
        pulumi.set(__self__, "tenantId", tenant_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A list of IDs for User Assigned Managed Identity resources to be assigned.
        """
        ...

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID associated with this Managed Service Identity.
        """
        ...

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Tenant ID associated with this Managed Service Identity.
        """
        ...

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are `SystemAssigned`, `UserAssigned` or `SystemAssigned, UserAssigned` (to enable both).
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ServicePolicyArgs:
    def __init__(__self__, *,
                 xml_content: Optional[pulumi.Input[str]] = None,
                 xml_link: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] xml_content: The XML Content for this Policy.
        :param pulumi.Input[str] xml_link: A link to an API Management Policy XML Document, which must be publicly available.
        """
        pulumi.set(__self__, "xmlContent", xml_content)
        pulumi.set(__self__, "xmlLink", xml_link)

    @property
    @pulumi.getter(name="xmlContent")
    def xml_content(self) -> Optional[pulumi.Input[str]]:
        """
        The XML Content for this Policy.
        """
        ...

    @xml_content.setter
    def xml_content(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="xmlLink")
    def xml_link(self) -> Optional[pulumi.Input[str]]:
        """
        A link to an API Management Policy XML Document, which must be publicly available.
        """
        ...

    @xml_link.setter
    def xml_link(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ServiceProtocolsArgs:
    def __init__(__self__, *,
                 enable_http2: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_http2: Should HTTP/2 be supported by the API Management Service? Defaults to `false`.
        """
        pulumi.set(__self__, "enableHttp2", enable_http2)

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> Optional[pulumi.Input[bool]]:
        """
        Should HTTP/2 be supported by the API Management Service? Defaults to `false`.
        """
        ...

    @enable_http2.setter
    def enable_http2(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceSecurityArgs:
    def __init__(__self__, *,
                 enable_backend_ssl30: Optional[pulumi.Input[bool]] = None,
                 enable_backend_tls10: Optional[pulumi.Input[bool]] = None,
                 enable_backend_tls11: Optional[pulumi.Input[bool]] = None,
                 enable_frontend_ssl30: Optional[pulumi.Input[bool]] = None,
                 enable_frontend_tls10: Optional[pulumi.Input[bool]] = None,
                 enable_frontend_tls11: Optional[pulumi.Input[bool]] = None,
                 enable_triple_des_ciphers: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_backend_ssl30: Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_backend_tls10: Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_backend_tls11: Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_ssl30: Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_tls10: Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_tls11: Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_triple_des_ciphers: Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`.
        """
        pulumi.set(__self__, "enableBackendSsl30", enable_backend_ssl30)
        pulumi.set(__self__, "enableBackendTls10", enable_backend_tls10)
        pulumi.set(__self__, "enableBackendTls11", enable_backend_tls11)
        pulumi.set(__self__, "enableFrontendSsl30", enable_frontend_ssl30)
        pulumi.set(__self__, "enableFrontendTls10", enable_frontend_tls10)
        pulumi.set(__self__, "enableFrontendTls11", enable_frontend_tls11)
        pulumi.set(__self__, "enableTripleDesCiphers", enable_triple_des_ciphers)

    @property
    @pulumi.getter(name="enableBackendSsl30")
    def enable_backend_ssl30(self) -> Optional[pulumi.Input[bool]]:
        """
        Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`.
        """
        ...

    @enable_backend_ssl30.setter
    def enable_backend_ssl30(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableBackendTls10")
    def enable_backend_tls10(self) -> Optional[pulumi.Input[bool]]:
        """
        Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`.
        """
        ...

    @enable_backend_tls10.setter
    def enable_backend_tls10(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableBackendTls11")
    def enable_backend_tls11(self) -> Optional[pulumi.Input[bool]]:
        """
        Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`.
        """
        ...

    @enable_backend_tls11.setter
    def enable_backend_tls11(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableFrontendSsl30")
    def enable_frontend_ssl30(self) -> Optional[pulumi.Input[bool]]:
        """
        Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`.
        """
        ...

    @enable_frontend_ssl30.setter
    def enable_frontend_ssl30(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableFrontendTls10")
    def enable_frontend_tls10(self) -> Optional[pulumi.Input[bool]]:
        """
        Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`.
        """
        ...

    @enable_frontend_tls10.setter
    def enable_frontend_tls10(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableFrontendTls11")
    def enable_frontend_tls11(self) -> Optional[pulumi.Input[bool]]:
        """
        Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`.
        """
        ...

    @enable_frontend_tls11.setter
    def enable_frontend_tls11(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="enableTripleDesCiphers")
    def enable_triple_des_ciphers(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`.
        """
        ...

    @enable_triple_des_ciphers.setter
    def enable_triple_des_ciphers(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceSignInArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: Should anonymous users be redirected to the sign in page?
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Should anonymous users be redirected to the sign in page?
        """
        ...

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        ...


@pulumi.input_type
class ServiceSignUpArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 terms_of_service: pulumi.Input['ServiceSignUpTermsOfServiceArgs']):
        """
        :param pulumi.Input[bool] enabled: Can users sign up on the development portal?
        :param pulumi.Input['ServiceSignUpTermsOfServiceArgs'] terms_of_service: A `terms_of_service` block as defined below.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "termsOfService", terms_of_service)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Can users sign up on the development portal?
        """
        ...

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter(name="termsOfService")
    def terms_of_service(self) -> pulumi.Input['ServiceSignUpTermsOfServiceArgs']:
        """
        A `terms_of_service` block as defined below.
        """
        ...

    @terms_of_service.setter
    def terms_of_service(self, value: pulumi.Input['ServiceSignUpTermsOfServiceArgs']):
        ...


@pulumi.input_type
class ServiceSignUpTermsOfServiceArgs:
    def __init__(__self__, *,
                 consent_required: pulumi.Input[bool],
                 enabled: pulumi.Input[bool],
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] consent_required: Should the user be asked for consent during sign up?
        :param pulumi.Input[bool] enabled: Should Terms of Service be displayed during sign up?.
        :param pulumi.Input[str] text: The Terms of Service which users are required to agree to in order to sign up.
        """
        pulumi.set(__self__, "consentRequired", consent_required)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> pulumi.Input[bool]:
        """
        Should the user be asked for consent during sign up?
        """
        ...

    @consent_required.setter
    def consent_required(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Should Terms of Service be displayed during sign up?.
        """
        ...

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        ...

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The Terms of Service which users are required to agree to in order to sign up.
        """
        ...

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ServiceVirtualNetworkConfigurationArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] subnet_id: The id of the subnet that will be used for the API Management.
        """
        pulumi.set(__self__, "subnetId", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The id of the subnet that will be used for the API Management.
        """
        ...

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        ...


