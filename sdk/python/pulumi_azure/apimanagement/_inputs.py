# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.input_type
class ApiImportArgs:
    content_format: pulumi.Input[str] = pulumi.input_property("contentFormat")
    """
    The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
    """
    content_value: pulumi.Input[str] = pulumi.input_property("contentValue")
    """
    The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
    """
    wsdl_selector: Optional[pulumi.Input['ApiImportWsdlSelectorArgs']] = pulumi.input_property("wsdlSelector")
    """
    A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, content_format: pulumi.Input[str], content_value: pulumi.Input[str], wsdl_selector: Optional[pulumi.Input['ApiImportWsdlSelectorArgs']] = None) -> None:
        """
        :param pulumi.Input[str] content_format: The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
        :param pulumi.Input[str] content_value: The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
        :param pulumi.Input['ApiImportWsdlSelectorArgs'] wsdl_selector: A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
        """
        __self__.content_format = content_format
        __self__.content_value = content_value
        __self__.wsdl_selector = wsdl_selector

@pulumi.input_type
class ApiImportWsdlSelectorArgs:
    endpoint_name: pulumi.Input[str] = pulumi.input_property("endpointName")
    """
    The name of endpoint (port) to import from WSDL.
    """
    service_name: pulumi.Input[str] = pulumi.input_property("serviceName")
    """
    The name of service to import from WSDL.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoint_name: pulumi.Input[str], service_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] endpoint_name: The name of endpoint (port) to import from WSDL.
        :param pulumi.Input[str] service_name: The name of service to import from WSDL.
        """
        __self__.endpoint_name = endpoint_name
        __self__.service_name = service_name

@pulumi.input_type
class ApiOperationRequestArgs:
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of the HTTP Request, which may include HTML tags.
    """
    headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]]] = pulumi.input_property("headers")
    """
    One or more `header` blocks as defined above.
    """
    query_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]]] = pulumi.input_property("queryParameters")
    """
    One or more `query_parameter` blocks as defined above.
    """
    representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]]] = pulumi.input_property("representations")
    """
    One or more `representation` blocks as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, description: Optional[pulumi.Input[str]] = None, headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]]] = None, query_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]]] = None, representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] description: A description of the HTTP Request, which may include HTML tags.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestHeaderArgs']]] headers: One or more `header` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestQueryParameterArgs']]] query_parameters: One or more `query_parameter` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationArgs']]] representations: One or more `representation` blocks as defined below.
        """
        __self__.description = description
        __self__.headers = headers
        __self__.query_parameters = query_parameters
        __self__.representations = representations

@pulumi.input_type
class ApiOperationRequestHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Header.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Header Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Header, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Header.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Header.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Header.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Header.
        :param pulumi.Input[bool] required: Is this Header Required?
        :param pulumi.Input[str] type: The Type of this Header, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Header.
        :param pulumi.Input[str] description: A description of this Header.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Header.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiOperationRequestQueryParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Query Parameter.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Query Parameter Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Query Parameter, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Query Parameter.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Query Parameter.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Query Parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Query Parameter.
        :param pulumi.Input[bool] required: Is this Query Parameter Required?
        :param pulumi.Input[str] type: The Type of this Query Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Query Parameter.
        :param pulumi.Input[str] description: A description of this Query Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Query Parameter.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiOperationRequestRepresentationArgs:
    content_type: pulumi.Input[str] = pulumi.input_property("contentType")
    """
    The Content Type of this representation, such as `application/json`.
    """
    form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]]] = pulumi.input_property("formParameters")
    """
    One or more `form_parameter` block as defined above.
    """
    sample: Optional[pulumi.Input[str]] = pulumi.input_property("sample")
    """
    An example of this representation.
    """
    schema_id: Optional[pulumi.Input[str]] = pulumi.input_property("schemaId")
    """
    The ID of an API Management Schema which represents this Response.
    """
    type_name: Optional[pulumi.Input[str]] = pulumi.input_property("typeName")
    """
    The Type Name defined by the Schema.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, content_type: pulumi.Input[str], form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]]] = None, sample: Optional[pulumi.Input[str]] = None, schema_id: Optional[pulumi.Input[str]] = None, type_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] content_type: The Content Type of this representation, such as `application/json`.
        :param pulumi.Input[List[pulumi.Input['ApiOperationRequestRepresentationFormParameterArgs']]] form_parameters: One or more `form_parameter` block as defined above.
        :param pulumi.Input[str] sample: An example of this representation.
        :param pulumi.Input[str] schema_id: The ID of an API Management Schema which represents this Response.
        :param pulumi.Input[str] type_name: The Type Name defined by the Schema.
        """
        __self__.content_type = content_type
        __self__.form_parameters = form_parameters
        __self__.sample = sample
        __self__.schema_id = schema_id
        __self__.type_name = type_name

@pulumi.input_type
class ApiOperationRequestRepresentationFormParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Form Parameter.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Form Parameter Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Form Parameter, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Form Parameter.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Form Parameter.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Form Parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Form Parameter.
        :param pulumi.Input[bool] required: Is this Form Parameter Required?
        :param pulumi.Input[str] type: The Type of this Form Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Form Parameter.
        :param pulumi.Input[str] description: A description of this Form Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Form Parameter.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiOperationResponseArgs:
    status_code: pulumi.Input[float] = pulumi.input_property("statusCode")
    """
    The HTTP Status Code.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of the HTTP Response, which may include HTML tags.
    """
    headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]]] = pulumi.input_property("headers")
    """
    One or more `header` blocks as defined above.
    """
    representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]]] = pulumi.input_property("representations")
    """
    One or more `representation` blocks as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status_code: pulumi.Input[float], description: Optional[pulumi.Input[str]] = None, headers: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]]] = None, representations: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]]] = None) -> None:
        """
        :param pulumi.Input[float] status_code: The HTTP Status Code.
        :param pulumi.Input[str] description: A description of the HTTP Response, which may include HTML tags.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseHeaderArgs']]] headers: One or more `header` blocks as defined above.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationArgs']]] representations: One or more `representation` blocks as defined below.
        """
        __self__.status_code = status_code
        __self__.description = description
        __self__.headers = headers
        __self__.representations = representations

@pulumi.input_type
class ApiOperationResponseHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Header.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Header Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Header, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Header.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Header.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Header.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Header.
        :param pulumi.Input[bool] required: Is this Header Required?
        :param pulumi.Input[str] type: The Type of this Header, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Header.
        :param pulumi.Input[str] description: A description of this Header.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Header.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiOperationResponseRepresentationArgs:
    content_type: pulumi.Input[str] = pulumi.input_property("contentType")
    """
    The Content Type of this representation, such as `application/json`.
    """
    form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]]] = pulumi.input_property("formParameters")
    """
    One or more `form_parameter` block as defined above.
    """
    sample: Optional[pulumi.Input[str]] = pulumi.input_property("sample")
    """
    An example of this representation.
    """
    schema_id: Optional[pulumi.Input[str]] = pulumi.input_property("schemaId")
    """
    The ID of an API Management Schema which represents this Response.
    """
    type_name: Optional[pulumi.Input[str]] = pulumi.input_property("typeName")
    """
    The Type Name defined by the Schema.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, content_type: pulumi.Input[str], form_parameters: Optional[pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]]] = None, sample: Optional[pulumi.Input[str]] = None, schema_id: Optional[pulumi.Input[str]] = None, type_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] content_type: The Content Type of this representation, such as `application/json`.
        :param pulumi.Input[List[pulumi.Input['ApiOperationResponseRepresentationFormParameterArgs']]] form_parameters: One or more `form_parameter` block as defined above.
        :param pulumi.Input[str] sample: An example of this representation.
        :param pulumi.Input[str] schema_id: The ID of an API Management Schema which represents this Response.
        :param pulumi.Input[str] type_name: The Type Name defined by the Schema.
        """
        __self__.content_type = content_type
        __self__.form_parameters = form_parameters
        __self__.sample = sample
        __self__.schema_id = schema_id
        __self__.type_name = type_name

@pulumi.input_type
class ApiOperationResponseRepresentationFormParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Form Parameter.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Form Parameter Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Form Parameter, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Form Parameter.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Form Parameter.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Form Parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Form Parameter.
        :param pulumi.Input[bool] required: Is this Form Parameter Required?
        :param pulumi.Input[str] type: The Type of this Form Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Form Parameter.
        :param pulumi.Input[str] description: A description of this Form Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Form Parameter.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiOperationTemplateParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of this Template Parameter.
    """
    required: pulumi.Input[bool] = pulumi.input_property("required")
    """
    Is this Template Parameter Required?
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    The Type of this Template Parameter, such as a `string`.
    """
    default_value: Optional[pulumi.Input[str]] = pulumi.input_property("defaultValue")
    """
    The default value for this Template Parameter.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    A description of this Template Parameter.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    One or more acceptable values for this Template Parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], required: pulumi.Input[bool], type: pulumi.Input[str], default_value: Optional[pulumi.Input[str]] = None, description: Optional[pulumi.Input[str]] = None, values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] name: The Name of this Template Parameter.
        :param pulumi.Input[bool] required: Is this Template Parameter Required?
        :param pulumi.Input[str] type: The Type of this Template Parameter, such as a `string`.
        :param pulumi.Input[str] default_value: The default value for this Template Parameter.
        :param pulumi.Input[str] description: A description of this Template Parameter.
        :param pulumi.Input[List[pulumi.Input[str]]] values: One or more acceptable values for this Template Parameter.
        """
        __self__.name = name
        __self__.required = required
        __self__.type = type
        __self__.default_value = default_value
        __self__.description = description
        __self__.values = values

@pulumi.input_type
class ApiSubscriptionKeyParameterNamesArgs:
    header: pulumi.Input[str] = pulumi.input_property("header")
    """
    The name of the HTTP Header which should be used for the Subscription Key.
    """
    query: pulumi.Input[str] = pulumi.input_property("query")
    """
    The name of the QueryString parameter which should be used for the Subscription Key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, header: pulumi.Input[str], query: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] header: The name of the HTTP Header which should be used for the Subscription Key.
        :param pulumi.Input[str] query: The name of the QueryString parameter which should be used for the Subscription Key.
        """
        __self__.header = header
        __self__.query = query

@pulumi.input_type
class AuthorizationServerTokenBodyParameterArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The Name of the Parameter.
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The Value of the Parameter.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The Name of the Parameter.
        :param pulumi.Input[str] value: The Value of the Parameter.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class BackendCredentialsArgs:
    authorization: Optional[pulumi.Input['BackendCredentialsAuthorizationArgs']] = pulumi.input_property("authorization")
    """
    An `authorization` block as defined below.
    """
    certificates: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("certificates")
    """
    A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
    """
    header: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("header")
    """
    A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
    """
    query: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("query")
    """
    A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, authorization: Optional[pulumi.Input['BackendCredentialsAuthorizationArgs']] = None, certificates: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, header: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, query: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input['BackendCredentialsAuthorizationArgs'] authorization: An `authorization` block as defined below.
        :param pulumi.Input[List[pulumi.Input[str]]] certificates: A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] header: A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] query: A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
        """
        __self__.authorization = authorization
        __self__.certificates = certificates
        __self__.header = header
        __self__.query = query

@pulumi.input_type
class BackendCredentialsAuthorizationArgs:
    parameter: Optional[pulumi.Input[str]] = pulumi.input_property("parameter")
    """
    The authentication Parameter value.
    """
    scheme: Optional[pulumi.Input[str]] = pulumi.input_property("scheme")
    """
    The authentication Scheme name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, parameter: Optional[pulumi.Input[str]] = None, scheme: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] parameter: The authentication Parameter value.
        :param pulumi.Input[str] scheme: The authentication Scheme name.
        """
        __self__.parameter = parameter
        __self__.scheme = scheme

@pulumi.input_type
class BackendProxyArgs:
    url: pulumi.Input[str] = pulumi.input_property("url")
    """
    The URL of the proxy server.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username to connect to the proxy server.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The password to connect to the proxy server.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, url: pulumi.Input[str], username: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] url: The URL of the proxy server.
        :param pulumi.Input[str] username: The username to connect to the proxy server.
        :param pulumi.Input[str] password: The password to connect to the proxy server.
        """
        __self__.url = url
        __self__.username = username
        __self__.password = password

@pulumi.input_type
class BackendServiceFabricClusterArgs:
    client_certificate_thumbprint: pulumi.Input[str] = pulumi.input_property("clientCertificateThumbprint")
    """
    The client certificate thumbprint for the management endpoint.
    """
    management_endpoints: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("managementEndpoints")
    """
    A list of cluster management endpoints.
    """
    max_partition_resolution_retries: pulumi.Input[float] = pulumi.input_property("maxPartitionResolutionRetries")
    """
    The maximum number of retries when attempting resolve the partition.
    """
    server_certificate_thumbprints: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("serverCertificateThumbprints")
    """
    A list of thumbprints of the server certificates of the Service Fabric cluster.
    """
    server_x509_names: Optional[pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]]] = pulumi.input_property("serverX509Names")
    """
    One or more `server_x509_name` blocks as documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, client_certificate_thumbprint: pulumi.Input[str], management_endpoints: pulumi.Input[List[pulumi.Input[str]]], max_partition_resolution_retries: pulumi.Input[float], server_certificate_thumbprints: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, server_x509_names: Optional[pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] client_certificate_thumbprint: The client certificate thumbprint for the management endpoint.
        :param pulumi.Input[List[pulumi.Input[str]]] management_endpoints: A list of cluster management endpoints.
        :param pulumi.Input[float] max_partition_resolution_retries: The maximum number of retries when attempting resolve the partition.
        :param pulumi.Input[List[pulumi.Input[str]]] server_certificate_thumbprints: A list of thumbprints of the server certificates of the Service Fabric cluster.
        :param pulumi.Input[List[pulumi.Input['BackendServiceFabricClusterServerX509NameArgs']]] server_x509_names: One or more `server_x509_name` blocks as documented below.
        """
        __self__.client_certificate_thumbprint = client_certificate_thumbprint
        __self__.management_endpoints = management_endpoints
        __self__.max_partition_resolution_retries = max_partition_resolution_retries
        __self__.server_certificate_thumbprints = server_certificate_thumbprints
        __self__.server_x509_names = server_x509_names

@pulumi.input_type
class BackendServiceFabricClusterServerX509NameArgs:
    issuer_certificate_thumbprint: pulumi.Input[str] = pulumi.input_property("issuerCertificateThumbprint")
    """
    The thumbprint for the issuer of the certificate.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the API Management backend. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, issuer_certificate_thumbprint: pulumi.Input[str], name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] issuer_certificate_thumbprint: The thumbprint for the issuer of the certificate.
        :param pulumi.Input[str] name: The name of the API Management backend. Changing this forces a new resource to be created.
        """
        __self__.issuer_certificate_thumbprint = issuer_certificate_thumbprint
        __self__.name = name

@pulumi.input_type
class BackendTlsArgs:
    validate_certificate_chain: Optional[pulumi.Input[bool]] = pulumi.input_property("validateCertificateChain")
    """
    Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for the backend host.
    """
    validate_certificate_name: Optional[pulumi.Input[bool]] = pulumi.input_property("validateCertificateName")
    """
    Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for the backend host.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, validate_certificate_chain: Optional[pulumi.Input[bool]] = None, validate_certificate_name: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] validate_certificate_chain: Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for the backend host.
        :param pulumi.Input[bool] validate_certificate_name: Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for the backend host.
        """
        __self__.validate_certificate_chain = validate_certificate_chain
        __self__.validate_certificate_name = validate_certificate_name

@pulumi.input_type
class LoggerApplicationInsightsArgs:
    instrumentation_key: pulumi.Input[str] = pulumi.input_property("instrumentationKey")
    """
    The instrumentation key used to push data to Application Insights.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, instrumentation_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] instrumentation_key: The instrumentation key used to push data to Application Insights.
        """
        __self__.instrumentation_key = instrumentation_key

@pulumi.input_type
class LoggerEventhubArgs:
    connection_string: pulumi.Input[str] = pulumi.input_property("connectionString")
    """
    The connection string of an EventHub Namespace.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of an EventHub.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, connection_string: pulumi.Input[str], name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] connection_string: The connection string of an EventHub Namespace.
        :param pulumi.Input[str] name: The name of an EventHub.
        """
        __self__.connection_string = connection_string
        __self__.name = name

@pulumi.input_type
class ServiceAdditionalLocationArgs:
    location: pulumi.Input[str] = pulumi.input_property("location")
    """
    The name of the Azure Region in which the API Management Service should be expanded to.
    """
    gateway_regional_url: Optional[pulumi.Input[str]] = pulumi.input_property("gatewayRegionalUrl")
    """
    The URL of the Regional Gateway for the API Management Service in the specified region.
    """
    public_ip_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("publicIpAddresses")
    """
    Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, location: pulumi.Input[str], gateway_regional_url: Optional[pulumi.Input[str]] = None, public_ip_addresses: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        :param pulumi.Input[str] location: The name of the Azure Region in which the API Management Service should be expanded to.
        :param pulumi.Input[str] gateway_regional_url: The URL of the Regional Gateway for the API Management Service in the specified region.
        :param pulumi.Input[List[pulumi.Input[str]]] public_ip_addresses: Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        """
        __self__.location = location
        __self__.gateway_regional_url = gateway_regional_url
        __self__.public_ip_addresses = public_ip_addresses

@pulumi.input_type
class ServiceCertificateArgs:
    certificate_password: pulumi.Input[str] = pulumi.input_property("certificatePassword")
    """
    The password for the certificate.
    """
    encoded_certificate: pulumi.Input[str] = pulumi.input_property("encodedCertificate")
    """
    The Base64 Encoded PFX Certificate.
    """
    store_name: pulumi.Input[str] = pulumi.input_property("storeName")
    """
    The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, certificate_password: pulumi.Input[str], encoded_certificate: pulumi.Input[str], store_name: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] encoded_certificate: The Base64 Encoded PFX Certificate.
        :param pulumi.Input[str] store_name: The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
        """
        __self__.certificate_password = certificate_password
        __self__.encoded_certificate = encoded_certificate
        __self__.store_name = store_name

@pulumi.input_type
class ServiceHostnameConfigurationArgs:
    developer_portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]]] = pulumi.input_property("developerPortals")
    """
    One or more `developer_portal` blocks as documented below.
    """
    managements: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]]] = pulumi.input_property("managements")
    """
    One or more `management` blocks as documented below.
    """
    portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]]] = pulumi.input_property("portals")
    """
    One or more `portal` blocks as documented below.
    """
    proxies: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]]] = pulumi.input_property("proxies")
    """
    One or more `proxy` blocks as documented below.
    """
    scms: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]]] = pulumi.input_property("scms")
    """
    One or more `scm` blocks as documented below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, developer_portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]]] = None, managements: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]]] = None, portals: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]]] = None, proxies: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]]] = None, scms: Optional[pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationDeveloperPortalArgs']]] developer_portals: One or more `developer_portal` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationManagementArgs']]] managements: One or more `management` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationPortalArgs']]] portals: One or more `portal` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationProxyArgs']]] proxies: One or more `proxy` blocks as documented below.
        :param pulumi.Input[List[pulumi.Input['ServiceHostnameConfigurationScmArgs']]] scms: One or more `scm` blocks as documented below.
        """
        __self__.developer_portals = developer_portals
        __self__.managements = managements
        __self__.portals = portals
        __self__.proxies = proxies
        __self__.scms = scms

@pulumi.input_type
class ServiceHostnameConfigurationDeveloperPortalArgs:
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[pulumi.Input[str]] = pulumi.input_property("certificatePassword")
    """
    The password for the certificate.
    """
    key_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host_name: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, certificate_password: Optional[pulumi.Input[str]] = None, key_vault_id: Optional[pulumi.Input[str]] = None, negotiate_client_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        __self__.host_name = host_name
        __self__.certificate = certificate
        __self__.certificate_password = certificate_password
        __self__.key_vault_id = key_vault_id
        __self__.negotiate_client_certificate = negotiate_client_certificate

@pulumi.input_type
class ServiceHostnameConfigurationManagementArgs:
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    The Base64 Encoded Certificate.
    """
    certificate_password: Optional[pulumi.Input[str]] = pulumi.input_property("certificatePassword")
    """
    The password associated with the certificate provided above.
    """
    key_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host_name: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, certificate_password: Optional[pulumi.Input[str]] = None, key_vault_id: Optional[pulumi.Input[str]] = None, negotiate_client_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: The Base64 Encoded Certificate.
        :param pulumi.Input[str] certificate_password: The password associated with the certificate provided above.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        __self__.host_name = host_name
        __self__.certificate = certificate
        __self__.certificate_password = certificate_password
        __self__.key_vault_id = key_vault_id
        __self__.negotiate_client_certificate = negotiate_client_certificate

@pulumi.input_type
class ServiceHostnameConfigurationPortalArgs:
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[pulumi.Input[str]] = pulumi.input_property("certificatePassword")
    """
    The password for the certificate.
    """
    key_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host_name: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, certificate_password: Optional[pulumi.Input[str]] = None, key_vault_id: Optional[pulumi.Input[str]] = None, negotiate_client_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        __self__.host_name = host_name
        __self__.certificate = certificate
        __self__.certificate_password = certificate_password
        __self__.key_vault_id = key_vault_id
        __self__.negotiate_client_certificate = negotiate_client_certificate

@pulumi.input_type
class ServiceHostnameConfigurationProxyArgs:
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    The Base64 Encoded Certificate.
    """
    certificate_password: Optional[pulumi.Input[str]] = pulumi.input_property("certificatePassword")
    """
    The password associated with the certificate provided above.
    """
    default_ssl_binding: Optional[pulumi.Input[bool]] = pulumi.input_property("defaultSslBinding")
    """
    Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
    """
    key_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host_name: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, certificate_password: Optional[pulumi.Input[str]] = None, default_ssl_binding: Optional[pulumi.Input[bool]] = None, key_vault_id: Optional[pulumi.Input[str]] = None, negotiate_client_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: The Base64 Encoded Certificate.
        :param pulumi.Input[str] certificate_password: The password associated with the certificate provided above.
        :param pulumi.Input[bool] default_ssl_binding: Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        __self__.host_name = host_name
        __self__.certificate = certificate
        __self__.certificate_password = certificate_password
        __self__.default_ssl_binding = default_ssl_binding
        __self__.key_vault_id = key_vault_id
        __self__.negotiate_client_certificate = negotiate_client_certificate

@pulumi.input_type
class ServiceHostnameConfigurationScmArgs:
    host_name: pulumi.Input[str] = pulumi.input_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[pulumi.Input[str]] = pulumi.input_property("certificatePassword")
    """
    The password for the certificate.
    """
    key_vault_id: Optional[pulumi.Input[str]] = pulumi.input_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[pulumi.Input[bool]] = pulumi.input_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, host_name: pulumi.Input[str], certificate: Optional[pulumi.Input[str]] = None, certificate_password: Optional[pulumi.Input[str]] = None, key_vault_id: Optional[pulumi.Input[str]] = None, negotiate_client_certificate: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] host_name: The Hostname to use for the Management API.
        :param pulumi.Input[str] certificate: One or more (up to 10) `certificate` blocks as defined below.
        :param pulumi.Input[str] certificate_password: The password for the certificate.
        :param pulumi.Input[str] key_vault_id: The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        :param pulumi.Input[bool] negotiate_client_certificate: Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        """
        __self__.host_name = host_name
        __self__.certificate = certificate
        __self__.certificate_password = certificate_password
        __self__.key_vault_id = key_vault_id
        __self__.negotiate_client_certificate = negotiate_client_certificate

@pulumi.input_type
class ServiceIdentityArgs:
    identity_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("identityIds")
    """
    A list of IDs for User Assigned Managed Identity resources to be assigned.
    """
    principal_id: Optional[pulumi.Input[str]] = pulumi.input_property("principalId")
    """
    The Principal ID associated with this Managed Service Identity.
    """
    tenant_id: Optional[pulumi.Input[str]] = pulumi.input_property("tenantId")
    """
    The Tenant ID associated with this Managed Service Identity.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are `SystemAssigned`, `UserAssigned` or `SystemAssigned, UserAssigned` (to enable both).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, identity_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, principal_id: Optional[pulumi.Input[str]] = None, tenant_id: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[List[pulumi.Input[str]]] identity_ids: A list of IDs for User Assigned Managed Identity resources to be assigned.
        :param pulumi.Input[str] principal_id: The Principal ID associated with this Managed Service Identity.
        :param pulumi.Input[str] tenant_id: The Tenant ID associated with this Managed Service Identity.
        :param pulumi.Input[str] type: Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are `SystemAssigned`, `UserAssigned` or `SystemAssigned, UserAssigned` (to enable both).
        """
        __self__.identity_ids = identity_ids
        __self__.principal_id = principal_id
        __self__.tenant_id = tenant_id
        __self__.type = type

@pulumi.input_type
class ServicePolicyArgs:
    xml_content: Optional[pulumi.Input[str]] = pulumi.input_property("xmlContent")
    """
    The XML Content for this Policy.
    """
    xml_link: Optional[pulumi.Input[str]] = pulumi.input_property("xmlLink")
    """
    A link to an API Management Policy XML Document, which must be publicly available.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, xml_content: Optional[pulumi.Input[str]] = None, xml_link: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] xml_content: The XML Content for this Policy.
        :param pulumi.Input[str] xml_link: A link to an API Management Policy XML Document, which must be publicly available.
        """
        __self__.xml_content = xml_content
        __self__.xml_link = xml_link

@pulumi.input_type
class ServiceProtocolsArgs:
    enable_http2: Optional[pulumi.Input[bool]] = pulumi.input_property("enableHttp2")
    """
    Should HTTP/2 be supported by the API Management Service? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enable_http2: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] enable_http2: Should HTTP/2 be supported by the API Management Service? Defaults to `false`.
        """
        __self__.enable_http2 = enable_http2

@pulumi.input_type
class ServiceSecurityArgs:
    enable_backend_ssl30: Optional[pulumi.Input[bool]] = pulumi.input_property("enableBackendSsl30")
    """
    Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_backend_tls10: Optional[pulumi.Input[bool]] = pulumi.input_property("enableBackendTls10")
    """
    Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_backend_tls11: Optional[pulumi.Input[bool]] = pulumi.input_property("enableBackendTls11")
    """
    Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_frontend_ssl30: Optional[pulumi.Input[bool]] = pulumi.input_property("enableFrontendSsl30")
    """
    Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_frontend_tls10: Optional[pulumi.Input[bool]] = pulumi.input_property("enableFrontendTls10")
    """
    Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_frontend_tls11: Optional[pulumi.Input[bool]] = pulumi.input_property("enableFrontendTls11")
    """
    Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_triple_des_ciphers: Optional[pulumi.Input[bool]] = pulumi.input_property("enableTripleDesCiphers")
    """
    Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enable_backend_ssl30: Optional[pulumi.Input[bool]] = None, enable_backend_tls10: Optional[pulumi.Input[bool]] = None, enable_backend_tls11: Optional[pulumi.Input[bool]] = None, enable_frontend_ssl30: Optional[pulumi.Input[bool]] = None, enable_frontend_tls10: Optional[pulumi.Input[bool]] = None, enable_frontend_tls11: Optional[pulumi.Input[bool]] = None, enable_triple_des_ciphers: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[bool] enable_backend_ssl30: Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_backend_tls10: Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_backend_tls11: Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_ssl30: Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_tls10: Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_frontend_tls11: Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`.
        :param pulumi.Input[bool] enable_triple_des_ciphers: Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`.
        """
        __self__.enable_backend_ssl30 = enable_backend_ssl30
        __self__.enable_backend_tls10 = enable_backend_tls10
        __self__.enable_backend_tls11 = enable_backend_tls11
        __self__.enable_frontend_ssl30 = enable_frontend_ssl30
        __self__.enable_frontend_tls10 = enable_frontend_tls10
        __self__.enable_frontend_tls11 = enable_frontend_tls11
        __self__.enable_triple_des_ciphers = enable_triple_des_ciphers

@pulumi.input_type
class ServiceSignInArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Should anonymous users be redirected to the sign in page?
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool]) -> None:
        """
        :param pulumi.Input[bool] enabled: Should anonymous users be redirected to the sign in page?
        """
        __self__.enabled = enabled

@pulumi.input_type
class ServiceSignUpArgs:
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Can users sign up on the development portal?
    """
    terms_of_service: pulumi.Input['ServiceSignUpTermsOfServiceArgs'] = pulumi.input_property("termsOfService")
    """
    A `terms_of_service` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, enabled: pulumi.Input[bool], terms_of_service: pulumi.Input['ServiceSignUpTermsOfServiceArgs']) -> None:
        """
        :param pulumi.Input[bool] enabled: Can users sign up on the development portal?
        :param pulumi.Input['ServiceSignUpTermsOfServiceArgs'] terms_of_service: A `terms_of_service` block as defined below.
        """
        __self__.enabled = enabled
        __self__.terms_of_service = terms_of_service

@pulumi.input_type
class ServiceSignUpTermsOfServiceArgs:
    consent_required: pulumi.Input[bool] = pulumi.input_property("consentRequired")
    """
    Should the user be asked for consent during sign up?
    """
    enabled: pulumi.Input[bool] = pulumi.input_property("enabled")
    """
    Should Terms of Service be displayed during sign up?.
    """
    text: Optional[pulumi.Input[str]] = pulumi.input_property("text")
    """
    The Terms of Service which users are required to agree to in order to sign up.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, consent_required: pulumi.Input[bool], enabled: pulumi.Input[bool], text: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[bool] consent_required: Should the user be asked for consent during sign up?
        :param pulumi.Input[bool] enabled: Should Terms of Service be displayed during sign up?.
        :param pulumi.Input[str] text: The Terms of Service which users are required to agree to in order to sign up.
        """
        __self__.consent_required = consent_required
        __self__.enabled = enabled
        __self__.text = text

@pulumi.input_type
class ServiceVirtualNetworkConfigurationArgs:
    subnet_id: pulumi.Input[str] = pulumi.input_property("subnetId")
    """
    The id of the subnet that will be used for the API Management.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, subnet_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] subnet_id: The id of the subnet that will be used for the API Management.
        """
        __self__.subnet_id = subnet_id

