# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class ApiImport(dict):
    content_format: str = pulumi.output_property("contentFormat")
    """
    The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
    """
    content_value: str = pulumi.output_property("contentValue")
    """
    The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
    """
    wsdl_selector: Optional['outputs.ApiImportWsdlSelector'] = pulumi.output_property("wsdlSelector")
    """
    A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiImportWsdlSelector(dict):
    endpoint_name: str = pulumi.output_property("endpointName")
    """
    The name of endpoint (port) to import from WSDL.
    """
    service_name: str = pulumi.output_property("serviceName")
    """
    The name of service to import from WSDL.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationRequest(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of the HTTP Request, which may include HTML tags.
    """
    headers: Optional[List['outputs.ApiOperationRequestHeader']] = pulumi.output_property("headers")
    """
    One or more `header` blocks as defined above.
    """
    query_parameters: Optional[List['outputs.ApiOperationRequestQueryParameter']] = pulumi.output_property("queryParameters")
    """
    One or more `query_parameter` blocks as defined above.
    """
    representations: Optional[List['outputs.ApiOperationRequestRepresentation']] = pulumi.output_property("representations")
    """
    One or more `representation` blocks as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationRequestHeader(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Header.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Header.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Header.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Header Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Header, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationRequestQueryParameter(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Query Parameter.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Query Parameter.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Query Parameter.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Query Parameter Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Query Parameter, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Query Parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationRequestRepresentation(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The Content Type of this representation, such as `application/json`.
    """
    form_parameters: Optional[List['outputs.ApiOperationRequestRepresentationFormParameter']] = pulumi.output_property("formParameters")
    """
    One or more `form_parameter` block as defined above.
    """
    sample: Optional[str] = pulumi.output_property("sample")
    """
    An example of this representation.
    """
    schema_id: Optional[str] = pulumi.output_property("schemaId")
    """
    The ID of an API Management Schema which represents this Response.
    """
    type_name: Optional[str] = pulumi.output_property("typeName")
    """
    The Type Name defined by the Schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationRequestRepresentationFormParameter(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Form Parameter.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Form Parameter.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Form Parameter.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Form Parameter Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Form Parameter, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Form Parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationResponse(dict):
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of the HTTP Response, which may include HTML tags.
    """
    headers: Optional[List['outputs.ApiOperationResponseHeader']] = pulumi.output_property("headers")
    """
    One or more `header` blocks as defined above.
    """
    representations: Optional[List['outputs.ApiOperationResponseRepresentation']] = pulumi.output_property("representations")
    """
    One or more `representation` blocks as defined below.
    """
    status_code: float = pulumi.output_property("statusCode")
    """
    The HTTP Status Code.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationResponseHeader(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Header.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Header.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Header.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Header Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Header, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Header.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationResponseRepresentation(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The Content Type of this representation, such as `application/json`.
    """
    form_parameters: Optional[List['outputs.ApiOperationResponseRepresentationFormParameter']] = pulumi.output_property("formParameters")
    """
    One or more `form_parameter` block as defined above.
    """
    sample: Optional[str] = pulumi.output_property("sample")
    """
    An example of this representation.
    """
    schema_id: Optional[str] = pulumi.output_property("schemaId")
    """
    The ID of an API Management Schema which represents this Response.
    """
    type_name: Optional[str] = pulumi.output_property("typeName")
    """
    The Type Name defined by the Schema.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationResponseRepresentationFormParameter(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Form Parameter.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Form Parameter.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Form Parameter.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Form Parameter Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Form Parameter, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Form Parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiOperationTemplateParameter(dict):
    default_value: Optional[str] = pulumi.output_property("defaultValue")
    """
    The default value for this Template Parameter.
    """
    description: Optional[str] = pulumi.output_property("description")
    """
    A description of this Template Parameter.
    """
    name: str = pulumi.output_property("name")
    """
    The Name of this Template Parameter.
    """
    required: bool = pulumi.output_property("required")
    """
    Is this Template Parameter Required?
    """
    type: str = pulumi.output_property("type")
    """
    The Type of this Template Parameter, such as a `string`.
    """
    values: Optional[List[str]] = pulumi.output_property("values")
    """
    One or more acceptable values for this Template Parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApiSubscriptionKeyParameterNames(dict):
    header: str = pulumi.output_property("header")
    """
    The name of the HTTP Header which should be used for the Subscription Key.
    """
    query: str = pulumi.output_property("query")
    """
    The name of the QueryString parameter which should be used for the Subscription Key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationServerTokenBodyParameter(dict):
    name: str = pulumi.output_property("name")
    """
    The Name of the Parameter.
    """
    value: str = pulumi.output_property("value")
    """
    The Value of the Parameter.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendCredentials(dict):
    authorization: Optional['outputs.BackendCredentialsAuthorization'] = pulumi.output_property("authorization")
    """
    An `authorization` block as defined below.
    """
    certificates: Optional[List[str]] = pulumi.output_property("certificates")
    """
    A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
    """
    header: Optional[Dict[str, str]] = pulumi.output_property("header")
    """
    A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
    """
    query: Optional[Dict[str, str]] = pulumi.output_property("query")
    """
    A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendCredentialsAuthorization(dict):
    parameter: Optional[str] = pulumi.output_property("parameter")
    """
    The authentication Parameter value.
    """
    scheme: Optional[str] = pulumi.output_property("scheme")
    """
    The authentication Scheme name.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendProxy(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The password to connect to the proxy server.
    """
    url: str = pulumi.output_property("url")
    """
    The URL of the proxy server.
    """
    username: str = pulumi.output_property("username")
    """
    The username to connect to the proxy server.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceFabricCluster(dict):
    client_certificate_thumbprint: str = pulumi.output_property("clientCertificateThumbprint")
    """
    The client certificate thumbprint for the management endpoint.
    """
    management_endpoints: List[str] = pulumi.output_property("managementEndpoints")
    """
    A list of cluster management endpoints.
    """
    max_partition_resolution_retries: float = pulumi.output_property("maxPartitionResolutionRetries")
    """
    The maximum number of retries when attempting resolve the partition.
    """
    server_certificate_thumbprints: Optional[List[str]] = pulumi.output_property("serverCertificateThumbprints")
    """
    A list of thumbprints of the server certificates of the Service Fabric cluster.
    """
    server_x509_names: Optional[List['outputs.BackendServiceFabricClusterServerX509Name']] = pulumi.output_property("serverX509Names")
    """
    One or more `server_x509_name` blocks as documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendServiceFabricClusterServerX509Name(dict):
    issuer_certificate_thumbprint: str = pulumi.output_property("issuerCertificateThumbprint")
    """
    The thumbprint for the issuer of the certificate.
    """
    name: str = pulumi.output_property("name")
    """
    The name of the API Management backend. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendTls(dict):
    validate_certificate_chain: Optional[bool] = pulumi.output_property("validateCertificateChain")
    """
    Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for the backend host.
    """
    validate_certificate_name: Optional[bool] = pulumi.output_property("validateCertificateName")
    """
    Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for the backend host.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoggerApplicationInsights(dict):
    instrumentation_key: str = pulumi.output_property("instrumentationKey")
    """
    The instrumentation key used to push data to Application Insights.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LoggerEventhub(dict):
    connection_string: str = pulumi.output_property("connectionString")
    """
    The connection string of an EventHub Namespace.
    """
    name: str = pulumi.output_property("name")
    """
    The name of an EventHub.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceAdditionalLocation(dict):
    gateway_regional_url: Optional[str] = pulumi.output_property("gatewayRegionalUrl")
    """
    The URL of the Regional Gateway for the API Management Service in the specified region.
    """
    location: str = pulumi.output_property("location")
    """
    The name of the Azure Region in which the API Management Service should be expanded to.
    """
    public_ip_addresses: Optional[List[str]] = pulumi.output_property("publicIpAddresses")
    """
    Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceCertificate(dict):
    certificate_password: str = pulumi.output_property("certificatePassword")
    """
    The password for the certificate.
    """
    encoded_certificate: str = pulumi.output_property("encodedCertificate")
    """
    The Base64 Encoded PFX Certificate.
    """
    store_name: str = pulumi.output_property("storeName")
    """
    The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfiguration(dict):
    developer_portals: Optional[List['outputs.ServiceHostnameConfigurationDeveloperPortal']] = pulumi.output_property("developerPortals")
    """
    One or more `developer_portal` blocks as documented below.
    """
    managements: Optional[List['outputs.ServiceHostnameConfigurationManagement']] = pulumi.output_property("managements")
    """
    One or more `management` blocks as documented below.
    """
    portals: Optional[List['outputs.ServiceHostnameConfigurationPortal']] = pulumi.output_property("portals")
    """
    One or more `portal` blocks as documented below.
    """
    proxies: Optional[List['outputs.ServiceHostnameConfigurationProxy']] = pulumi.output_property("proxies")
    """
    One or more `proxy` blocks as documented below.
    """
    scms: Optional[List['outputs.ServiceHostnameConfigurationScm']] = pulumi.output_property("scms")
    """
    One or more `scm` blocks as documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfigurationDeveloperPortal(dict):
    certificate: Optional[str] = pulumi.output_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[str] = pulumi.output_property("certificatePassword")
    """
    The password for the certificate.
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[bool] = pulumi.output_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfigurationManagement(dict):
    certificate: Optional[str] = pulumi.output_property("certificate")
    """
    The Base64 Encoded Certificate.
    """
    certificate_password: Optional[str] = pulumi.output_property("certificatePassword")
    """
    The password associated with the certificate provided above.
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[bool] = pulumi.output_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfigurationPortal(dict):
    certificate: Optional[str] = pulumi.output_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[str] = pulumi.output_property("certificatePassword")
    """
    The password for the certificate.
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[bool] = pulumi.output_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfigurationProxy(dict):
    certificate: Optional[str] = pulumi.output_property("certificate")
    """
    The Base64 Encoded Certificate.
    """
    certificate_password: Optional[str] = pulumi.output_property("certificatePassword")
    """
    The password associated with the certificate provided above.
    """
    default_ssl_binding: Optional[bool] = pulumi.output_property("defaultSslBinding")
    """
    Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[bool] = pulumi.output_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceHostnameConfigurationScm(dict):
    certificate: Optional[str] = pulumi.output_property("certificate")
    """
    One or more (up to 10) `certificate` blocks as defined below.
    """
    certificate_password: Optional[str] = pulumi.output_property("certificatePassword")
    """
    The password for the certificate.
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname to use for the Management API.
    """
    key_vault_id: Optional[str] = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
    """
    negotiate_client_certificate: Optional[bool] = pulumi.output_property("negotiateClientCertificate")
    """
    Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceIdentity(dict):
    identity_ids: Optional[List[str]] = pulumi.output_property("identityIds")
    """
    A list of IDs for User Assigned Managed Identity resources to be assigned.
    """
    principal_id: Optional[str] = pulumi.output_property("principalId")
    """
    The Principal ID associated with this Managed Service Identity.
    """
    tenant_id: Optional[str] = pulumi.output_property("tenantId")
    """
    The Tenant ID associated with this Managed Service Identity.
    """
    type: Optional[str] = pulumi.output_property("type")
    """
    Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are `SystemAssigned`, `UserAssigned` or `SystemAssigned, UserAssigned` (to enable both).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServicePolicy(dict):
    xml_content: Optional[str] = pulumi.output_property("xmlContent")
    """
    The XML Content for this Policy.
    """
    xml_link: Optional[str] = pulumi.output_property("xmlLink")
    """
    A link to an API Management Policy XML Document, which must be publicly available.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceProtocols(dict):
    enable_http2: Optional[bool] = pulumi.output_property("enableHttp2")
    """
    Should HTTP/2 be supported by the API Management Service? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSecurity(dict):
    enable_backend_ssl30: Optional[bool] = pulumi.output_property("enableBackendSsl30")
    """
    Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_backend_tls10: Optional[bool] = pulumi.output_property("enableBackendTls10")
    """
    Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_backend_tls11: Optional[bool] = pulumi.output_property("enableBackendTls11")
    """
    Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`.
    """
    enable_frontend_ssl30: Optional[bool] = pulumi.output_property("enableFrontendSsl30")
    """
    Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_frontend_tls10: Optional[bool] = pulumi.output_property("enableFrontendTls10")
    """
    Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_frontend_tls11: Optional[bool] = pulumi.output_property("enableFrontendTls11")
    """
    Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`.
    """
    enable_triple_des_ciphers: Optional[bool] = pulumi.output_property("enableTripleDesCiphers")
    """
    Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSignIn(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Should anonymous users be redirected to the sign in page?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSignUp(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Can users sign up on the development portal?
    """
    terms_of_service: 'outputs.ServiceSignUpTermsOfService' = pulumi.output_property("termsOfService")
    """
    A `terms_of_service` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceSignUpTermsOfService(dict):
    consent_required: bool = pulumi.output_property("consentRequired")
    """
    Should the user be asked for consent during sign up?
    """
    enabled: bool = pulumi.output_property("enabled")
    """
    Should Terms of Service be displayed during sign up?.
    """
    text: Optional[str] = pulumi.output_property("text")
    """
    The Terms of Service which users are required to agree to in order to sign up.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceVirtualNetworkConfiguration(dict):
    subnet_id: str = pulumi.output_property("subnetId")
    """
    The id of the subnet that will be used for the API Management.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetApiSubscriptionKeyParameterName(dict):
    header: str = pulumi.output_property("header")
    """
    The name of the HTTP Header which should be used for the Subscription Key.
    """
    query: str = pulumi.output_property("query")
    """
    The name of the QueryString parameter which should be used for the Subscription Key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceAdditionalLocation(dict):
    gateway_regional_url: str = pulumi.output_property("gatewayRegionalUrl")
    """
    Gateway URL of the API Management service in the Region.
    """
    location: str = pulumi.output_property("location")
    """
    The location name of the additional region among Azure Data center regions.
    """
    public_ip_addresses: List[str] = pulumi.output_property("publicIpAddresses")
    """
    Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfiguration(dict):
    developer_portals: List['outputs.GetServiceHostnameConfigurationDeveloperPortal'] = pulumi.output_property("developerPortals")
    """
    One or more `developer_portal` blocks as documented below.
    """
    managements: List['outputs.GetServiceHostnameConfigurationManagement'] = pulumi.output_property("managements")
    """
    One or more `management` blocks as documented below.
    """
    portals: List['outputs.GetServiceHostnameConfigurationPortal'] = pulumi.output_property("portals")
    """
    One or more `portal` blocks as documented below.
    """
    proxies: List['outputs.GetServiceHostnameConfigurationProxy'] = pulumi.output_property("proxies")
    """
    One or more `proxy` blocks as documented below.
    """
    scms: List['outputs.GetServiceHostnameConfigurationScm'] = pulumi.output_property("scms")
    """
    One or more `scm` blocks as documented below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfigurationDeveloperPortal(dict):
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname used for the SCM URL.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret which contains the SSL Certificate.
    """
    negotiate_client_certificate: bool = pulumi.output_property("negotiateClientCertificate")
    """
    Is Client Certificate Negotiation enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfigurationManagement(dict):
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname used for the SCM URL.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret which contains the SSL Certificate.
    """
    negotiate_client_certificate: bool = pulumi.output_property("negotiateClientCertificate")
    """
    Is Client Certificate Negotiation enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfigurationPortal(dict):
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname used for the SCM URL.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret which contains the SSL Certificate.
    """
    negotiate_client_certificate: bool = pulumi.output_property("negotiateClientCertificate")
    """
    Is Client Certificate Negotiation enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfigurationProxy(dict):
    default_ssl_binding: bool = pulumi.output_property("defaultSslBinding")
    """
    Is this the default SSL Binding?
    """
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname used for the SCM URL.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret which contains the SSL Certificate.
    """
    negotiate_client_certificate: bool = pulumi.output_property("negotiateClientCertificate")
    """
    Is Client Certificate Negotiation enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceHostnameConfigurationScm(dict):
    host_name: str = pulumi.output_property("hostName")
    """
    The Hostname used for the SCM URL.
    """
    key_vault_id: str = pulumi.output_property("keyVaultId")
    """
    The ID of the Key Vault Secret which contains the SSL Certificate.
    """
    negotiate_client_certificate: bool = pulumi.output_property("negotiateClientCertificate")
    """
    Is Client Certificate Negotiation enabled?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetServiceIdentity(dict):
    identity_ids: List[str] = pulumi.output_property("identityIds")
    """
    A list of IDs for User Assigned Managed Identity resources to be assigned.
    """
    principal_id: str = pulumi.output_property("principalId")
    """
    Specifies the Principal ID of the System Assigned Managed Service Identity that is configured on this API Management Service.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    Specifies the Tenant ID of the System Assigned Managed Service Identity that is configured on this API Management Service.
    """
    type: str = pulumi.output_property("type")
    """
    Specifies the type of Managed Service Identity that is configured on this API Management Service.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


