# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'ServiceAuthenticationConfigurationArgs',
    'ServiceCorsConfigurationArgs',
]

@pulumi.input_type
class ServiceAuthenticationConfigurationArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 authority: Optional[pulumi.Input[str]] = None,
                 smart_proxy_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] audience: The intended audience to receive authentication tokens for the service. The default value is https://azurehealthcareapis.com
        :param pulumi.Input[str] authority: The Azure Active Directory (tenant) that serves as the authentication authority to access the service. The default authority is the Directory defined in the authentication scheme in use when running this provider.
               Authority must be registered to Azure AD and in the following format: https://{Azure-AD-endpoint}/{tenant-id}.
        :param pulumi.Input[bool] smart_proxy_enabled: Enables the 'SMART on FHIR' option for mobile and web implementations.
        """
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "authority", authority)
        pulumi.set(__self__, "smartProxyEnabled", smart_proxy_enabled)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        The intended audience to receive authentication tokens for the service. The default value is https://azurehealthcareapis.com
        """
        ...

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Active Directory (tenant) that serves as the authentication authority to access the service. The default authority is the Directory defined in the authentication scheme in use when running this provider.
        Authority must be registered to Azure AD and in the following format: https://{Azure-AD-endpoint}/{tenant-id}.
        """
        ...

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="smartProxyEnabled")
    def smart_proxy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the 'SMART on FHIR' option for mobile and web implementations.
        """
        ...

    @smart_proxy_enabled.setter
    def smart_proxy_enabled(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class ServiceCorsConfigurationArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allowed_headers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_methods: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_origins: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 max_age_in_seconds: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] allow_credentials: If credentials are allowed via CORS.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_headers: A set of headers to be allowed via CORS.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_methods: The methods to be allowed via CORS.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_origins: A set of origins to be allowed via CORS.
        :param pulumi.Input[float] max_age_in_seconds: The max age to be allowed via CORS.
        """
        pulumi.set(__self__, "allowCredentials", allow_credentials)
        pulumi.set(__self__, "allowedHeaders", allowed_headers)
        pulumi.set(__self__, "allowedMethods", allowed_methods)
        pulumi.set(__self__, "allowedOrigins", allowed_origins)
        pulumi.set(__self__, "maxAgeInSeconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        If credentials are allowed via CORS.
        """
        ...

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A set of headers to be allowed via CORS.
        """
        ...

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        The methods to be allowed via CORS.
        """
        ...

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        A set of origins to be allowed via CORS.
        """
        ...

    @allowed_origins.setter
    def allowed_origins(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The max age to be allowed via CORS.
        """
        ...

    @max_age_in_seconds.setter
    def max_age_in_seconds(self, value: Optional[pulumi.Input[float]]):
        ...


