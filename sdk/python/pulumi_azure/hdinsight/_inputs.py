# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'HBaseClusterComponentVersionArgs',
    'HBaseClusterGatewayArgs',
    'HBaseClusterMetastoresArgs',
    'HBaseClusterMetastoresAmbariArgs',
    'HBaseClusterMetastoresHiveArgs',
    'HBaseClusterMetastoresOozieArgs',
    'HBaseClusterMonitorArgs',
    'HBaseClusterRolesArgs',
    'HBaseClusterRolesHeadNodeArgs',
    'HBaseClusterRolesWorkerNodeArgs',
    'HBaseClusterRolesZookeeperNodeArgs',
    'HBaseClusterStorageAccountArgs',
    'HBaseClusterStorageAccountGen2Args',
    'HadoopClusterComponentVersionArgs',
    'HadoopClusterGatewayArgs',
    'HadoopClusterMetastoresArgs',
    'HadoopClusterMetastoresAmbariArgs',
    'HadoopClusterMetastoresHiveArgs',
    'HadoopClusterMetastoresOozieArgs',
    'HadoopClusterMonitorArgs',
    'HadoopClusterRolesArgs',
    'HadoopClusterRolesEdgeNodeArgs',
    'HadoopClusterRolesEdgeNodeInstallScriptActionArgs',
    'HadoopClusterRolesHeadNodeArgs',
    'HadoopClusterRolesWorkerNodeArgs',
    'HadoopClusterRolesZookeeperNodeArgs',
    'HadoopClusterStorageAccountArgs',
    'HadoopClusterStorageAccountGen2Args',
    'InteractiveQueryClusterComponentVersionArgs',
    'InteractiveQueryClusterGatewayArgs',
    'InteractiveQueryClusterMetastoresArgs',
    'InteractiveQueryClusterMetastoresAmbariArgs',
    'InteractiveQueryClusterMetastoresHiveArgs',
    'InteractiveQueryClusterMetastoresOozieArgs',
    'InteractiveQueryClusterMonitorArgs',
    'InteractiveQueryClusterRolesArgs',
    'InteractiveQueryClusterRolesHeadNodeArgs',
    'InteractiveQueryClusterRolesWorkerNodeArgs',
    'InteractiveQueryClusterRolesZookeeperNodeArgs',
    'InteractiveQueryClusterStorageAccountArgs',
    'InteractiveQueryClusterStorageAccountGen2Args',
    'KafkaClusterComponentVersionArgs',
    'KafkaClusterGatewayArgs',
    'KafkaClusterMetastoresArgs',
    'KafkaClusterMetastoresAmbariArgs',
    'KafkaClusterMetastoresHiveArgs',
    'KafkaClusterMetastoresOozieArgs',
    'KafkaClusterMonitorArgs',
    'KafkaClusterRolesArgs',
    'KafkaClusterRolesHeadNodeArgs',
    'KafkaClusterRolesWorkerNodeArgs',
    'KafkaClusterRolesZookeeperNodeArgs',
    'KafkaClusterStorageAccountArgs',
    'KafkaClusterStorageAccountGen2Args',
    'MLServicesClusterGatewayArgs',
    'MLServicesClusterRolesArgs',
    'MLServicesClusterRolesEdgeNodeArgs',
    'MLServicesClusterRolesHeadNodeArgs',
    'MLServicesClusterRolesWorkerNodeArgs',
    'MLServicesClusterRolesZookeeperNodeArgs',
    'MLServicesClusterStorageAccountArgs',
    'RServerClusterGatewayArgs',
    'RServerClusterRolesArgs',
    'RServerClusterRolesEdgeNodeArgs',
    'RServerClusterRolesHeadNodeArgs',
    'RServerClusterRolesWorkerNodeArgs',
    'RServerClusterRolesZookeeperNodeArgs',
    'RServerClusterStorageAccountArgs',
    'SparkClusterComponentVersionArgs',
    'SparkClusterGatewayArgs',
    'SparkClusterMetastoresArgs',
    'SparkClusterMetastoresAmbariArgs',
    'SparkClusterMetastoresHiveArgs',
    'SparkClusterMetastoresOozieArgs',
    'SparkClusterMonitorArgs',
    'SparkClusterRolesArgs',
    'SparkClusterRolesHeadNodeArgs',
    'SparkClusterRolesWorkerNodeArgs',
    'SparkClusterRolesZookeeperNodeArgs',
    'SparkClusterStorageAccountArgs',
    'SparkClusterStorageAccountGen2Args',
    'StormClusterComponentVersionArgs',
    'StormClusterGatewayArgs',
    'StormClusterMetastoresArgs',
    'StormClusterMetastoresAmbariArgs',
    'StormClusterMetastoresHiveArgs',
    'StormClusterMetastoresOozieArgs',
    'StormClusterMonitorArgs',
    'StormClusterRolesArgs',
    'StormClusterRolesHeadNodeArgs',
    'StormClusterRolesWorkerNodeArgs',
    'StormClusterRolesZookeeperNodeArgs',
    'StormClusterStorageAccountArgs',
]

@pulumi.input_type
class HBaseClusterComponentVersionArgs:
    hbase: pulumi.Input[str] = pulumi.input_property("hbase")
    """
    The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hbase: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] hbase: The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
        """
        __self__.hbase = hbase

@pulumi.input_type
class HBaseClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class HBaseClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['HBaseClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['HBaseClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['HBaseClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['HBaseClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['HBaseClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['HBaseClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['HBaseClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['HBaseClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['HBaseClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class HBaseClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HBaseClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HBaseClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HBaseClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class HBaseClusterRolesArgs:
    head_node: pulumi.Input['HBaseClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['HBaseClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['HBaseClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['HBaseClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['HBaseClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['HBaseClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['HBaseClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['HBaseClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['HBaseClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class HBaseClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HBaseClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HBaseClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HBaseClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class HBaseClusterStorageAccountGen2Args:
    filesystem_id: pulumi.Input[str] = pulumi.input_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: pulumi.Input[str] = pulumi.input_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: pulumi.Input[str] = pulumi.input_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filesystem_id: pulumi.Input[str], is_default: pulumi.Input[bool], managed_identity_resource_id: pulumi.Input[str], storage_resource_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] filesystem_id: The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] managed_identity_resource_id: The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_resource_id: The ID of the Storage Account. Changing this forces a new resource to be created.
        """
        __self__.filesystem_id = filesystem_id
        __self__.is_default = is_default
        __self__.managed_identity_resource_id = managed_identity_resource_id
        __self__.storage_resource_id = storage_resource_id

@pulumi.input_type
class HadoopClusterComponentVersionArgs:
    hadoop: pulumi.Input[str] = pulumi.input_property("hadoop")
    """
    The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hadoop: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] hadoop: The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
        """
        __self__.hadoop = hadoop

@pulumi.input_type
class HadoopClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class HadoopClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['HadoopClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['HadoopClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['HadoopClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['HadoopClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['HadoopClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['HadoopClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['HadoopClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['HadoopClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['HadoopClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class HadoopClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HadoopClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HadoopClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class HadoopClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class HadoopClusterRolesArgs:
    head_node: pulumi.Input['HadoopClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['HadoopClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['HadoopClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """
    edge_node: Optional[pulumi.Input['HadoopClusterRolesEdgeNodeArgs']] = pulumi.input_property("edgeNode")
    """
    A `edge_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['HadoopClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['HadoopClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['HadoopClusterRolesZookeeperNodeArgs'], edge_node: Optional[pulumi.Input['HadoopClusterRolesEdgeNodeArgs']] = None) -> None:
        """
        :param pulumi.Input['HadoopClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['HadoopClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['HadoopClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        :param pulumi.Input['HadoopClusterRolesEdgeNodeArgs'] edge_node: A `edge_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node
        __self__.edge_node = edge_node

@pulumi.input_type
class HadoopClusterRolesEdgeNodeArgs:
    install_script_actions: pulumi.Input[List[pulumi.Input['HadoopClusterRolesEdgeNodeInstallScriptActionArgs']]] = pulumi.input_property("installScriptActions")
    """
    A `install_script_action` block as defined below.
    """
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, install_script_actions: pulumi.Input[List[pulumi.Input['HadoopClusterRolesEdgeNodeInstallScriptActionArgs']]], target_instance_count: pulumi.Input[float], vm_size: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[List[pulumi.Input['HadoopClusterRolesEdgeNodeInstallScriptActionArgs']]] install_script_actions: A `install_script_action` block as defined below.
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
        """
        __self__.install_script_actions = install_script_actions
        __self__.target_instance_count = target_instance_count
        __self__.vm_size = vm_size

@pulumi.input_type
class HadoopClusterRolesEdgeNodeInstallScriptActionArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The name of the install script action. Changing this forces a new resource to be created.
    """
    uri: pulumi.Input[str] = pulumi.input_property("uri")
    """
    The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], uri: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] name: The name of the install script action. Changing this forces a new resource to be created.
        :param pulumi.Input[str] uri: The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
        """
        __self__.name = name
        __self__.uri = uri

@pulumi.input_type
class HadoopClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HadoopClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HadoopClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class HadoopClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class HadoopClusterStorageAccountGen2Args:
    filesystem_id: pulumi.Input[str] = pulumi.input_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: pulumi.Input[str] = pulumi.input_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: pulumi.Input[str] = pulumi.input_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filesystem_id: pulumi.Input[str], is_default: pulumi.Input[bool], managed_identity_resource_id: pulumi.Input[str], storage_resource_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] filesystem_id: The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] managed_identity_resource_id: The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_resource_id: The ID of the Storage Account. Changing this forces a new resource to be created.
        """
        __self__.filesystem_id = filesystem_id
        __self__.is_default = is_default
        __self__.managed_identity_resource_id = managed_identity_resource_id
        __self__.storage_resource_id = storage_resource_id

@pulumi.input_type
class InteractiveQueryClusterComponentVersionArgs:
    interactive_hive: pulumi.Input[str] = pulumi.input_property("interactiveHive")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, interactive_hive: pulumi.Input[str]) -> None:
        __self__.interactive_hive = interactive_hive

@pulumi.input_type
class InteractiveQueryClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class InteractiveQueryClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['InteractiveQueryClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['InteractiveQueryClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['InteractiveQueryClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['InteractiveQueryClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['InteractiveQueryClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['InteractiveQueryClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['InteractiveQueryClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['InteractiveQueryClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['InteractiveQueryClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class InteractiveQueryClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class InteractiveQueryClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class InteractiveQueryClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class InteractiveQueryClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class InteractiveQueryClusterRolesArgs:
    head_node: pulumi.Input['InteractiveQueryClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['InteractiveQueryClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['InteractiveQueryClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['InteractiveQueryClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['InteractiveQueryClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['InteractiveQueryClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['InteractiveQueryClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['InteractiveQueryClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['InteractiveQueryClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class InteractiveQueryClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class InteractiveQueryClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class InteractiveQueryClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class InteractiveQueryClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class InteractiveQueryClusterStorageAccountGen2Args:
    filesystem_id: pulumi.Input[str] = pulumi.input_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: pulumi.Input[str] = pulumi.input_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: pulumi.Input[str] = pulumi.input_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filesystem_id: pulumi.Input[str], is_default: pulumi.Input[bool], managed_identity_resource_id: pulumi.Input[str], storage_resource_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] filesystem_id: The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] managed_identity_resource_id: The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_resource_id: The ID of the Storage Account. Changing this forces a new resource to be created.
        """
        __self__.filesystem_id = filesystem_id
        __self__.is_default = is_default
        __self__.managed_identity_resource_id = managed_identity_resource_id
        __self__.storage_resource_id = storage_resource_id

@pulumi.input_type
class KafkaClusterComponentVersionArgs:
    kafka: pulumi.Input[str] = pulumi.input_property("kafka")
    """
    The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kafka: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] kafka: The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
        """
        __self__.kafka = kafka

@pulumi.input_type
class KafkaClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class KafkaClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['KafkaClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['KafkaClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['KafkaClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['KafkaClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['KafkaClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['KafkaClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['KafkaClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['KafkaClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['KafkaClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class KafkaClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class KafkaClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class KafkaClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class KafkaClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class KafkaClusterRolesArgs:
    head_node: pulumi.Input['KafkaClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['KafkaClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['KafkaClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['KafkaClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['KafkaClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['KafkaClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['KafkaClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['KafkaClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['KafkaClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class KafkaClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class KafkaClusterRolesWorkerNodeArgs:
    number_of_disks_per_node: pulumi.Input[float] = pulumi.input_property("numberOfDisksPerNode")
    """
    The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
    """
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, number_of_disks_per_node: pulumi.Input[float], target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] number_of_disks_per_node: The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.number_of_disks_per_node = number_of_disks_per_node
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class KafkaClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class KafkaClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class KafkaClusterStorageAccountGen2Args:
    filesystem_id: pulumi.Input[str] = pulumi.input_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: pulumi.Input[str] = pulumi.input_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: pulumi.Input[str] = pulumi.input_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filesystem_id: pulumi.Input[str], is_default: pulumi.Input[bool], managed_identity_resource_id: pulumi.Input[str], storage_resource_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] filesystem_id: The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] managed_identity_resource_id: The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_resource_id: The ID of the Storage Account. Changing this forces a new resource to be created.
        """
        __self__.filesystem_id = filesystem_id
        __self__.is_default = is_default
        __self__.managed_identity_resource_id = managed_identity_resource_id
        __self__.storage_resource_id = storage_resource_id

@pulumi.input_type
class MLServicesClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class MLServicesClusterRolesArgs:
    edge_node: pulumi.Input['MLServicesClusterRolesEdgeNodeArgs'] = pulumi.input_property("edgeNode")
    """
    A `edge_node` block as defined above.
    """
    head_node: pulumi.Input['MLServicesClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['MLServicesClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['MLServicesClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, edge_node: pulumi.Input['MLServicesClusterRolesEdgeNodeArgs'], head_node: pulumi.Input['MLServicesClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['MLServicesClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['MLServicesClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['MLServicesClusterRolesEdgeNodeArgs'] edge_node: A `edge_node` block as defined above.
        :param pulumi.Input['MLServicesClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['MLServicesClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['MLServicesClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.edge_node = edge_node
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class MLServicesClusterRolesEdgeNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class MLServicesClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class MLServicesClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class MLServicesClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class MLServicesClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class RServerClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class RServerClusterRolesArgs:
    edge_node: pulumi.Input['RServerClusterRolesEdgeNodeArgs'] = pulumi.input_property("edgeNode")
    """
    A `edge_node` block as defined above.
    """
    head_node: pulumi.Input['RServerClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['RServerClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['RServerClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, edge_node: pulumi.Input['RServerClusterRolesEdgeNodeArgs'], head_node: pulumi.Input['RServerClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['RServerClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['RServerClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['RServerClusterRolesEdgeNodeArgs'] edge_node: A `edge_node` block as defined above.
        :param pulumi.Input['RServerClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['RServerClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['RServerClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.edge_node = edge_node
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class RServerClusterRolesEdgeNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class RServerClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class RServerClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class RServerClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class RServerClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class SparkClusterComponentVersionArgs:
    spark: pulumi.Input[str] = pulumi.input_property("spark")
    """
    The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, spark: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] spark: The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
        """
        __self__.spark = spark

@pulumi.input_type
class SparkClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class SparkClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['SparkClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['SparkClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['SparkClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['SparkClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['SparkClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['SparkClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['SparkClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['SparkClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['SparkClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class SparkClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class SparkClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class SparkClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class SparkClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class SparkClusterRolesArgs:
    head_node: pulumi.Input['SparkClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['SparkClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['SparkClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['SparkClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['SparkClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['SparkClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['SparkClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['SparkClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['SparkClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class SparkClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class SparkClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class SparkClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class SparkClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

@pulumi.input_type
class SparkClusterStorageAccountGen2Args:
    filesystem_id: pulumi.Input[str] = pulumi.input_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: pulumi.Input[str] = pulumi.input_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: pulumi.Input[str] = pulumi.input_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, filesystem_id: pulumi.Input[str], is_default: pulumi.Input[bool], managed_identity_resource_id: pulumi.Input[str], storage_resource_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] filesystem_id: The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] managed_identity_resource_id: The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_resource_id: The ID of the Storage Account. Changing this forces a new resource to be created.
        """
        __self__.filesystem_id = filesystem_id
        __self__.is_default = is_default
        __self__.managed_identity_resource_id = managed_identity_resource_id
        __self__.storage_resource_id = storage_resource_id

@pulumi.input_type
class StormClusterComponentVersionArgs:
    storm: pulumi.Input[str] = pulumi.input_property("storm")
    """
    The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, storm: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] storm: The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
        """
        __self__.storm = storm

@pulumi.input_type
class StormClusterGatewayArgs:
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """
    enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, password: pulumi.Input[str], username: pulumi.Input[str], enabled: Optional[pulumi.Input[bool]] = None) -> None:
        """
        :param pulumi.Input[str] password: The password used for the Ambari Portal.
        :param pulumi.Input[str] username: The username used for the Ambari Portal. Changing this forces a new resource to be created.
        :param pulumi.Input[bool] enabled: Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
        """
        __self__.password = password
        __self__.username = username
        if enabled is not None:
            warnings.warn("HDInsight doesn't support disabling gateway anymore", DeprecationWarning)
            pulumi.log.warn("enabled is deprecated: HDInsight doesn't support disabling gateway anymore")
        __self__.enabled = enabled

@pulumi.input_type
class StormClusterMetastoresArgs:
    ambari: Optional[pulumi.Input['StormClusterMetastoresAmbariArgs']] = pulumi.input_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional[pulumi.Input['StormClusterMetastoresHiveArgs']] = pulumi.input_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional[pulumi.Input['StormClusterMetastoresOozieArgs']] = pulumi.input_property("oozie")
    """
    An `oozie` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ambari: Optional[pulumi.Input['StormClusterMetastoresAmbariArgs']] = None, hive: Optional[pulumi.Input['StormClusterMetastoresHiveArgs']] = None, oozie: Optional[pulumi.Input['StormClusterMetastoresOozieArgs']] = None) -> None:
        """
        :param pulumi.Input['StormClusterMetastoresAmbariArgs'] ambari: An `ambari` block as defined below.
        :param pulumi.Input['StormClusterMetastoresHiveArgs'] hive: A `hive` block as defined below.
        :param pulumi.Input['StormClusterMetastoresOozieArgs'] oozie: An `oozie` block as defined below.
        """
        __self__.ambari = ambari
        __self__.hive = hive
        __self__.oozie = oozie

@pulumi.input_type
class StormClusterMetastoresAmbariArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class StormClusterMetastoresHiveArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class StormClusterMetastoresOozieArgs:
    database_name: pulumi.Input[str] = pulumi.input_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: pulumi.Input[str] = pulumi.input_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, database_name: pulumi.Input[str], password: pulumi.Input[str], server: pulumi.Input[str], username: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] database_name: The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] server: The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
        :param pulumi.Input[str] username: The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
        """
        __self__.database_name = database_name
        __self__.password = password
        __self__.server = server
        __self__.username = username

@pulumi.input_type
class StormClusterMonitorArgs:
    log_analytics_workspace_id: pulumi.Input[str] = pulumi.input_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: pulumi.Input[str] = pulumi.input_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, log_analytics_workspace_id: pulumi.Input[str], primary_key: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[str] log_analytics_workspace_id: The Operations Management Suite (OMS) workspace ID.
        :param pulumi.Input[str] primary_key: The Operations Management Suite (OMS) workspace key.
        """
        __self__.log_analytics_workspace_id = log_analytics_workspace_id
        __self__.primary_key = primary_key

@pulumi.input_type
class StormClusterRolesArgs:
    head_node: pulumi.Input['StormClusterRolesHeadNodeArgs'] = pulumi.input_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: pulumi.Input['StormClusterRolesWorkerNodeArgs'] = pulumi.input_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: pulumi.Input['StormClusterRolesZookeeperNodeArgs'] = pulumi.input_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, head_node: pulumi.Input['StormClusterRolesHeadNodeArgs'], worker_node: pulumi.Input['StormClusterRolesWorkerNodeArgs'], zookeeper_node: pulumi.Input['StormClusterRolesZookeeperNodeArgs']) -> None:
        """
        :param pulumi.Input['StormClusterRolesHeadNodeArgs'] head_node: A `head_node` block as defined above.
        :param pulumi.Input['StormClusterRolesWorkerNodeArgs'] worker_node: A `worker_node` block as defined below.
        :param pulumi.Input['StormClusterRolesZookeeperNodeArgs'] zookeeper_node: A `zookeeper_node` block as defined below.
        """
        __self__.head_node = head_node
        __self__.worker_node = worker_node
        __self__.zookeeper_node = zookeeper_node

@pulumi.input_type
class StormClusterRolesHeadNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class StormClusterRolesWorkerNodeArgs:
    target_instance_count: pulumi.Input[float] = pulumi.input_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """
    min_instance_count: Optional[pulumi.Input[float]] = pulumi.input_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, target_instance_count: pulumi.Input[float], username: pulumi.Input[str], vm_size: pulumi.Input[str], min_instance_count: Optional[pulumi.Input[float]] = None, password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[float] target_instance_count: The number of instances which should be run for the Worker Nodes.
        :param pulumi.Input[str] username: The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[float] min_instance_count: The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.target_instance_count = target_instance_count
        __self__.username = username
        __self__.vm_size = vm_size
        if min_instance_count is not None:
            warnings.warn("this has been deprecated from the API and will be removed in version 3.0 of the provider", DeprecationWarning)
            pulumi.log.warn("min_instance_count is deprecated: this has been deprecated from the API and will be removed in version 3.0 of the provider")
        __self__.min_instance_count = min_instance_count
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class StormClusterRolesZookeeperNodeArgs:
    username: pulumi.Input[str] = pulumi.input_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    vm_size: pulumi.Input[str] = pulumi.input_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[pulumi.Input[str]] = pulumi.input_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[pulumi.Input[str]] = pulumi.input_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[pulumi.Input[str]] = pulumi.input_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, username: pulumi.Input[str], vm_size: pulumi.Input[str], password: Optional[pulumi.Input[str]] = None, ssh_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, subnet_id: Optional[pulumi.Input[str]] = None, virtual_network_id: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] username: The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] vm_size: The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[List[pulumi.Input[str]]] ssh_keys: A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        :param pulumi.Input[str] virtual_network_id: The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
        """
        __self__.username = username
        __self__.vm_size = vm_size
        __self__.password = password
        __self__.ssh_keys = ssh_keys
        __self__.subnet_id = subnet_id
        __self__.virtual_network_id = virtual_network_id

@pulumi.input_type
class StormClusterStorageAccountArgs:
    is_default: pulumi.Input[bool] = pulumi.input_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: pulumi.Input[str] = pulumi.input_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: pulumi.Input[str] = pulumi.input_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, is_default: pulumi.Input[bool], storage_account_key: pulumi.Input[str], storage_container_id: pulumi.Input[str]) -> None:
        """
        :param pulumi.Input[bool] is_default: Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_account_key: The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
        :param pulumi.Input[str] storage_container_id: The ID of the Storage Container. Changing this forces a new resource to be created.
        """
        __self__.is_default = is_default
        __self__.storage_account_key = storage_account_key
        __self__.storage_container_id = storage_container_id

