# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

@pulumi.output_type
class HBaseClusterComponentVersion(dict):
    hbase: str = pulumi.output_property("hbase")
    """
    The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterMetastores(dict):
    ambari: Optional['outputs.HBaseClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.HBaseClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.HBaseClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterRoles(dict):
    head_node: 'outputs.HBaseClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.HBaseClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.HBaseClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HBaseClusterStorageAccountGen2(dict):
    filesystem_id: str = pulumi.output_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: str = pulumi.output_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: str = pulumi.output_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterComponentVersion(dict):
    hadoop: str = pulumi.output_property("hadoop")
    """
    The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterMetastores(dict):
    ambari: Optional['outputs.HadoopClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.HadoopClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.HadoopClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRoles(dict):
    edge_node: Optional['outputs.HadoopClusterRolesEdgeNode'] = pulumi.output_property("edgeNode")
    """
    A `edge_node` block as defined below.
    """
    head_node: 'outputs.HadoopClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.HadoopClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.HadoopClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRolesEdgeNode(dict):
    install_script_actions: List['outputs.HadoopClusterRolesEdgeNodeInstallScriptAction'] = pulumi.output_property("installScriptActions")
    """
    A `install_script_action` block as defined below.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRolesEdgeNodeInstallScriptAction(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the install script action. Changing this forces a new resource to be created.
    """
    uri: str = pulumi.output_property("uri")
    """
    The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HadoopClusterStorageAccountGen2(dict):
    filesystem_id: str = pulumi.output_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: str = pulumi.output_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: str = pulumi.output_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterComponentVersion(dict):
    interactive_hive: str = pulumi.output_property("interactiveHive")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterMetastores(dict):
    ambari: Optional['outputs.InteractiveQueryClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.InteractiveQueryClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.InteractiveQueryClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterRoles(dict):
    head_node: 'outputs.InteractiveQueryClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.InteractiveQueryClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.InteractiveQueryClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InteractiveQueryClusterStorageAccountGen2(dict):
    filesystem_id: str = pulumi.output_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: str = pulumi.output_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: str = pulumi.output_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterComponentVersion(dict):
    kafka: str = pulumi.output_property("kafka")
    """
    The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterMetastores(dict):
    ambari: Optional['outputs.KafkaClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.KafkaClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.KafkaClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterRoles(dict):
    head_node: 'outputs.KafkaClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.KafkaClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.KafkaClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    number_of_disks_per_node: float = pulumi.output_property("numberOfDisksPerNode")
    """
    The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KafkaClusterStorageAccountGen2(dict):
    filesystem_id: str = pulumi.output_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: str = pulumi.output_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: str = pulumi.output_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterRoles(dict):
    edge_node: 'outputs.MLServicesClusterRolesEdgeNode' = pulumi.output_property("edgeNode")
    """
    A `edge_node` block as defined above.
    """
    head_node: 'outputs.MLServicesClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.MLServicesClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.MLServicesClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterRolesEdgeNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MLServicesClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterRoles(dict):
    edge_node: 'outputs.RServerClusterRolesEdgeNode' = pulumi.output_property("edgeNode")
    """
    A `edge_node` block as defined above.
    """
    head_node: 'outputs.RServerClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.RServerClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.RServerClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterRolesEdgeNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RServerClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterComponentVersion(dict):
    spark: str = pulumi.output_property("spark")
    """
    The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterMetastores(dict):
    ambari: Optional['outputs.SparkClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.SparkClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.SparkClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterRoles(dict):
    head_node: 'outputs.SparkClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.SparkClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.SparkClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SparkClusterStorageAccountGen2(dict):
    filesystem_id: str = pulumi.output_property("filesystemId")
    """
    The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
    """
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
    """
    managed_identity_resource_id: str = pulumi.output_property("managedIdentityResourceId")
    """
    The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
    """
    storage_resource_id: str = pulumi.output_property("storageResourceId")
    """
    The ID of the Storage Account. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterComponentVersion(dict):
    storm: str = pulumi.output_property("storm")
    """
    The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterGateway(dict):
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    Is the Ambari portal enabled? The HDInsight API doesn't support disabling gateway anymore.
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterMetastores(dict):
    ambari: Optional['outputs.StormClusterMetastoresAmbari'] = pulumi.output_property("ambari")
    """
    An `ambari` block as defined below.
    """
    hive: Optional['outputs.StormClusterMetastoresHive'] = pulumi.output_property("hive")
    """
    A `hive` block as defined below.
    """
    oozie: Optional['outputs.StormClusterMetastoresOozie'] = pulumi.output_property("oozie")
    """
    An `oozie` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterMetastoresAmbari(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Ambari metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Ambari metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterMetastoresHive(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Hive metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Hive metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Hive metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterMetastoresOozie(dict):
    database_name: str = pulumi.output_property("databaseName")
    """
    The external Oozie metastore's existing SQL database.  Changing this forces a new resource to be created.
    """
    password: str = pulumi.output_property("password")
    """
    The external Oozie metastore's existing SQL server admin password.  Changing this forces a new resource to be created.
    """
    server: str = pulumi.output_property("server")
    """
    The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore.  Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The external Oozie metastore's existing SQL server admin username.  Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterMonitor(dict):
    log_analytics_workspace_id: str = pulumi.output_property("logAnalyticsWorkspaceId")
    """
    The Operations Management Suite (OMS) workspace ID.
    """
    primary_key: str = pulumi.output_property("primaryKey")
    """
    The Operations Management Suite (OMS) workspace key.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterRoles(dict):
    head_node: 'outputs.StormClusterRolesHeadNode' = pulumi.output_property("headNode")
    """
    A `head_node` block as defined above.
    """
    worker_node: 'outputs.StormClusterRolesWorkerNode' = pulumi.output_property("workerNode")
    """
    A `worker_node` block as defined below.
    """
    zookeeper_node: 'outputs.StormClusterRolesZookeeperNode' = pulumi.output_property("zookeeperNode")
    """
    A `zookeeper_node` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterRolesHeadNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterRolesWorkerNode(dict):
    min_instance_count: Optional[float] = pulumi.output_property("minInstanceCount")
    """
    The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    target_instance_count: float = pulumi.output_property("targetInstanceCount")
    """
    The number of instances which should be run for the Worker Nodes.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterRolesZookeeperNode(dict):
    password: Optional[str] = pulumi.output_property("password")
    """
    The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    ssh_keys: Optional[List[str]] = pulumi.output_property("sshKeys")
    """
    A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    subnet_id: Optional[str] = pulumi.output_property("subnetId")
    """
    The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    username: str = pulumi.output_property("username")
    """
    The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
    """
    virtual_network_id: Optional[str] = pulumi.output_property("virtualNetworkId")
    """
    The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
    """
    vm_size: str = pulumi.output_property("vmSize")
    """
    The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StormClusterStorageAccount(dict):
    is_default: bool = pulumi.output_property("isDefault")
    """
    Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
    """
    storage_account_key: str = pulumi.output_property("storageAccountKey")
    """
    The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
    """
    storage_container_id: str = pulumi.output_property("storageContainerId")
    """
    The ID of the Storage Container. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetClusterGateway(dict):
    enabled: bool = pulumi.output_property("enabled")
    """
    Is the Ambari Portal enabled?
    """
    password: str = pulumi.output_property("password")
    """
    The password used for the Ambari Portal.
    """
    username: str = pulumi.output_property("username")
    """
    The username used for the Ambari Portal.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


