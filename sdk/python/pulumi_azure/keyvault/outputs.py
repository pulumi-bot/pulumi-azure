# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'CertifiateCertificate',
    'CertifiateCertificateAttribute',
    'CertifiateCertificatePolicy',
    'CertifiateCertificatePolicyIssuerParameters',
    'CertifiateCertificatePolicyKeyProperties',
    'CertifiateCertificatePolicyLifetimeAction',
    'CertifiateCertificatePolicyLifetimeActionAction',
    'CertifiateCertificatePolicyLifetimeActionTrigger',
    'CertifiateCertificatePolicySecretProperties',
    'CertifiateCertificatePolicyX509CertificateProperties',
    'CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames',
    'CertificateCertificate',
    'CertificateCertificateAttribute',
    'CertificateCertificatePolicy',
    'CertificateCertificatePolicyIssuerParameters',
    'CertificateCertificatePolicyKeyProperties',
    'CertificateCertificatePolicyLifetimeAction',
    'CertificateCertificatePolicyLifetimeActionAction',
    'CertificateCertificatePolicyLifetimeActionTrigger',
    'CertificateCertificatePolicySecretProperties',
    'CertificateCertificatePolicyX509CertificateProperties',
    'CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames',
    'CertificateIssuerAdmin',
    'KeyVaultAccessPolicy',
    'KeyVaultNetworkAcls',
    'GetCertificateCertificatePolicy',
    'GetCertificateCertificatePolicyIssuerParameter',
    'GetCertificateCertificatePolicyKeyProperty',
    'GetCertificateCertificatePolicyLifetimeAction',
    'GetCertificateCertificatePolicyLifetimeActionAction',
    'GetCertificateCertificatePolicyLifetimeActionTrigger',
    'GetCertificateCertificatePolicySecretProperty',
    'GetCertificateCertificatePolicyX509CertificateProperty',
    'GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName',
    'GetCertificateIssuerAdmin',
    'GetKeyVaultAccessPolicy',
    'GetKeyVaultNetworkAcl',
]

@pulumi.output_type
class CertifiateCertificate(dict):
    contents: str = pulumi.output_property("contents")
    """
    The base64-encoded certificate contents. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the certificate. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificateAttribute(dict):
    created: Optional[str] = pulumi.output_property("created")
    """
    The create time of the Key Vault Certificate.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    whether the Key Vault Certificate is enabled.
    """
    expires: Optional[str] = pulumi.output_property("expires")
    """
    The expires time of the Key Vault Certificate.
    """
    not_before: Optional[str] = pulumi.output_property("notBefore")
    """
    The not before valid time of the Key Vault Certificate.
    """
    recovery_level: Optional[str] = pulumi.output_property("recoveryLevel")
    """
    The deletion recovery level of the Key Vault Certificate.
    """
    updated: Optional[str] = pulumi.output_property("updated")
    """
    The recent update time of the Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicy(dict):
    issuer_parameters: 'outputs.CertifiateCertificatePolicyIssuerParameters' = pulumi.output_property("issuerParameters")
    """
    A `issuer_parameters` block as defined below.
    """
    key_properties: 'outputs.CertifiateCertificatePolicyKeyProperties' = pulumi.output_property("keyProperties")
    """
    A `key_properties` block as defined below.
    """
    lifetime_actions: Optional[List['outputs.CertifiateCertificatePolicyLifetimeAction']] = pulumi.output_property("lifetimeActions")
    """
    A `lifetime_action` block as defined below.
    """
    secret_properties: 'outputs.CertifiateCertificatePolicySecretProperties' = pulumi.output_property("secretProperties")
    """
    A `secret_properties` block as defined below.
    """
    x509_certificate_properties: Optional['outputs.CertifiateCertificatePolicyX509CertificateProperties'] = pulumi.output_property("x509CertificateProperties")
    """
    A `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyIssuerParameters(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones). Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyKeyProperties(dict):
    exportable: bool = pulumi.output_property("exportable")
    """
    Is this Certificate Exportable? Changing this forces a new resource to be created.
    """
    key_size: float = pulumi.output_property("keySize")
    """
    The size of the Key used in the Certificate. Possible values include `2048` and `4096`. Changing this forces a new resource to be created.
    """
    key_type: str = pulumi.output_property("keyType")
    """
    Specifies the Type of Key, such as `RSA`. Changing this forces a new resource to be created.
    """
    reuse_key: bool = pulumi.output_property("reuseKey")
    """
    Is the key reusable? Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeAction(dict):
    action: 'outputs.CertifiateCertificatePolicyLifetimeActionAction' = pulumi.output_property("action")
    """
    A `action` block as defined below.
    """
    trigger: 'outputs.CertifiateCertificatePolicyLifetimeActionTrigger' = pulumi.output_property("trigger")
    """
    A `trigger` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeActionAction(dict):
    action_type: str = pulumi.output_property("actionType")
    """
    The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeActionTrigger(dict):
    days_before_expiry: Optional[float] = pulumi.output_property("daysBeforeExpiry")
    """
    The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `lifetime_percentage`.
    """
    lifetime_percentage: Optional[float] = pulumi.output_property("lifetimePercentage")
    """
    The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `days_before_expiry`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicySecretProperties(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyX509CertificateProperties(dict):
    extended_key_usages: Optional[List[str]] = pulumi.output_property("extendedKeyUsages")
    """
    A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
    """
    key_usages: List[str] = pulumi.output_property("keyUsages")
    """
    A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive. Changing this forces a new resource to be created.
    """
    subject: str = pulumi.output_property("subject")
    """
    The Certificate's Subject. Changing this forces a new resource to be created.
    """
    subject_alternative_names: Optional['outputs.CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames'] = pulumi.output_property("subjectAlternativeNames")
    """
    A `subject_alternative_names` block as defined below.
    """
    validity_in_months: float = pulumi.output_property("validityInMonths")
    """
    The Certificates Validity Period in Months. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames(dict):
    dns_names: Optional[List[str]] = pulumi.output_property("dnsNames")
    """
    A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
    """
    emails: Optional[List[str]] = pulumi.output_property("emails")
    """
    A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
    """
    upns: Optional[List[str]] = pulumi.output_property("upns")
    """
    A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificate(dict):
    contents: str = pulumi.output_property("contents")
    """
    The base64-encoded certificate contents. Changing this forces a new resource to be created.
    """
    password: Optional[str] = pulumi.output_property("password")
    """
    The password associated with the certificate. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificateAttribute(dict):
    created: Optional[str] = pulumi.output_property("created")
    """
    The create time of the Key Vault Certificate.
    """
    enabled: Optional[bool] = pulumi.output_property("enabled")
    """
    whether the Key Vault Certificate is enabled.
    """
    expires: Optional[str] = pulumi.output_property("expires")
    """
    The expires time of the Key Vault Certificate.
    """
    not_before: Optional[str] = pulumi.output_property("notBefore")
    """
    The not before valid time of the Key Vault Certificate.
    """
    recovery_level: Optional[str] = pulumi.output_property("recoveryLevel")
    """
    The deletion recovery level of the Key Vault Certificate.
    """
    updated: Optional[str] = pulumi.output_property("updated")
    """
    The recent update time of the Key Vault Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicy(dict):
    issuer_parameters: 'outputs.CertificateCertificatePolicyIssuerParameters' = pulumi.output_property("issuerParameters")
    """
    A `issuer_parameters` block as defined below.
    """
    key_properties: 'outputs.CertificateCertificatePolicyKeyProperties' = pulumi.output_property("keyProperties")
    """
    A `key_properties` block as defined below.
    """
    lifetime_actions: Optional[List['outputs.CertificateCertificatePolicyLifetimeAction']] = pulumi.output_property("lifetimeActions")
    """
    A `lifetime_action` block as defined below.
    """
    secret_properties: 'outputs.CertificateCertificatePolicySecretProperties' = pulumi.output_property("secretProperties")
    """
    A `secret_properties` block as defined below.
    """
    x509_certificate_properties: Optional['outputs.CertificateCertificatePolicyX509CertificateProperties'] = pulumi.output_property("x509CertificateProperties")
    """
    A `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyIssuerParameters(dict):
    name: str = pulumi.output_property("name")
    """
    The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones). Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyKeyProperties(dict):
    exportable: bool = pulumi.output_property("exportable")
    """
    Is this Certificate Exportable? Changing this forces a new resource to be created.
    """
    key_size: float = pulumi.output_property("keySize")
    """
    The size of the Key used in the Certificate. Possible values include `2048` and `4096`. Changing this forces a new resource to be created.
    """
    key_type: str = pulumi.output_property("keyType")
    """
    Specifies the Type of Key, such as `RSA`. Changing this forces a new resource to be created.
    """
    reuse_key: bool = pulumi.output_property("reuseKey")
    """
    Is the key reusable? Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeAction(dict):
    action: 'outputs.CertificateCertificatePolicyLifetimeActionAction' = pulumi.output_property("action")
    """
    A `action` block as defined below.
    """
    trigger: 'outputs.CertificateCertificatePolicyLifetimeActionTrigger' = pulumi.output_property("trigger")
    """
    A `trigger` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeActionAction(dict):
    action_type: str = pulumi.output_property("actionType")
    """
    The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeActionTrigger(dict):
    days_before_expiry: Optional[float] = pulumi.output_property("daysBeforeExpiry")
    """
    The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `lifetime_percentage`.
    """
    lifetime_percentage: Optional[float] = pulumi.output_property("lifetimePercentage")
    """
    The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `days_before_expiry`.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicySecretProperties(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyX509CertificateProperties(dict):
    extended_key_usages: Optional[List[str]] = pulumi.output_property("extendedKeyUsages")
    """
    A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
    """
    key_usages: List[str] = pulumi.output_property("keyUsages")
    """
    A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive. Changing this forces a new resource to be created.
    """
    subject: str = pulumi.output_property("subject")
    """
    The Certificate's Subject. Changing this forces a new resource to be created.
    """
    subject_alternative_names: Optional['outputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames'] = pulumi.output_property("subjectAlternativeNames")
    """
    A `subject_alternative_names` block as defined below.
    """
    validity_in_months: float = pulumi.output_property("validityInMonths")
    """
    The Certificates Validity Period in Months. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames(dict):
    dns_names: Optional[List[str]] = pulumi.output_property("dnsNames")
    """
    A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
    """
    emails: Optional[List[str]] = pulumi.output_property("emails")
    """
    A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
    """
    upns: Optional[List[str]] = pulumi.output_property("upns")
    """
    A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateIssuerAdmin(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    E-mail address of the admin.
    """
    first_name: Optional[str] = pulumi.output_property("firstName")
    """
    First name of the admin.
    """
    last_name: Optional[str] = pulumi.output_property("lastName")
    """
    Last name of the admin.
    """
    phone: Optional[str] = pulumi.output_property("phone")
    """
    Phone number of the admin.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultAccessPolicy(dict):
    application_id: Optional[str] = pulumi.output_property("applicationId")
    """
    The object ID of an Application in Azure Active Directory.
    """
    certificate_permissions: Optional[List[str]] = pulumi.output_property("certificatePermissions")
    """
    List of certificate permissions, must be one or more from the following: `backup`, `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`, `managecontacts`, `manageissuers`, `purge`, `recover`, `restore`, `setissuers` and `update`.
    """
    key_permissions: Optional[List[str]] = pulumi.output_property("keyPermissions")
    """
    List of key permissions, must be one or more from the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`, `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
    """
    object_id: str = pulumi.output_property("objectId")
    """
    The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
    """
    secret_permissions: Optional[List[str]] = pulumi.output_property("secretPermissions")
    """
    List of secret permissions, must be one or more from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
    """
    storage_permissions: Optional[List[str]] = pulumi.output_property("storagePermissions")
    """
    List of storage permissions, must be one or more from the following: `backup`, `delete`, `deletesas`, `get`, `getsas`, `list`, `listsas`, `purge`, `recover`, `regeneratekey`, `restore`, `set`, `setsas` and `update`.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenant_id` used above.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultNetworkAcls(dict):
    bypass: str = pulumi.output_property("bypass")
    """
    Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
    """
    default_action: str = pulumi.output_property("defaultAction")
    """
    The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`.
    """
    ip_rules: Optional[List[str]] = pulumi.output_property("ipRules")
    """
    One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
    """
    virtual_network_subnet_ids: Optional[List[str]] = pulumi.output_property("virtualNetworkSubnetIds")
    """
    One or more Subnet ID's which should be able to access this Key Vault.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicy(dict):
    issuer_parameters: List['outputs.GetCertificateCertificatePolicyIssuerParameter'] = pulumi.output_property("issuerParameters")
    """
    A `issuer_parameters` block as defined below.
    """
    key_properties: List['outputs.GetCertificateCertificatePolicyKeyProperty'] = pulumi.output_property("keyProperties")
    """
    A `key_properties` block as defined below.
    """
    lifetime_actions: Optional[List['outputs.GetCertificateCertificatePolicyLifetimeAction']] = pulumi.output_property("lifetimeActions")
    """
    A `lifetime_action` block as defined below.
    """
    secret_properties: List['outputs.GetCertificateCertificatePolicySecretProperty'] = pulumi.output_property("secretProperties")
    """
    A `secret_properties` block as defined below.
    """
    x509_certificate_properties: List['outputs.GetCertificateCertificatePolicyX509CertificateProperty'] = pulumi.output_property("x509CertificateProperties")
    """
    An `x509_certificate_properties` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyIssuerParameter(dict):
    name: str = pulumi.output_property("name")
    """
    Specifies the name of the Key Vault Secret.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyKeyProperty(dict):
    exportable: bool = pulumi.output_property("exportable")
    """
    Is this Certificate Exportable?
    """
    key_size: float = pulumi.output_property("keySize")
    """
    The size of the Key used in the Certificate.
    """
    key_type: str = pulumi.output_property("keyType")
    """
    Specifies the Type of Key, for example `RSA`.
    """
    reuse_key: bool = pulumi.output_property("reuseKey")
    """
    Is the key reusable?
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeAction(dict):
    actions: List['outputs.GetCertificateCertificatePolicyLifetimeActionAction'] = pulumi.output_property("actions")
    """
    A `action` block as defined below.
    """
    triggers: List['outputs.GetCertificateCertificatePolicyLifetimeActionTrigger'] = pulumi.output_property("triggers")
    """
    A `trigger` block as defined below.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeActionAction(dict):
    action_type: str = pulumi.output_property("actionType")
    """
    The Type of action to be performed when the lifetime trigger is triggerec.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeActionTrigger(dict):
    days_before_expiry: float = pulumi.output_property("daysBeforeExpiry")
    """
    The number of days before the Certificate expires that the action associated with this Trigger should run.
    """
    lifetime_percentage: float = pulumi.output_property("lifetimePercentage")
    """
    The percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicySecretProperty(dict):
    content_type: str = pulumi.output_property("contentType")
    """
    The Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyX509CertificateProperty(dict):
    extended_key_usages: List[str] = pulumi.output_property("extendedKeyUsages")
    """
    A list of Extended/Enhanced Key Usages.
    """
    key_usages: List[str] = pulumi.output_property("keyUsages")
    """
    A list of uses associated with this Key.
    """
    subject: str = pulumi.output_property("subject")
    """
    The Certificate's Subject.
    """
    subject_alternative_names: List['outputs.GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName'] = pulumi.output_property("subjectAlternativeNames")
    """
    A `subject_alternative_names` block as defined below.
    """
    validity_in_months: float = pulumi.output_property("validityInMonths")
    """
    The Certificates Validity Period in Months.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName(dict):
    dns_names: List[str] = pulumi.output_property("dnsNames")
    """
    A list of alternative DNS names (FQDNs) identified by the Certificate.
    """
    emails: List[str] = pulumi.output_property("emails")
    """
    A list of email addresses identified by this Certificate.
    """
    upns: List[str] = pulumi.output_property("upns")
    """
    A list of User Principal Names identified by the Certificate.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateIssuerAdmin(dict):
    email_address: str = pulumi.output_property("emailAddress")
    """
    E-mail address of the admin.
    """
    first_name: str = pulumi.output_property("firstName")
    """
    First name of the admin.
    """
    last_name: str = pulumi.output_property("lastName")
    """
    Last name of the admin.
    """
    phone: str = pulumi.output_property("phone")
    """
    Phone number of the admin.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKeyVaultAccessPolicy(dict):
    application_id: str = pulumi.output_property("applicationId")
    """
    The Object ID of a Azure Active Directory Application.
    """
    certificate_permissions: List[str] = pulumi.output_property("certificatePermissions")
    """
    A list of certificate permissions applicable to this Access Policy.
    """
    key_permissions: List[str] = pulumi.output_property("keyPermissions")
    """
    A list of key permissions applicable to this Access Policy.
    """
    object_id: str = pulumi.output_property("objectId")
    """
    An Object ID of a User, Service Principal or Security Group.
    """
    secret_permissions: List[str] = pulumi.output_property("secretPermissions")
    """
    A list of secret permissions applicable to this Access Policy.
    """
    storage_permissions: List[str] = pulumi.output_property("storagePermissions")
    """
    A list of storage permissions applicable to this Access Policy.
    """
    tenant_id: str = pulumi.output_property("tenantId")
    """
    The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKeyVaultNetworkAcl(dict):
    bypass: str = pulumi.output_property("bypass")
    default_action: str = pulumi.output_property("defaultAction")
    ip_rules: List[str] = pulumi.output_property("ipRules")
    virtual_network_subnet_ids: List[str] = pulumi.output_property("virtualNetworkSubnetIds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


