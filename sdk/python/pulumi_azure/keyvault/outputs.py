# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'CertifiateCertificate',
    'CertifiateCertificateAttribute',
    'CertifiateCertificatePolicy',
    'CertifiateCertificatePolicyIssuerParameters',
    'CertifiateCertificatePolicyKeyProperties',
    'CertifiateCertificatePolicyLifetimeAction',
    'CertifiateCertificatePolicyLifetimeActionAction',
    'CertifiateCertificatePolicyLifetimeActionTrigger',
    'CertifiateCertificatePolicySecretProperties',
    'CertifiateCertificatePolicyX509CertificateProperties',
    'CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames',
    'CertificateCertificate',
    'CertificateCertificateAttribute',
    'CertificateCertificatePolicy',
    'CertificateCertificatePolicyIssuerParameters',
    'CertificateCertificatePolicyKeyProperties',
    'CertificateCertificatePolicyLifetimeAction',
    'CertificateCertificatePolicyLifetimeActionAction',
    'CertificateCertificatePolicyLifetimeActionTrigger',
    'CertificateCertificatePolicySecretProperties',
    'CertificateCertificatePolicyX509CertificateProperties',
    'CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames',
    'CertificateIssuerAdmin',
    'KeyVaultAccessPolicy',
    'KeyVaultNetworkAcls',
    'GetCertificateCertificatePolicy',
    'GetCertificateCertificatePolicyIssuerParameter',
    'GetCertificateCertificatePolicyKeyProperty',
    'GetCertificateCertificatePolicyLifetimeAction',
    'GetCertificateCertificatePolicyLifetimeActionAction',
    'GetCertificateCertificatePolicyLifetimeActionTrigger',
    'GetCertificateCertificatePolicySecretProperty',
    'GetCertificateCertificatePolicyX509CertificateProperty',
    'GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName',
    'GetCertificateIssuerAdmin',
    'GetKeyVaultAccessPolicy',
    'GetKeyVaultNetworkAcl',
]

@pulumi.output_type
class CertifiateCertificate(dict):
    @property
    @pulumi.getter
    def contents(self) -> str:
        """
        The base64-encoded certificate contents. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password associated with the certificate. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificateAttribute(dict):
    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The create time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether the Key Vault Certificate is enabled.
        """
        ...

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        """
        The expires time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[str]:
        """
        The not before valid time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter(name="recoveryLevel")
    def recovery_level(self) -> Optional[str]:
        """
        The deletion recovery level of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter
    def updated(self) -> Optional[str]:
        """
        The recent update time of the Key Vault Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicy(dict):
    @property
    @pulumi.getter(name="issuerParameters")
    def issuer_parameters(self) -> 'outputs.CertifiateCertificatePolicyIssuerParameters':
        """
        A `issuer_parameters` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="keyProperties")
    def key_properties(self) -> 'outputs.CertifiateCertificatePolicyKeyProperties':
        """
        A `key_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="lifetimeActions")
    def lifetime_actions(self) -> Optional[List['outputs.CertifiateCertificatePolicyLifetimeAction']]:
        """
        A `lifetime_action` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="secretProperties")
    def secret_properties(self) -> 'outputs.CertifiateCertificatePolicySecretProperties':
        """
        A `secret_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="x509CertificateProperties")
    def x509_certificate_properties(self) -> Optional['outputs.CertifiateCertificatePolicyX509CertificateProperties']:
        """
        A `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyIssuerParameters(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones). Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyKeyProperties(dict):
    @property
    @pulumi.getter
    def exportable(self) -> bool:
        """
        Is this Certificate Exportable? Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> float:
        """
        The size of the Key used in the Certificate. Possible values include `2048` and `4096`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        """
        Specifies the Type of Key, such as `RSA`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="reuseKey")
    def reuse_key(self) -> bool:
        """
        Is the key reusable? Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeAction(dict):
    @property
    @pulumi.getter
    def action(self) -> 'outputs.CertifiateCertificatePolicyLifetimeActionAction':
        """
        A `action` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def trigger(self) -> 'outputs.CertifiateCertificatePolicyLifetimeActionTrigger':
        """
        A `trigger` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeActionAction(dict):
    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyLifetimeActionTrigger(dict):
    @property
    @pulumi.getter(name="daysBeforeExpiry")
    def days_before_expiry(self) -> Optional[float]:
        """
        The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `lifetime_percentage`.
        """
        ...

    @property
    @pulumi.getter(name="lifetimePercentage")
    def lifetime_percentage(self) -> Optional[float]:
        """
        The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `days_before_expiry`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicySecretProperties(dict):
    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyX509CertificateProperties(dict):
    @property
    @pulumi.getter(name="extendedKeyUsages")
    def extended_key_usages(self) -> Optional[List[str]]:
        """
        A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> List[str]:
        """
        A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The Certificate's Subject. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional['outputs.CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames']:
        """
        A `subject_alternative_names` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="validityInMonths")
    def validity_in_months(self) -> float:
        """
        The Certificates Validity Period in Months. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames(dict):
    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[List[str]]:
        """
        A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def emails(self) -> Optional[List[str]]:
        """
        A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def upns(self) -> Optional[List[str]]:
        """
        A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificate(dict):
    @property
    @pulumi.getter
    def contents(self) -> str:
        """
        The base64-encoded certificate contents. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password associated with the certificate. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificateAttribute(dict):
    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The create time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether the Key Vault Certificate is enabled.
        """
        ...

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        """
        The expires time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[str]:
        """
        The not before valid time of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter(name="recoveryLevel")
    def recovery_level(self) -> Optional[str]:
        """
        The deletion recovery level of the Key Vault Certificate.
        """
        ...

    @property
    @pulumi.getter
    def updated(self) -> Optional[str]:
        """
        The recent update time of the Key Vault Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicy(dict):
    @property
    @pulumi.getter(name="issuerParameters")
    def issuer_parameters(self) -> 'outputs.CertificateCertificatePolicyIssuerParameters':
        """
        A `issuer_parameters` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="keyProperties")
    def key_properties(self) -> 'outputs.CertificateCertificatePolicyKeyProperties':
        """
        A `key_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="lifetimeActions")
    def lifetime_actions(self) -> Optional[List['outputs.CertificateCertificatePolicyLifetimeAction']]:
        """
        A `lifetime_action` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="secretProperties")
    def secret_properties(self) -> 'outputs.CertificateCertificatePolicySecretProperties':
        """
        A `secret_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="x509CertificateProperties")
    def x509_certificate_properties(self) -> Optional['outputs.CertificateCertificatePolicyX509CertificateProperties']:
        """
        A `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyIssuerParameters(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones). Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyKeyProperties(dict):
    @property
    @pulumi.getter
    def exportable(self) -> bool:
        """
        Is this Certificate Exportable? Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> float:
        """
        The size of the Key used in the Certificate. Possible values include `2048` and `4096`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        """
        Specifies the Type of Key, such as `RSA`. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="reuseKey")
    def reuse_key(self) -> bool:
        """
        Is the key reusable? Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeAction(dict):
    @property
    @pulumi.getter
    def action(self) -> 'outputs.CertificateCertificatePolicyLifetimeActionAction':
        """
        A `action` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def trigger(self) -> 'outputs.CertificateCertificatePolicyLifetimeActionTrigger':
        """
        A `trigger` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeActionAction(dict):
    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyLifetimeActionTrigger(dict):
    @property
    @pulumi.getter(name="daysBeforeExpiry")
    def days_before_expiry(self) -> Optional[float]:
        """
        The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `lifetime_percentage`.
        """
        ...

    @property
    @pulumi.getter(name="lifetimePercentage")
    def lifetime_percentage(self) -> Optional[float]:
        """
        The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with `days_before_expiry`.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicySecretProperties(dict):
    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyX509CertificateProperties(dict):
    @property
    @pulumi.getter(name="extendedKeyUsages")
    def extended_key_usages(self) -> Optional[List[str]]:
        """
        A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> List[str]:
        """
        A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The Certificate's Subject. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional['outputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames']:
        """
        A `subject_alternative_names` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="validityInMonths")
    def validity_in_months(self) -> float:
        """
        The Certificates Validity Period in Months. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames(dict):
    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[List[str]]:
        """
        A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def emails(self) -> Optional[List[str]]:
        """
        A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
        """
        ...

    @property
    @pulumi.getter
    def upns(self) -> Optional[List[str]]:
        """
        A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CertificateIssuerAdmin(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        E-mail address of the admin.
        """
        ...

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name of the admin.
        """
        ...

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name of the admin.
        """
        ...

    @property
    @pulumi.getter
    def phone(self) -> Optional[str]:
        """
        Phone number of the admin.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultAccessPolicy(dict):
    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        The object ID of an Application in Azure Active Directory.
        """
        ...

    @property
    @pulumi.getter(name="certificatePermissions")
    def certificate_permissions(self) -> Optional[List[str]]:
        """
        List of certificate permissions, must be one or more from the following: `backup`, `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`, `managecontacts`, `manageissuers`, `purge`, `recover`, `restore`, `setissuers` and `update`.
        """
        ...

    @property
    @pulumi.getter(name="keyPermissions")
    def key_permissions(self) -> Optional[List[str]]:
        """
        List of key permissions, must be one or more from the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`, `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
        """
        ...

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        """
        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
        """
        ...

    @property
    @pulumi.getter(name="secretPermissions")
    def secret_permissions(self) -> Optional[List[str]]:
        """
        List of secret permissions, must be one or more from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
        """
        ...

    @property
    @pulumi.getter(name="storagePermissions")
    def storage_permissions(self) -> Optional[List[str]]:
        """
        List of storage permissions, must be one or more from the following: `backup`, `delete`, `deletesas`, `get`, `getsas`, `list`, `listsas`, `purge`, `recover`, `regeneratekey`, `restore`, `set`, `setsas` and `update`.
        """
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenant_id` used above.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultNetworkAcls(dict):
    @property
    @pulumi.getter
    def bypass(self) -> str:
        """
        Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
        """
        ...

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        """
        The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`.
        """
        ...

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[List[str]]:
        """
        One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
        """
        ...

    @property
    @pulumi.getter(name="virtualNetworkSubnetIds")
    def virtual_network_subnet_ids(self) -> Optional[List[str]]:
        """
        One or more Subnet ID's which should be able to access this Key Vault.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicy(dict):
    @property
    @pulumi.getter(name="issuerParameters")
    def issuer_parameters(self) -> List['outputs.GetCertificateCertificatePolicyIssuerParameter']:
        """
        A `issuer_parameters` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="keyProperties")
    def key_properties(self) -> List['outputs.GetCertificateCertificatePolicyKeyProperty']:
        """
        A `key_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="lifetimeActions")
    def lifetime_actions(self) -> Optional[List['outputs.GetCertificateCertificatePolicyLifetimeAction']]:
        """
        A `lifetime_action` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="secretProperties")
    def secret_properties(self) -> List['outputs.GetCertificateCertificatePolicySecretProperty']:
        """
        A `secret_properties` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="x509CertificateProperties")
    def x509_certificate_properties(self) -> List['outputs.GetCertificateCertificatePolicyX509CertificateProperty']:
        """
        An `x509_certificate_properties` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyIssuerParameter(dict):
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the Key Vault Secret.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyKeyProperty(dict):
    @property
    @pulumi.getter
    def exportable(self) -> bool:
        """
        Is this Certificate Exportable?
        """
        ...

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> float:
        """
        The size of the Key used in the Certificate.
        """
        ...

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        """
        Specifies the Type of Key, for example `RSA`.
        """
        ...

    @property
    @pulumi.getter(name="reuseKey")
    def reuse_key(self) -> bool:
        """
        Is the key reusable?
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeAction(dict):
    @property
    @pulumi.getter
    def actions(self) -> List['outputs.GetCertificateCertificatePolicyLifetimeActionAction']:
        """
        A `action` block as defined below.
        """
        ...

    @property
    @pulumi.getter
    def triggers(self) -> List['outputs.GetCertificateCertificatePolicyLifetimeActionTrigger']:
        """
        A `trigger` block as defined below.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeActionAction(dict):
    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The Type of action to be performed when the lifetime trigger is triggerec.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyLifetimeActionTrigger(dict):
    @property
    @pulumi.getter(name="daysBeforeExpiry")
    def days_before_expiry(self) -> float:
        """
        The number of days before the Certificate expires that the action associated with this Trigger should run.
        """
        ...

    @property
    @pulumi.getter(name="lifetimePercentage")
    def lifetime_percentage(self) -> float:
        """
        The percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicySecretProperty(dict):
    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyX509CertificateProperty(dict):
    @property
    @pulumi.getter(name="extendedKeyUsages")
    def extended_key_usages(self) -> List[str]:
        """
        A list of Extended/Enhanced Key Usages.
        """
        ...

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> List[str]:
        """
        A list of uses associated with this Key.
        """
        ...

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The Certificate's Subject.
        """
        ...

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> List['outputs.GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName']:
        """
        A `subject_alternative_names` block as defined below.
        """
        ...

    @property
    @pulumi.getter(name="validityInMonths")
    def validity_in_months(self) -> float:
        """
        The Certificates Validity Period in Months.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName(dict):
    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> List[str]:
        """
        A list of alternative DNS names (FQDNs) identified by the Certificate.
        """
        ...

    @property
    @pulumi.getter
    def emails(self) -> List[str]:
        """
        A list of email addresses identified by this Certificate.
        """
        ...

    @property
    @pulumi.getter
    def upns(self) -> List[str]:
        """
        A list of User Principal Names identified by the Certificate.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetCertificateIssuerAdmin(dict):
    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        E-mail address of the admin.
        """
        ...

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        First name of the admin.
        """
        ...

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Last name of the admin.
        """
        ...

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        Phone number of the admin.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKeyVaultAccessPolicy(dict):
    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The Object ID of a Azure Active Directory Application.
        """
        ...

    @property
    @pulumi.getter(name="certificatePermissions")
    def certificate_permissions(self) -> List[str]:
        """
        A list of certificate permissions applicable to this Access Policy.
        """
        ...

    @property
    @pulumi.getter(name="keyPermissions")
    def key_permissions(self) -> List[str]:
        """
        A list of key permissions applicable to this Access Policy.
        """
        ...

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        """
        An Object ID of a User, Service Principal or Security Group.
        """
        ...

    @property
    @pulumi.getter(name="secretPermissions")
    def secret_permissions(self) -> List[str]:
        """
        A list of secret permissions applicable to this Access Policy.
        """
        ...

    @property
    @pulumi.getter(name="storagePermissions")
    def storage_permissions(self) -> List[str]:
        """
        A list of storage permissions applicable to this Access Policy.
        """
        ...

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetKeyVaultNetworkAcl(dict):
    @property
    @pulumi.getter
    def bypass(self) -> str:
        ...

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> str:
        ...

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> List[str]:
        ...

    @property
    @pulumi.getter(name="virtualNetworkSubnetIds")
    def virtual_network_subnet_ids(self) -> List[str]:
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


