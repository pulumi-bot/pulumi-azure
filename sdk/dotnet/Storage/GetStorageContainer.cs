// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetStorageContainer
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Container.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Storage.GetStorageContainer.InvokeAsync(new Azure.Storage.GetStorageContainerArgs
        ///         {
        ///             Name = "example-container-name",
        ///             StorageAccountName = "example-storage-account-name",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStorageContainerResult> InvokeAsync(GetStorageContainerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStorageContainerResult>("azure:storage/getStorageContainer:getStorageContainer", args ?? new GetStorageContainerArgs(), options.WithVersion());

        public static Output<GetStorageContainerResult> Apply(GetStorageContainerApplyArgs args, InvokeOptions? options = null)
        {
            return Pulumi.Output.All(
                args.Metadata.Box(),
                args.Name.Box(),
                args.StorageAccountName.Box()
            ).Apply(a => {
                    var args = new GetStorageContainerArgs();
                    a[0].Set(args, nameof(args.Metadata));
                    a[1].Set(args, nameof(args.Name));
                    a[2].Set(args, nameof(args.StorageAccountName));
                    return InvokeAsync(args, options);
            });
        }
    }


    public sealed class GetStorageContainerArgs : Pulumi.InvokeArgs
    {
        [Input("metadata")]
        private Dictionary<string, string>? _metadata;

        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public Dictionary<string, string> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Container.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Container exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public string StorageAccountName { get; set; } = null!;

        public GetStorageContainerArgs()
        {
        }
    }

    public sealed class GetStorageContainerApplyArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Container exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        public GetStorageContainerApplyArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStorageContainerResult
    {
        /// <summary>
        /// The Access Level configured for this Container.
        /// </summary>
        public readonly string ContainerAccessType;
        /// <summary>
        /// Is there an Immutability Policy configured on this Storage Container?
        /// </summary>
        public readonly bool HasImmutabilityPolicy;
        /// <summary>
        /// Is there a Legal Hold configured on this Storage Container?
        /// </summary>
        public readonly bool HasLegalHold;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly string Name;
        /// <summary>
        /// The Resource Manager ID of this Storage Container.
        /// </summary>
        public readonly string ResourceManagerId;
        public readonly string StorageAccountName;

        [OutputConstructor]
        private GetStorageContainerResult(
            string containerAccessType,

            bool hasImmutabilityPolicy,

            bool hasLegalHold,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            string resourceManagerId,

            string storageAccountName)
        {
            ContainerAccessType = containerAccessType;
            HasImmutabilityPolicy = hasImmutabilityPolicy;
            HasLegalHold = hasLegalHold;
            Id = id;
            Metadata = metadata;
            Name = name;
            ResourceManagerId = resourceManagerId;
            StorageAccountName = storageAccountName;
        }
    }
}
