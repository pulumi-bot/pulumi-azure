// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azure:loganalytics/cluster:Cluster":
		r, err = NewCluster(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/clusterCustomerManagedKey:ClusterCustomerManagedKey":
		r, err = NewClusterCustomerManagedKey(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/dataExportRule:DataExportRule":
		r, err = NewDataExportRule(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/dataSourceWindowsEvent:DataSourceWindowsEvent":
		r, err = NewDataSourceWindowsEvent(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter":
		r, err = NewDataSourceWindowsPerformanceCounter(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/linkedService:LinkedService":
		r, err = NewLinkedService(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/linkedStorageAccount:LinkedStorageAccount":
		r, err = NewLinkedStorageAccount(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/savedSearch:SavedSearch":
		r, err = NewSavedSearch(ctx, name, nil, pulumi.URN_(urn))
	case "azure:loganalytics/storageInsights:StorageInsights":
		r, err = NewStorageInsights(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := azure.PkgVersion()
	if err != nil {
		panic(fmt.Errorf("failed to determine package version: %v", err))
	}
	pulumi.RegisterResourceModule(
		"azure",
		"loganalytics/cluster",
		&module{version},
	)
}
