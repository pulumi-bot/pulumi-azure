// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Links a Log Analytics (formally Operational Insights) Workspace to another resource. The (currently) only linkable service is an Azure Automation Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/automation"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/loganalytics"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/operationalinsights"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := automation.NewAccount(ctx, "exampleAccount", &automation.AccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			SkuName:           pulumi.String("Basic"),
// 			Tags: pulumi.StringMap{
// 				"environment": pulumi.String("development"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Sku:               pulumi.String("PerGB2018"),
// 			RetentionInDays:   pulumi.Int(30),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = loganalytics.NewLinkedService(ctx, "exampleLinkedService", &loganalytics.LinkedServiceArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			WorkspaceName:     exampleAnalyticsWorkspace.Name,
// 			ResourceId:        exampleAccount.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log Analytics Workspaces can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:loganalytics/linkedService:LinkedService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/linkedservices/automation
// ```
type LinkedService struct {
	pulumi.CustomResourceState

	// Name of the type of linkedServices resource to connect to the Log Analytics Workspace specified in `workspaceName`. Currently it defaults to and only supports `automation` as a value. Changing this forces a new resource to be created.
	LinkedServiceName pulumi.StringPtrOutput `pulumi:"linkedServiceName"`
	// The automatically generated name of the Linked Service. This cannot be specified. The format is always `<workspace_name>/<linked_service_name>` e.g. `workspace1/Automation`
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which the Log Analytics Linked Service is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Resource that will be linked to the workspace. Changing this forces a new resource to be created.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Name of the Log Analytics Workspace that will contain the linkedServices resource. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`
}

// NewLinkedService registers a new resource with the given unique name, arguments, and options.
func NewLinkedService(ctx *pulumi.Context,
	name string, args *LinkedServiceArgs, opts ...pulumi.ResourceOption) (*LinkedService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	var resource LinkedService
	err := ctx.RegisterResource("azure:loganalytics/linkedService:LinkedService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedService gets an existing LinkedService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceState, opts ...pulumi.ResourceOption) (*LinkedService, error) {
	var resource LinkedService
	err := ctx.ReadResource("azure:loganalytics/linkedService:LinkedService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedService resources.
type linkedServiceState struct {
	// Name of the type of linkedServices resource to connect to the Log Analytics Workspace specified in `workspaceName`. Currently it defaults to and only supports `automation` as a value. Changing this forces a new resource to be created.
	LinkedServiceName *string `pulumi:"linkedServiceName"`
	// The automatically generated name of the Linked Service. This cannot be specified. The format is always `<workspace_name>/<linked_service_name>` e.g. `workspace1/Automation`
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Log Analytics Linked Service is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Resource that will be linked to the workspace. Changing this forces a new resource to be created.
	ResourceId *string `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Name of the Log Analytics Workspace that will contain the linkedServices resource. Changing this forces a new resource to be created.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type LinkedServiceState struct {
	// Name of the type of linkedServices resource to connect to the Log Analytics Workspace specified in `workspaceName`. Currently it defaults to and only supports `automation` as a value. Changing this forces a new resource to be created.
	LinkedServiceName pulumi.StringPtrInput
	// The automatically generated name of the Linked Service. This cannot be specified. The format is always `<workspace_name>/<linked_service_name>` e.g. `workspace1/Automation`
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Log Analytics Linked Service is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Resource that will be linked to the workspace. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Name of the Log Analytics Workspace that will contain the linkedServices resource. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringPtrInput
}

func (LinkedServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceState)(nil)).Elem()
}

type linkedServiceArgs struct {
	// Name of the type of linkedServices resource to connect to the Log Analytics Workspace specified in `workspaceName`. Currently it defaults to and only supports `automation` as a value. Changing this forces a new resource to be created.
	LinkedServiceName *string `pulumi:"linkedServiceName"`
	// The name of the resource group in which the Log Analytics Linked Service is created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Resource that will be linked to the workspace. Changing this forces a new resource to be created.
	ResourceId string `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Name of the Log Analytics Workspace that will contain the linkedServices resource. Changing this forces a new resource to be created.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a LinkedService resource.
type LinkedServiceArgs struct {
	// Name of the type of linkedServices resource to connect to the Log Analytics Workspace specified in `workspaceName`. Currently it defaults to and only supports `automation` as a value. Changing this forces a new resource to be created.
	LinkedServiceName pulumi.StringPtrInput
	// The name of the resource group in which the Log Analytics Linked Service is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Resource that will be linked to the workspace. Changing this forces a new resource to be created.
	ResourceId pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Name of the Log Analytics Workspace that will contain the linkedServices resource. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringInput
}

func (LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceArgs)(nil)).Elem()
}

type LinkedServiceInput interface {
	pulumi.Input

	ToLinkedServiceOutput() LinkedServiceOutput
	ToLinkedServiceOutputWithContext(ctx context.Context) LinkedServiceOutput
}

func (*LinkedService) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedService)(nil))
}

func (i *LinkedService) ToLinkedServiceOutput() LinkedServiceOutput {
	return i.ToLinkedServiceOutputWithContext(context.Background())
}

func (i *LinkedService) ToLinkedServiceOutputWithContext(ctx context.Context) LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceOutput)
}

func (i *LinkedService) ToLinkedServicePtrOutput() LinkedServicePtrOutput {
	return i.ToLinkedServicePtrOutputWithContext(context.Background())
}

func (i *LinkedService) ToLinkedServicePtrOutputWithContext(ctx context.Context) LinkedServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePtrOutput)
}

type LinkedServicePtrInput interface {
	pulumi.Input

	ToLinkedServicePtrOutput() LinkedServicePtrOutput
	ToLinkedServicePtrOutputWithContext(ctx context.Context) LinkedServicePtrOutput
}

type linkedServicePtrType LinkedServiceArgs

func (*linkedServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedService)(nil))
}

func (i *linkedServicePtrType) ToLinkedServicePtrOutput() LinkedServicePtrOutput {
	return i.ToLinkedServicePtrOutputWithContext(context.Background())
}

func (i *linkedServicePtrType) ToLinkedServicePtrOutputWithContext(ctx context.Context) LinkedServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceOutput).ToLinkedServicePtrOutput()
}

// LinkedServiceArrayInput is an input type that accepts LinkedServiceArray and LinkedServiceArrayOutput values.
// You can construct a concrete instance of `LinkedServiceArrayInput` via:
//
//          LinkedServiceArray{ LinkedServiceArgs{...} }
type LinkedServiceArrayInput interface {
	pulumi.Input

	ToLinkedServiceArrayOutput() LinkedServiceArrayOutput
	ToLinkedServiceArrayOutputWithContext(context.Context) LinkedServiceArrayOutput
}

type LinkedServiceArray []LinkedServiceInput

func (LinkedServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedService)(nil))
}

func (i LinkedServiceArray) ToLinkedServiceArrayOutput() LinkedServiceArrayOutput {
	return i.ToLinkedServiceArrayOutputWithContext(context.Background())
}

func (i LinkedServiceArray) ToLinkedServiceArrayOutputWithContext(ctx context.Context) LinkedServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceArrayOutput)
}

// LinkedServiceMapInput is an input type that accepts LinkedServiceMap and LinkedServiceMapOutput values.
// You can construct a concrete instance of `LinkedServiceMapInput` via:
//
//          LinkedServiceMap{ "key": LinkedServiceArgs{...} }
type LinkedServiceMapInput interface {
	pulumi.Input

	ToLinkedServiceMapOutput() LinkedServiceMapOutput
	ToLinkedServiceMapOutputWithContext(context.Context) LinkedServiceMapOutput
}

type LinkedServiceMap map[string]LinkedServiceInput

func (LinkedServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LinkedService)(nil))
}

func (i LinkedServiceMap) ToLinkedServiceMapOutput() LinkedServiceMapOutput {
	return i.ToLinkedServiceMapOutputWithContext(context.Background())
}

func (i LinkedServiceMap) ToLinkedServiceMapOutputWithContext(ctx context.Context) LinkedServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceMapOutput)
}

type LinkedServiceOutput struct {
	*pulumi.OutputState
}

func (LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedService)(nil))
}

func (o LinkedServiceOutput) ToLinkedServiceOutput() LinkedServiceOutput {
	return o
}

func (o LinkedServiceOutput) ToLinkedServiceOutputWithContext(ctx context.Context) LinkedServiceOutput {
	return o
}

func (o LinkedServiceOutput) ToLinkedServicePtrOutput() LinkedServicePtrOutput {
	return o.ToLinkedServicePtrOutputWithContext(context.Background())
}

func (o LinkedServiceOutput) ToLinkedServicePtrOutputWithContext(ctx context.Context) LinkedServicePtrOutput {
	return o.ApplyT(func(v LinkedService) *LinkedService {
		return &v
	}).(LinkedServicePtrOutput)
}

type LinkedServicePtrOutput struct {
	*pulumi.OutputState
}

func (LinkedServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedService)(nil))
}

func (o LinkedServicePtrOutput) ToLinkedServicePtrOutput() LinkedServicePtrOutput {
	return o
}

func (o LinkedServicePtrOutput) ToLinkedServicePtrOutputWithContext(ctx context.Context) LinkedServicePtrOutput {
	return o
}

type LinkedServiceArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedService)(nil))
}

func (o LinkedServiceArrayOutput) ToLinkedServiceArrayOutput() LinkedServiceArrayOutput {
	return o
}

func (o LinkedServiceArrayOutput) ToLinkedServiceArrayOutputWithContext(ctx context.Context) LinkedServiceArrayOutput {
	return o
}

func (o LinkedServiceArrayOutput) Index(i pulumi.IntInput) LinkedServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedService {
		return vs[0].([]LinkedService)[vs[1].(int)]
	}).(LinkedServiceOutput)
}

type LinkedServiceMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LinkedService)(nil))
}

func (o LinkedServiceMapOutput) ToLinkedServiceMapOutput() LinkedServiceMapOutput {
	return o
}

func (o LinkedServiceMapOutput) ToLinkedServiceMapOutputWithContext(ctx context.Context) LinkedServiceMapOutput {
	return o
}

func (o LinkedServiceMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LinkedService {
		return vs[0].(map[string]LinkedService)[vs[1].(string)]
	}).(LinkedServiceOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkedServiceOutput{})
	pulumi.RegisterOutputType(LinkedServicePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceMapOutput{})
}
