// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Route Table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := network.LookupRouteTable(ctx, &network.LookupRouteTableArgs{
// 			Name:              "myroutetable",
// 			ResourceGroupName: "some-resource-group",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRouteTable(ctx *pulumi.Context, args *LookupRouteTableArgs, opts ...pulumi.InvokeOption) (*LookupRouteTableResult, error) {
	var rv LookupRouteTableResult
	err := ctx.Invoke("azure:network/getRouteTable:getRouteTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableArgs struct {
	// The name of the Route Table.
	Name string `pulumi:"name"`
	// The name of the Resource Group in which the Route Table exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region in which the Route Table exists.
	Location string `pulumi:"location"`
	// The name of the Route.
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `route` blocks as documented below.
	Routes []GetRouteTableRoute `pulumi:"routes"`
	// The collection of Subnets associated with this route table.
	Subnets []string `pulumi:"subnets"`
	// A mapping of tags assigned to the Route Table.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRouteTableApply(ctx *pulumi.Context, args LookupRouteTableApplyInput, opts ...pulumi.InvokeOption) LookupRouteTableResultOutput {
	return args.ToLookupRouteTableApplyOutput().ApplyT(func(v LookupRouteTableArgs) (LookupRouteTableResult, error) {
		r, err := LookupRouteTable(ctx, &v, opts...)
		return *r, err

	}).(LookupRouteTableResultOutput)
}

// LookupRouteTableApplyInput is an input type that accepts LookupRouteTableApplyArgs and LookupRouteTableApplyOutput values.
// You can construct a concrete instance of `LookupRouteTableApplyInput` via:
//
//          LookupRouteTableApplyArgs{...}
type LookupRouteTableApplyInput interface {
	pulumi.Input

	ToLookupRouteTableApplyOutput() LookupRouteTableApplyOutput
	ToLookupRouteTableApplyOutputWithContext(context.Context) LookupRouteTableApplyOutput
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableApplyArgs struct {
	// The name of the Route Table.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the Route Table exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupRouteTableApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableArgs)(nil)).Elem()
}

func (i LookupRouteTableApplyArgs) ToLookupRouteTableApplyOutput() LookupRouteTableApplyOutput {
	return i.ToLookupRouteTableApplyOutputWithContext(context.Background())
}

func (i LookupRouteTableApplyArgs) ToLookupRouteTableApplyOutputWithContext(ctx context.Context) LookupRouteTableApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupRouteTableApplyOutput)
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableApplyOutput struct{ *pulumi.OutputState }

func (LookupRouteTableApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableArgs)(nil)).Elem()
}

func (o LookupRouteTableApplyOutput) ToLookupRouteTableApplyOutput() LookupRouteTableApplyOutput {
	return o
}

func (o LookupRouteTableApplyOutput) ToLookupRouteTableApplyOutputWithContext(ctx context.Context) LookupRouteTableApplyOutput {
	return o
}

// The name of the Route Table.
func (o LookupRouteTableApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the Route Table exists.
func (o LookupRouteTableApplyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableArgs) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResultOutput struct{ *pulumi.OutputState }

func (LookupRouteTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableResult)(nil)).Elem()
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutput() LookupRouteTableResultOutput {
	return o
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutputWithContext(ctx context.Context) LookupRouteTableResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRouteTableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region in which the Route Table exists.
func (o LookupRouteTableResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the Route.
func (o LookupRouteTableResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRouteTableResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `route` blocks as documented below.
func (o LookupRouteTableResultOutput) Routes() GetRouteTableRouteArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableRoute { return v.Routes }).(GetRouteTableRouteArrayOutput)
}

// The collection of Subnets associated with this route table.
func (o LookupRouteTableResultOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// A mapping of tags assigned to the Route Table.
func (o LookupRouteTableResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRouteTableResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteTableApplyOutput{})
	pulumi.RegisterOutputType(LookupRouteTableResultOutput{})
}
