// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access the ID of a specified Traffic Manager Geographical Location within the Geographical Hierarchy.
//
// ## Example Usage
// ### World)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := network.GetTrafficManager(ctx, &network.GetTrafficManagerArgs{
// 			Name: "World",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("locationCode", example.Id)
// 		return nil
// 	})
// }
// ```
//
// Deprecated: azure.trafficmanager.getGeographicalLocation has been deprecated in favor of azure.network.getTrafficManager
func GetGeographicalLocation(ctx *pulumi.Context, args *GetGeographicalLocationArgs, opts ...pulumi.InvokeOption) (*GetGeographicalLocationResult, error) {
	var rv GetGeographicalLocationResult
	err := ctx.Invoke("azure:trafficmanager/getGeographicalLocation:getGeographicalLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGeographicalLocation.
type GetGeographicalLocationArgs struct {
	// Specifies the name of the Location, for example `World`, `Europe` or `Germany`.
	Name string `pulumi:"name"`
}

// A collection of values returned by getGeographicalLocation.
type GetGeographicalLocationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func GetGeographicalLocationApply(ctx *pulumi.Context, args GetGeographicalLocationApplyInput, opts ...pulumi.InvokeOption) GetGeographicalLocationResultOutput {
	return args.ToGetGeographicalLocationApplyOutput().ApplyT(func(v GetGeographicalLocationArgs) (GetGeographicalLocationResult, error) {
		r, err := GetGeographicalLocation(ctx, &v, opts...)
		return *r, err

	}).(GetGeographicalLocationResultOutput)
}

// GetGeographicalLocationApplyInput is an input type that accepts GetGeographicalLocationApplyArgs and GetGeographicalLocationApplyOutput values.
// You can construct a concrete instance of `GetGeographicalLocationApplyInput` via:
//
//          GetGeographicalLocationApplyArgs{...}
type GetGeographicalLocationApplyInput interface {
	pulumi.Input

	ToGetGeographicalLocationApplyOutput() GetGeographicalLocationApplyOutput
	ToGetGeographicalLocationApplyOutputWithContext(context.Context) GetGeographicalLocationApplyOutput
}

// A collection of arguments for invoking getGeographicalLocation.
type GetGeographicalLocationApplyArgs struct {
	// Specifies the name of the Location, for example `World`, `Europe` or `Germany`.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetGeographicalLocationApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeographicalLocationArgs)(nil)).Elem()
}

func (i GetGeographicalLocationApplyArgs) ToGetGeographicalLocationApplyOutput() GetGeographicalLocationApplyOutput {
	return i.ToGetGeographicalLocationApplyOutputWithContext(context.Background())
}

func (i GetGeographicalLocationApplyArgs) ToGetGeographicalLocationApplyOutputWithContext(ctx context.Context) GetGeographicalLocationApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGeographicalLocationApplyOutput)
}

// A collection of arguments for invoking getGeographicalLocation.
type GetGeographicalLocationApplyOutput struct{ *pulumi.OutputState }

func (GetGeographicalLocationApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeographicalLocationArgs)(nil)).Elem()
}

func (o GetGeographicalLocationApplyOutput) ToGetGeographicalLocationApplyOutput() GetGeographicalLocationApplyOutput {
	return o
}

func (o GetGeographicalLocationApplyOutput) ToGetGeographicalLocationApplyOutputWithContext(ctx context.Context) GetGeographicalLocationApplyOutput {
	return o
}

// Specifies the name of the Location, for example `World`, `Europe` or `Germany`.
func (o GetGeographicalLocationApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeographicalLocationArgs) string { return v.Name }).(pulumi.StringOutput)
}

// A collection of values returned by getGeographicalLocation.
type GetGeographicalLocationResultOutput struct{ *pulumi.OutputState }

func (GetGeographicalLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeographicalLocationResult)(nil)).Elem()
}

func (o GetGeographicalLocationResultOutput) ToGetGeographicalLocationResultOutput() GetGeographicalLocationResultOutput {
	return o
}

func (o GetGeographicalLocationResultOutput) ToGetGeographicalLocationResultOutputWithContext(ctx context.Context) GetGeographicalLocationResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetGeographicalLocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeographicalLocationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGeographicalLocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeographicalLocationResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGeographicalLocationApplyOutput{})
	pulumi.RegisterOutputType(GetGeographicalLocationResultOutput{})
}
