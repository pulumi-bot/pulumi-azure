// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Virtual Desktop Workspace Application Group Association.
type WorkspaceApplicationGroupAssociation struct {
	pulumi.CustomResourceState

	// The resource ID for the Virtual Desktop Application Group.
	ApplicationGroupId pulumi.StringOutput `pulumi:"applicationGroupId"`
	// The resource ID for the Virtual Desktop Workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceApplicationGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceApplicationGroupAssociation(ctx *pulumi.Context,
	name string, args *WorkspaceApplicationGroupAssociationArgs, opts ...pulumi.ResourceOption) (*WorkspaceApplicationGroupAssociation, error) {
	if args == nil || args.ApplicationGroupId == nil {
		return nil, errors.New("missing required argument 'ApplicationGroupId'")
	}
	if args == nil || args.WorkspaceId == nil {
		return nil, errors.New("missing required argument 'WorkspaceId'")
	}
	if args == nil {
		args = &WorkspaceApplicationGroupAssociationArgs{}
	}
	var resource WorkspaceApplicationGroupAssociation
	err := ctx.RegisterResource("azure:desktopvirtualization/workspaceApplicationGroupAssociation:WorkspaceApplicationGroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceApplicationGroupAssociation gets an existing WorkspaceApplicationGroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceApplicationGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceApplicationGroupAssociationState, opts ...pulumi.ResourceOption) (*WorkspaceApplicationGroupAssociation, error) {
	var resource WorkspaceApplicationGroupAssociation
	err := ctx.ReadResource("azure:desktopvirtualization/workspaceApplicationGroupAssociation:WorkspaceApplicationGroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceApplicationGroupAssociation resources.
type workspaceApplicationGroupAssociationState struct {
	// The resource ID for the Virtual Desktop Application Group.
	ApplicationGroupId *string `pulumi:"applicationGroupId"`
	// The resource ID for the Virtual Desktop Workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceApplicationGroupAssociationState struct {
	// The resource ID for the Virtual Desktop Application Group.
	ApplicationGroupId pulumi.StringPtrInput
	// The resource ID for the Virtual Desktop Workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceApplicationGroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApplicationGroupAssociationState)(nil)).Elem()
}

type workspaceApplicationGroupAssociationArgs struct {
	// The resource ID for the Virtual Desktop Application Group.
	ApplicationGroupId string `pulumi:"applicationGroupId"`
	// The resource ID for the Virtual Desktop Workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceApplicationGroupAssociation resource.
type WorkspaceApplicationGroupAssociationArgs struct {
	// The resource ID for the Virtual Desktop Application Group.
	ApplicationGroupId pulumi.StringInput
	// The resource ID for the Virtual Desktop Workspace.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceApplicationGroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApplicationGroupAssociationArgs)(nil)).Elem()
}
