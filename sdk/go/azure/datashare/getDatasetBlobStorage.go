// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Data Share Blob Storage Dataset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/datashare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := datashare.LookupDatasetBlobStorage(ctx, &datashare.LookupDatasetBlobStorageArgs{
// 			Name:        "example-dsbsds",
// 			DataShareId: "example-share-id",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("id", example.Id)
// 		return nil
// 	})
// }
// ```
func LookupDatasetBlobStorage(ctx *pulumi.Context, args *LookupDatasetBlobStorageArgs, opts ...pulumi.InvokeOption) (*LookupDatasetBlobStorageResult, error) {
	var rv LookupDatasetBlobStorageResult
	err := ctx.Invoke("azure:datashare/getDatasetBlobStorage:getDatasetBlobStorage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatasetBlobStorage.
type LookupDatasetBlobStorageArgs struct {
	// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created.
	DataShareId string `pulumi:"dataShareId"`
	// The name of this Data Share Blob Storage Dataset.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatasetBlobStorage.
type LookupDatasetBlobStorageResult struct {
	// The name of the storage account container to be shared with the receiver.
	ContainerName string `pulumi:"containerName"`
	DataShareId   string `pulumi:"dataShareId"`
	// The name of the Data Share Dataset.
	DisplayName string `pulumi:"displayName"`
	// The path of the file in the storage container to be shared with the receiver.
	FilePath string `pulumi:"filePath"`
	// The folder path of the file in the storage container to be shared with the receiver.
	FolderPath string `pulumi:"folderPath"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the storage account to be shared with the receiver.
	Name string `pulumi:"name"`
	// A `storageAccount` block as defined below.
	StorageAccounts []GetDatasetBlobStorageStorageAccount `pulumi:"storageAccounts"`
}

func LookupDatasetBlobStorageApply(ctx *pulumi.Context, args LookupDatasetBlobStorageApplyInput, opts ...pulumi.InvokeOption) LookupDatasetBlobStorageResultOutput {
	return args.ToLookupDatasetBlobStorageApplyOutput().ApplyT(func(v LookupDatasetBlobStorageArgs) (LookupDatasetBlobStorageResult, error) {
		r, err := LookupDatasetBlobStorage(ctx, &v, opts...)
		return *r, err

	}).(LookupDatasetBlobStorageResultOutput)
}

// LookupDatasetBlobStorageApplyInput is an input type that accepts LookupDatasetBlobStorageApplyArgs and LookupDatasetBlobStorageApplyOutput values.
// You can construct a concrete instance of `LookupDatasetBlobStorageApplyInput` via:
//
//          LookupDatasetBlobStorageApplyArgs{...}
type LookupDatasetBlobStorageApplyInput interface {
	pulumi.Input

	ToLookupDatasetBlobStorageApplyOutput() LookupDatasetBlobStorageApplyOutput
	ToLookupDatasetBlobStorageApplyOutputWithContext(context.Context) LookupDatasetBlobStorageApplyOutput
}

// A collection of arguments for invoking getDatasetBlobStorage.
type LookupDatasetBlobStorageApplyArgs struct {
	// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created.
	DataShareId pulumi.StringInput `pulumi:"dataShareId"`
	// The name of this Data Share Blob Storage Dataset.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatasetBlobStorageApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatasetBlobStorageArgs)(nil)).Elem()
}

func (i LookupDatasetBlobStorageApplyArgs) ToLookupDatasetBlobStorageApplyOutput() LookupDatasetBlobStorageApplyOutput {
	return i.ToLookupDatasetBlobStorageApplyOutputWithContext(context.Background())
}

func (i LookupDatasetBlobStorageApplyArgs) ToLookupDatasetBlobStorageApplyOutputWithContext(ctx context.Context) LookupDatasetBlobStorageApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupDatasetBlobStorageApplyOutput)
}

// A collection of arguments for invoking getDatasetBlobStorage.
type LookupDatasetBlobStorageApplyOutput struct{ *pulumi.OutputState }

func (LookupDatasetBlobStorageApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatasetBlobStorageArgs)(nil)).Elem()
}

func (o LookupDatasetBlobStorageApplyOutput) ToLookupDatasetBlobStorageApplyOutput() LookupDatasetBlobStorageApplyOutput {
	return o
}

func (o LookupDatasetBlobStorageApplyOutput) ToLookupDatasetBlobStorageApplyOutputWithContext(ctx context.Context) LookupDatasetBlobStorageApplyOutput {
	return o
}

// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created.
func (o LookupDatasetBlobStorageApplyOutput) DataShareId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageArgs) string { return v.DataShareId }).(pulumi.StringOutput)
}

// The name of this Data Share Blob Storage Dataset.
func (o LookupDatasetBlobStorageApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageArgs) string { return v.Name }).(pulumi.StringOutput)
}

// A collection of values returned by getDatasetBlobStorage.
type LookupDatasetBlobStorageResultOutput struct{ *pulumi.OutputState }

func (LookupDatasetBlobStorageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatasetBlobStorageResult)(nil)).Elem()
}

func (o LookupDatasetBlobStorageResultOutput) ToLookupDatasetBlobStorageResultOutput() LookupDatasetBlobStorageResultOutput {
	return o
}

func (o LookupDatasetBlobStorageResultOutput) ToLookupDatasetBlobStorageResultOutputWithContext(ctx context.Context) LookupDatasetBlobStorageResultOutput {
	return o
}

// The name of the storage account container to be shared with the receiver.
func (o LookupDatasetBlobStorageResultOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.ContainerName }).(pulumi.StringOutput)
}

func (o LookupDatasetBlobStorageResultOutput) DataShareId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.DataShareId }).(pulumi.StringOutput)
}

// The name of the Data Share Dataset.
func (o LookupDatasetBlobStorageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The path of the file in the storage container to be shared with the receiver.
func (o LookupDatasetBlobStorageResultOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.FilePath }).(pulumi.StringOutput)
}

// The folder path of the file in the storage container to be shared with the receiver.
func (o LookupDatasetBlobStorageResultOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.FolderPath }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatasetBlobStorageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the storage account to be shared with the receiver.
func (o LookupDatasetBlobStorageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `storageAccount` block as defined below.
func (o LookupDatasetBlobStorageResultOutput) StorageAccounts() GetDatasetBlobStorageStorageAccountArrayOutput {
	return o.ApplyT(func(v LookupDatasetBlobStorageResult) []GetDatasetBlobStorageStorageAccount { return v.StorageAccounts }).(GetDatasetBlobStorageStorageAccountArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatasetBlobStorageApplyOutput{})
	pulumi.RegisterOutputType(LookupDatasetBlobStorageResultOutput{})
}
