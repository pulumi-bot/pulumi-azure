// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AccountIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// AccountIdentityInput is an input type that accepts AccountIdentityArgs and AccountIdentityOutput values.
// You can construct a concrete instance of `AccountIdentityInput` via:
//
//          AccountIdentityArgs{...}
type AccountIdentityInput interface {
	pulumi.Input

	ToAccountIdentityOutput() AccountIdentityOutput
	ToAccountIdentityOutputWithContext(context.Context) AccountIdentityOutput
}

type AccountIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (i AccountIdentityArgs) ToAccountIdentityOutput() AccountIdentityOutput {
	return i.ToAccountIdentityOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput)
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput).ToAccountIdentityPtrOutputWithContext(ctx)
}

// AccountIdentityPtrInput is an input type that accepts AccountIdentityArgs, AccountIdentityPtr and AccountIdentityPtrOutput values.
// You can construct a concrete instance of `AccountIdentityPtrInput` via:
//
//          AccountIdentityArgs{...}
//
//  or:
//
//          nil
type AccountIdentityPtrInput interface {
	pulumi.Input

	ToAccountIdentityPtrOutput() AccountIdentityPtrOutput
	ToAccountIdentityPtrOutputWithContext(context.Context) AccountIdentityPtrOutput
}

type accountIdentityPtrType AccountIdentityArgs

func AccountIdentityPtr(v *AccountIdentityArgs) AccountIdentityPtrInput {
	return (*accountIdentityPtrType)(v)
}

func (*accountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityPtrOutput)
}

type AccountIdentityOutput struct{ *pulumi.OutputState }

func (AccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityOutput) ToAccountIdentityOutput() AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *AccountIdentity {
		return &v
	}).(AccountIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
func (o AccountIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
func (o AccountIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
func (o AccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type AccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (AccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) Elem() AccountIdentityOutput {
	return o.ApplyT(func(v *AccountIdentity) AccountIdentity { return *v }).(AccountIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Data Share Account.
func (o AccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Data Share Account.
func (o AccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Share Account. At this time the only allowed value is `SystemAssigned`.
func (o AccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DatasetBlobStorageStorageAccount struct {
	// The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	Name string `pulumi:"name"`
	// The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// DatasetBlobStorageStorageAccountInput is an input type that accepts DatasetBlobStorageStorageAccountArgs and DatasetBlobStorageStorageAccountOutput values.
// You can construct a concrete instance of `DatasetBlobStorageStorageAccountInput` via:
//
//          DatasetBlobStorageStorageAccountArgs{...}
type DatasetBlobStorageStorageAccountInput interface {
	pulumi.Input

	ToDatasetBlobStorageStorageAccountOutput() DatasetBlobStorageStorageAccountOutput
	ToDatasetBlobStorageStorageAccountOutputWithContext(context.Context) DatasetBlobStorageStorageAccountOutput
}

type DatasetBlobStorageStorageAccountArgs struct {
	// The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (DatasetBlobStorageStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBlobStorageStorageAccount)(nil)).Elem()
}

func (i DatasetBlobStorageStorageAccountArgs) ToDatasetBlobStorageStorageAccountOutput() DatasetBlobStorageStorageAccountOutput {
	return i.ToDatasetBlobStorageStorageAccountOutputWithContext(context.Background())
}

func (i DatasetBlobStorageStorageAccountArgs) ToDatasetBlobStorageStorageAccountOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBlobStorageStorageAccountOutput)
}

func (i DatasetBlobStorageStorageAccountArgs) ToDatasetBlobStorageStorageAccountPtrOutput() DatasetBlobStorageStorageAccountPtrOutput {
	return i.ToDatasetBlobStorageStorageAccountPtrOutputWithContext(context.Background())
}

func (i DatasetBlobStorageStorageAccountArgs) ToDatasetBlobStorageStorageAccountPtrOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBlobStorageStorageAccountOutput).ToDatasetBlobStorageStorageAccountPtrOutputWithContext(ctx)
}

// DatasetBlobStorageStorageAccountPtrInput is an input type that accepts DatasetBlobStorageStorageAccountArgs, DatasetBlobStorageStorageAccountPtr and DatasetBlobStorageStorageAccountPtrOutput values.
// You can construct a concrete instance of `DatasetBlobStorageStorageAccountPtrInput` via:
//
//          DatasetBlobStorageStorageAccountArgs{...}
//
//  or:
//
//          nil
type DatasetBlobStorageStorageAccountPtrInput interface {
	pulumi.Input

	ToDatasetBlobStorageStorageAccountPtrOutput() DatasetBlobStorageStorageAccountPtrOutput
	ToDatasetBlobStorageStorageAccountPtrOutputWithContext(context.Context) DatasetBlobStorageStorageAccountPtrOutput
}

type datasetBlobStorageStorageAccountPtrType DatasetBlobStorageStorageAccountArgs

func DatasetBlobStorageStorageAccountPtr(v *DatasetBlobStorageStorageAccountArgs) DatasetBlobStorageStorageAccountPtrInput {
	return (*datasetBlobStorageStorageAccountPtrType)(v)
}

func (*datasetBlobStorageStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetBlobStorageStorageAccount)(nil)).Elem()
}

func (i *datasetBlobStorageStorageAccountPtrType) ToDatasetBlobStorageStorageAccountPtrOutput() DatasetBlobStorageStorageAccountPtrOutput {
	return i.ToDatasetBlobStorageStorageAccountPtrOutputWithContext(context.Background())
}

func (i *datasetBlobStorageStorageAccountPtrType) ToDatasetBlobStorageStorageAccountPtrOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBlobStorageStorageAccountPtrOutput)
}

type DatasetBlobStorageStorageAccountOutput struct{ *pulumi.OutputState }

func (DatasetBlobStorageStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBlobStorageStorageAccount)(nil)).Elem()
}

func (o DatasetBlobStorageStorageAccountOutput) ToDatasetBlobStorageStorageAccountOutput() DatasetBlobStorageStorageAccountOutput {
	return o
}

func (o DatasetBlobStorageStorageAccountOutput) ToDatasetBlobStorageStorageAccountOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountOutput {
	return o
}

func (o DatasetBlobStorageStorageAccountOutput) ToDatasetBlobStorageStorageAccountPtrOutput() DatasetBlobStorageStorageAccountPtrOutput {
	return o.ToDatasetBlobStorageStorageAccountPtrOutputWithContext(context.Background())
}

func (o DatasetBlobStorageStorageAccountOutput) ToDatasetBlobStorageStorageAccountPtrOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountPtrOutput {
	return o.ApplyT(func(v DatasetBlobStorageStorageAccount) *DatasetBlobStorageStorageAccount {
		return &v
	}).(DatasetBlobStorageStorageAccountPtrOutput)
}

// The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBlobStorageStorageAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBlobStorageStorageAccount) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBlobStorageStorageAccount) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

type DatasetBlobStorageStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (DatasetBlobStorageStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetBlobStorageStorageAccount)(nil)).Elem()
}

func (o DatasetBlobStorageStorageAccountPtrOutput) ToDatasetBlobStorageStorageAccountPtrOutput() DatasetBlobStorageStorageAccountPtrOutput {
	return o
}

func (o DatasetBlobStorageStorageAccountPtrOutput) ToDatasetBlobStorageStorageAccountPtrOutputWithContext(ctx context.Context) DatasetBlobStorageStorageAccountPtrOutput {
	return o
}

func (o DatasetBlobStorageStorageAccountPtrOutput) Elem() DatasetBlobStorageStorageAccountOutput {
	return o.ApplyT(func(v *DatasetBlobStorageStorageAccount) DatasetBlobStorageStorageAccount { return *v }).(DatasetBlobStorageStorageAccountOutput)
}

// The name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetBlobStorageStorageAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource group name of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountPtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetBlobStorageStorageAccount) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// The subscription id of the storage account to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
func (o DatasetBlobStorageStorageAccountPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetBlobStorageStorageAccount) *string {
		if v == nil {
			return nil
		}
		return &v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

type ShareSnapshotSchedule struct {
	// The name of the snapshot schedule.
	Name string `pulumi:"name"`
	// The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
	Recurrence string `pulumi:"recurrence"`
	// The synchronization with the source data's start time.
	StartTime string `pulumi:"startTime"`
}

// ShareSnapshotScheduleInput is an input type that accepts ShareSnapshotScheduleArgs and ShareSnapshotScheduleOutput values.
// You can construct a concrete instance of `ShareSnapshotScheduleInput` via:
//
//          ShareSnapshotScheduleArgs{...}
type ShareSnapshotScheduleInput interface {
	pulumi.Input

	ToShareSnapshotScheduleOutput() ShareSnapshotScheduleOutput
	ToShareSnapshotScheduleOutputWithContext(context.Context) ShareSnapshotScheduleOutput
}

type ShareSnapshotScheduleArgs struct {
	// The name of the snapshot schedule.
	Name pulumi.StringInput `pulumi:"name"`
	// The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// The synchronization with the source data's start time.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ShareSnapshotScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareSnapshotSchedule)(nil)).Elem()
}

func (i ShareSnapshotScheduleArgs) ToShareSnapshotScheduleOutput() ShareSnapshotScheduleOutput {
	return i.ToShareSnapshotScheduleOutputWithContext(context.Background())
}

func (i ShareSnapshotScheduleArgs) ToShareSnapshotScheduleOutputWithContext(ctx context.Context) ShareSnapshotScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSnapshotScheduleOutput)
}

func (i ShareSnapshotScheduleArgs) ToShareSnapshotSchedulePtrOutput() ShareSnapshotSchedulePtrOutput {
	return i.ToShareSnapshotSchedulePtrOutputWithContext(context.Background())
}

func (i ShareSnapshotScheduleArgs) ToShareSnapshotSchedulePtrOutputWithContext(ctx context.Context) ShareSnapshotSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSnapshotScheduleOutput).ToShareSnapshotSchedulePtrOutputWithContext(ctx)
}

// ShareSnapshotSchedulePtrInput is an input type that accepts ShareSnapshotScheduleArgs, ShareSnapshotSchedulePtr and ShareSnapshotSchedulePtrOutput values.
// You can construct a concrete instance of `ShareSnapshotSchedulePtrInput` via:
//
//          ShareSnapshotScheduleArgs{...}
//
//  or:
//
//          nil
type ShareSnapshotSchedulePtrInput interface {
	pulumi.Input

	ToShareSnapshotSchedulePtrOutput() ShareSnapshotSchedulePtrOutput
	ToShareSnapshotSchedulePtrOutputWithContext(context.Context) ShareSnapshotSchedulePtrOutput
}

type shareSnapshotSchedulePtrType ShareSnapshotScheduleArgs

func ShareSnapshotSchedulePtr(v *ShareSnapshotScheduleArgs) ShareSnapshotSchedulePtrInput {
	return (*shareSnapshotSchedulePtrType)(v)
}

func (*shareSnapshotSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareSnapshotSchedule)(nil)).Elem()
}

func (i *shareSnapshotSchedulePtrType) ToShareSnapshotSchedulePtrOutput() ShareSnapshotSchedulePtrOutput {
	return i.ToShareSnapshotSchedulePtrOutputWithContext(context.Background())
}

func (i *shareSnapshotSchedulePtrType) ToShareSnapshotSchedulePtrOutputWithContext(ctx context.Context) ShareSnapshotSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSnapshotSchedulePtrOutput)
}

type ShareSnapshotScheduleOutput struct{ *pulumi.OutputState }

func (ShareSnapshotScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareSnapshotSchedule)(nil)).Elem()
}

func (o ShareSnapshotScheduleOutput) ToShareSnapshotScheduleOutput() ShareSnapshotScheduleOutput {
	return o
}

func (o ShareSnapshotScheduleOutput) ToShareSnapshotScheduleOutputWithContext(ctx context.Context) ShareSnapshotScheduleOutput {
	return o
}

func (o ShareSnapshotScheduleOutput) ToShareSnapshotSchedulePtrOutput() ShareSnapshotSchedulePtrOutput {
	return o.ToShareSnapshotSchedulePtrOutputWithContext(context.Background())
}

func (o ShareSnapshotScheduleOutput) ToShareSnapshotSchedulePtrOutputWithContext(ctx context.Context) ShareSnapshotSchedulePtrOutput {
	return o.ApplyT(func(v ShareSnapshotSchedule) *ShareSnapshotSchedule {
		return &v
	}).(ShareSnapshotSchedulePtrOutput)
}

// The name of the snapshot schedule.
func (o ShareSnapshotScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ShareSnapshotSchedule) string { return v.Name }).(pulumi.StringOutput)
}

// The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
func (o ShareSnapshotScheduleOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ShareSnapshotSchedule) string { return v.Recurrence }).(pulumi.StringOutput)
}

// The synchronization with the source data's start time.
func (o ShareSnapshotScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ShareSnapshotSchedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type ShareSnapshotSchedulePtrOutput struct{ *pulumi.OutputState }

func (ShareSnapshotSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareSnapshotSchedule)(nil)).Elem()
}

func (o ShareSnapshotSchedulePtrOutput) ToShareSnapshotSchedulePtrOutput() ShareSnapshotSchedulePtrOutput {
	return o
}

func (o ShareSnapshotSchedulePtrOutput) ToShareSnapshotSchedulePtrOutputWithContext(ctx context.Context) ShareSnapshotSchedulePtrOutput {
	return o
}

func (o ShareSnapshotSchedulePtrOutput) Elem() ShareSnapshotScheduleOutput {
	return o.ApplyT(func(v *ShareSnapshotSchedule) ShareSnapshotSchedule { return *v }).(ShareSnapshotScheduleOutput)
}

// The name of the snapshot schedule.
func (o ShareSnapshotSchedulePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareSnapshotSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The interval of the synchronization with the source data. Possible values are `Hour` and `Day`.
func (o ShareSnapshotSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareSnapshotSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// The synchronization with the source data's start time.
func (o ShareSnapshotSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareSnapshotSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type GetAccountIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId string `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId string `pulumi:"tenantId"`
	// The identity type of the Data Share Account.
	Type string `pulumi:"type"`
}

type GetDatasetBlobStorageStorageAccount struct {
	// The name of this Data Share Blob Storage Dataset.
	Name string `pulumi:"name"`
	// The resource group name of the storage account to be shared with the receiver.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The subscription id of the storage account to be shared with the receiver.
	SubscriptionId string `pulumi:"subscriptionId"`
}

type GetShareSnapshotSchedule struct {
	// The name of this Data Share.
	Name string `pulumi:"name"`
	// The interval of the synchronization with the source data.
	Recurrence string `pulumi:"recurrence"`
	// The synchronization with the source data's start time.
	StartTime string `pulumi:"startTime"`
}

func init() {
	pulumi.RegisterOutputType(AccountIdentityOutput{})
	pulumi.RegisterOutputType(AccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(DatasetBlobStorageStorageAccountOutput{})
	pulumi.RegisterOutputType(DatasetBlobStorageStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(ShareSnapshotScheduleOutput{})
	pulumi.RegisterOutputType(ShareSnapshotSchedulePtrOutput{})
	pulumi.RegisterOutputType(GetAccountIdentityOutput{})
	pulumi.RegisterOutputType(GetAccountIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetDatasetBlobStorageStorageAccountOutput{})
	pulumi.RegisterOutputType(GetDatasetBlobStorageStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(GetShareSnapshotScheduleOutput{})
	pulumi.RegisterOutputType(GetShareSnapshotScheduleArrayOutput{})
}
