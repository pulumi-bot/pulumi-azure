// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Event Hubs Consumer Group within an Event Hub.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/eventhub"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := eventhub.GetConsumeGroup(ctx, &eventhub.GetConsumeGroupArgs{
// 			EventhubName:      azurerm_eventhub.Test.Name,
// 			Name:              azurerm_eventhub_consumer_group.Test.Name,
// 			NamespaceName:     azurerm_eventhub_namespace.Test.Name,
// 			ResourceGroupName: azurerm_resource_group.Test.Name,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetConsumeGroup(ctx *pulumi.Context, args *GetConsumeGroupArgs, opts ...pulumi.InvokeOption) (*GetConsumeGroupResult, error) {
	var rv GetConsumeGroupResult
	err := ctx.Invoke("azure:eventhub/getConsumeGroup:getConsumeGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConsumeGroup.
type GetConsumeGroupArgs struct {
	// Specifies the name of the EventHub.
	EventhubName string `pulumi:"eventhubName"`
	// Specifies the name of the EventHub Consumer Group resource.
	Name string `pulumi:"name"`
	// Specifies the name of the grandparent EventHub Namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getConsumeGroup.
type GetConsumeGroupResult struct {
	EventhubName string `pulumi:"eventhubName"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	NamespaceName     string `pulumi:"namespaceName"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the user metadata.
	UserMetadata string `pulumi:"userMetadata"`
}

func GetConsumeGroupApply(ctx *pulumi.Context, args GetConsumeGroupApplyInput, opts ...pulumi.InvokeOption) GetConsumeGroupResultOutput {
	return args.ToGetConsumeGroupApplyOutput().ApplyT(func(v GetConsumeGroupArgs) (GetConsumeGroupResult, error) {
		r, err := GetConsumeGroup(ctx, &v, opts...)
		return *r, err

	}).(GetConsumeGroupResultOutput)
}

// GetConsumeGroupApplyInput is an input type that accepts GetConsumeGroupApplyArgs and GetConsumeGroupApplyOutput values.
// You can construct a concrete instance of `GetConsumeGroupApplyInput` via:
//
//          GetConsumeGroupApplyArgs{...}
type GetConsumeGroupApplyInput interface {
	pulumi.Input

	ToGetConsumeGroupApplyOutput() GetConsumeGroupApplyOutput
	ToGetConsumeGroupApplyOutputWithContext(context.Context) GetConsumeGroupApplyOutput
}

// A collection of arguments for invoking getConsumeGroup.
type GetConsumeGroupApplyArgs struct {
	// Specifies the name of the EventHub.
	EventhubName pulumi.StringInput `pulumi:"eventhubName"`
	// Specifies the name of the EventHub Consumer Group resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the grandparent EventHub Namespace.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetConsumeGroupApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumeGroupArgs)(nil)).Elem()
}

func (i GetConsumeGroupApplyArgs) ToGetConsumeGroupApplyOutput() GetConsumeGroupApplyOutput {
	return i.ToGetConsumeGroupApplyOutputWithContext(context.Background())
}

func (i GetConsumeGroupApplyArgs) ToGetConsumeGroupApplyOutputWithContext(ctx context.Context) GetConsumeGroupApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConsumeGroupApplyOutput)
}

// A collection of arguments for invoking getConsumeGroup.
type GetConsumeGroupApplyOutput struct{ *pulumi.OutputState }

func (GetConsumeGroupApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumeGroupArgs)(nil)).Elem()
}

func (o GetConsumeGroupApplyOutput) ToGetConsumeGroupApplyOutput() GetConsumeGroupApplyOutput {
	return o
}

func (o GetConsumeGroupApplyOutput) ToGetConsumeGroupApplyOutputWithContext(ctx context.Context) GetConsumeGroupApplyOutput {
	return o
}

// Specifies the name of the EventHub.
func (o GetConsumeGroupApplyOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupArgs) string { return v.EventhubName }).(pulumi.StringOutput)
}

// Specifies the name of the EventHub Consumer Group resource.
func (o GetConsumeGroupApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupArgs) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the grandparent EventHub Namespace.
func (o GetConsumeGroupApplyOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupArgs) string { return v.NamespaceName }).(pulumi.StringOutput)
}

// The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists.
func (o GetConsumeGroupApplyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupArgs) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getConsumeGroup.
type GetConsumeGroupResultOutput struct{ *pulumi.OutputState }

func (GetConsumeGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumeGroupResult)(nil)).Elem()
}

func (o GetConsumeGroupResultOutput) ToGetConsumeGroupResultOutput() GetConsumeGroupResultOutput {
	return o
}

func (o GetConsumeGroupResultOutput) ToGetConsumeGroupResultOutputWithContext(ctx context.Context) GetConsumeGroupResultOutput {
	return o
}

func (o GetConsumeGroupResultOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.EventhubName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetConsumeGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConsumeGroupResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetConsumeGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetConsumeGroupResultOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.NamespaceName }).(pulumi.StringOutput)
}

func (o GetConsumeGroupResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the user metadata.
func (o GetConsumeGroupResultOutput) UserMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumeGroupResult) string { return v.UserMetadata }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConsumeGroupApplyOutput{})
	pulumi.RegisterOutputType(GetConsumeGroupResultOutput{})
}
