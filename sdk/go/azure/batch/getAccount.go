// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Batch Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/batch"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := batch.LookupAccount(ctx, &batch.LookupAccountArgs{
// 			Name:              "testbatchaccount",
// 			ResourceGroupName: "test",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("poolAllocationMode", example.PoolAllocationMode)
// 		return nil
// 	})
// }
// ```
func LookupAccount(ctx *pulumi.Context, args *LookupAccountArgs, opts ...pulumi.InvokeOption) (*LookupAccountResult, error) {
	var rv LookupAccountResult
	err := ctx.Invoke("azure:batch/getAccount:getAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccount.
type LookupAccountArgs struct {
	// The name of the Batch account.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where this Batch account exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getAccount.
type LookupAccountResult struct {
	// The account endpoint used to interact with the Batch service.
	AccountEndpoint string `pulumi:"accountEndpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The `keyVaultReference` block that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
	KeyVaultReferences []GetAccountKeyVaultReference `pulumi:"keyVaultReferences"`
	// The Azure Region in which this Batch account exists.
	Location string `pulumi:"location"`
	// The Batch account name.
	Name string `pulumi:"name"`
	// The pool allocation mode configured for this Batch account.
	PoolAllocationMode string `pulumi:"poolAllocationMode"`
	// The Batch account primary access key.
	PrimaryAccessKey  string `pulumi:"primaryAccessKey"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Batch account secondary access key.
	SecondaryAccessKey string `pulumi:"secondaryAccessKey"`
	// The ID of the Storage Account used for this Batch account.
	StorageAccountId string `pulumi:"storageAccountId"`
	// A map of tags assigned to the Batch account.
	Tags map[string]string `pulumi:"tags"`
}

func LookupAccountApply(ctx *pulumi.Context, args LookupAccountApplyInput, opts ...pulumi.InvokeOption) LookupAccountResultOutput {
	return args.ToLookupAccountApplyOutput().ApplyT(func(v LookupAccountArgs) (LookupAccountResult, error) {
		r, err := LookupAccount(ctx, &v, opts...)
		return *r, err

	}).(LookupAccountResultOutput)
}

// LookupAccountApplyInput is an input type that accepts LookupAccountApplyArgs and LookupAccountApplyOutput values.
// You can construct a concrete instance of `LookupAccountApplyInput` via:
//
//          LookupAccountApplyArgs{...}
type LookupAccountApplyInput interface {
	pulumi.Input

	ToLookupAccountApplyOutput() LookupAccountApplyOutput
	ToLookupAccountApplyOutputWithContext(context.Context) LookupAccountApplyOutput
}

// A collection of arguments for invoking getAccount.
type LookupAccountApplyArgs struct {
	// The name of the Batch account.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where this Batch account exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAccountApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountArgs)(nil)).Elem()
}

func (i LookupAccountApplyArgs) ToLookupAccountApplyOutput() LookupAccountApplyOutput {
	return i.ToLookupAccountApplyOutputWithContext(context.Background())
}

func (i LookupAccountApplyArgs) ToLookupAccountApplyOutputWithContext(ctx context.Context) LookupAccountApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupAccountApplyOutput)
}

// A collection of arguments for invoking getAccount.
type LookupAccountApplyOutput struct{ *pulumi.OutputState }

func (LookupAccountApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountArgs)(nil)).Elem()
}

func (o LookupAccountApplyOutput) ToLookupAccountApplyOutput() LookupAccountApplyOutput {
	return o
}

func (o LookupAccountApplyOutput) ToLookupAccountApplyOutputWithContext(ctx context.Context) LookupAccountApplyOutput {
	return o
}

// The name of the Batch account.
func (o LookupAccountApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The Name of the Resource Group where this Batch account exists.
func (o LookupAccountApplyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountArgs) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getAccount.
type LookupAccountResultOutput struct{ *pulumi.OutputState }

func (LookupAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountResult)(nil)).Elem()
}

func (o LookupAccountResultOutput) ToLookupAccountResultOutput() LookupAccountResultOutput {
	return o
}

func (o LookupAccountResultOutput) ToLookupAccountResultOutputWithContext(ctx context.Context) LookupAccountResultOutput {
	return o
}

// The account endpoint used to interact with the Batch service.
func (o LookupAccountResultOutput) AccountEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.AccountEndpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// The `keyVaultReference` block that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
func (o LookupAccountResultOutput) KeyVaultReferences() GetAccountKeyVaultReferenceArrayOutput {
	return o.ApplyT(func(v LookupAccountResult) []GetAccountKeyVaultReference { return v.KeyVaultReferences }).(GetAccountKeyVaultReferenceArrayOutput)
}

// The Azure Region in which this Batch account exists.
func (o LookupAccountResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.Location }).(pulumi.StringOutput)
}

// The Batch account name.
func (o LookupAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

// The pool allocation mode configured for this Batch account.
func (o LookupAccountResultOutput) PoolAllocationMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.PoolAllocationMode }).(pulumi.StringOutput)
}

// The Batch account primary access key.
func (o LookupAccountResultOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

func (o LookupAccountResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Batch account secondary access key.
func (o LookupAccountResultOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

// The ID of the Storage Account used for this Batch account.
func (o LookupAccountResultOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountResult) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// A map of tags assigned to the Batch account.
func (o LookupAccountResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAccountResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccountApplyOutput{})
	pulumi.RegisterOutputType(LookupAccountResultOutput{})
}
