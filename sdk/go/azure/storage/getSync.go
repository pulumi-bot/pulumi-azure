// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Storage Sync.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := storage.LookupSync(ctx, &storage.LookupSyncArgs{
// 			Name:              "existingStorageSyncName",
// 			ResourceGroupName: "existingResGroup",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("id", example.Id)
// 		return nil
// 	})
// }
// ```
func LookupSync(ctx *pulumi.Context, args *LookupSyncArgs, opts ...pulumi.InvokeOption) (*LookupSyncResult, error) {
	var rv LookupSyncResult
	err := ctx.Invoke("azure:storage/getSync:getSync", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSync.
type LookupSyncArgs struct {
	// The name of this Storage Sync.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Storage Sync exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getSync.
type LookupSyncResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Incoming traffic policy.
	IncomingTrafficPolicy string `pulumi:"incomingTrafficPolicy"`
	// The Azure Region where the Storage Sync exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the Storage Sync.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSyncApply(ctx *pulumi.Context, args LookupSyncApplyInput, opts ...pulumi.InvokeOption) LookupSyncResultOutput {
	return args.ToLookupSyncApplyOutput().ApplyT(func(v LookupSyncArgs) (LookupSyncResult, error) {
		r, err := LookupSync(ctx, &v, opts...)
		return *r, err

	}).(LookupSyncResultOutput)
}

// LookupSyncApplyInput is an input type that accepts LookupSyncApplyArgs and LookupSyncApplyOutput values.
// You can construct a concrete instance of `LookupSyncApplyInput` via:
//
//          LookupSyncApplyArgs{...}
type LookupSyncApplyInput interface {
	pulumi.Input

	ToLookupSyncApplyOutput() LookupSyncApplyOutput
	ToLookupSyncApplyOutputWithContext(context.Context) LookupSyncApplyOutput
}

// A collection of arguments for invoking getSync.
type LookupSyncApplyArgs struct {
	// The name of this Storage Sync.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Storage Sync exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSyncApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSyncArgs)(nil)).Elem()
}

func (i LookupSyncApplyArgs) ToLookupSyncApplyOutput() LookupSyncApplyOutput {
	return i.ToLookupSyncApplyOutputWithContext(context.Background())
}

func (i LookupSyncApplyArgs) ToLookupSyncApplyOutputWithContext(ctx context.Context) LookupSyncApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSyncApplyOutput)
}

// A collection of arguments for invoking getSync.
type LookupSyncApplyOutput struct{ *pulumi.OutputState }

func (LookupSyncApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSyncArgs)(nil)).Elem()
}

func (o LookupSyncApplyOutput) ToLookupSyncApplyOutput() LookupSyncApplyOutput {
	return o
}

func (o LookupSyncApplyOutput) ToLookupSyncApplyOutputWithContext(ctx context.Context) LookupSyncApplyOutput {
	return o
}

// The name of this Storage Sync.
func (o LookupSyncApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Storage Sync exists.
func (o LookupSyncApplyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncArgs) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getSync.
type LookupSyncResultOutput struct{ *pulumi.OutputState }

func (LookupSyncResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSyncResult)(nil)).Elem()
}

func (o LookupSyncResultOutput) ToLookupSyncResultOutput() LookupSyncResultOutput {
	return o
}

func (o LookupSyncResultOutput) ToLookupSyncResultOutputWithContext(ctx context.Context) LookupSyncResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSyncResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncResult) string { return v.Id }).(pulumi.StringOutput)
}

// Incoming traffic policy.
func (o LookupSyncResultOutput) IncomingTrafficPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncResult) string { return v.IncomingTrafficPolicy }).(pulumi.StringOutput)
}

// The Azure Region where the Storage Sync exists.
func (o LookupSyncResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupSyncResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSyncResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSyncResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Storage Sync.
func (o LookupSyncResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSyncResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSyncApplyOutput{})
	pulumi.RegisterOutputType(LookupSyncResultOutput{})
}
