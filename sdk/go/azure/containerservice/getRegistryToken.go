// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Container Registry token.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/containerservice"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := containerservice.LookupRegistryToken(ctx, &containerservice.LookupRegistryTokenArgs{
// 			Name:                  "exampletoken",
// 			ResourceGroupName:     "example-resource-group",
// 			ContainerRegistryName: "example-registry",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("scopeMapId", example.ScopeMapId)
// 		return nil
// 	})
// }
// ```
func LookupRegistryToken(ctx *pulumi.Context, args *LookupRegistryTokenArgs, opts ...pulumi.InvokeOption) (*LookupRegistryTokenResult, error) {
	var rv LookupRegistryTokenResult
	err := ctx.Invoke("azure:containerservice/getRegistryToken:getRegistryToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryToken.
type LookupRegistryTokenArgs struct {
	// The Name of the Container Registry where the token exists.
	ContainerRegistryName string `pulumi:"containerRegistryName"`
	// The name of the Container Registry token.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where this Container Registry token exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getRegistryToken.
type LookupRegistryTokenResult struct {
	ContainerRegistryName string `pulumi:"containerRegistryName"`
	// Whether this Token is enabled.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Scope Map ID used by the token.
	ScopeMapId string `pulumi:"scopeMapId"`
}

func LookupRegistryTokenApply(ctx *pulumi.Context, args LookupRegistryTokenApplyInput, opts ...pulumi.InvokeOption) LookupRegistryTokenResultOutput {
	return args.ToLookupRegistryTokenApplyOutput().ApplyT(func(v LookupRegistryTokenArgs) (LookupRegistryTokenResult, error) {
		r, err := LookupRegistryToken(ctx, &v, opts...)
		return *r, err

	}).(LookupRegistryTokenResultOutput)
}

// LookupRegistryTokenApplyInput is an input type that accepts LookupRegistryTokenApplyArgs and LookupRegistryTokenApplyOutput values.
// You can construct a concrete instance of `LookupRegistryTokenApplyInput` via:
//
//          LookupRegistryTokenApplyArgs{...}
type LookupRegistryTokenApplyInput interface {
	pulumi.Input

	ToLookupRegistryTokenApplyOutput() LookupRegistryTokenApplyOutput
	ToLookupRegistryTokenApplyOutputWithContext(context.Context) LookupRegistryTokenApplyOutput
}

// A collection of arguments for invoking getRegistryToken.
type LookupRegistryTokenApplyArgs struct {
	// The Name of the Container Registry where the token exists.
	ContainerRegistryName pulumi.StringInput `pulumi:"containerRegistryName"`
	// The name of the Container Registry token.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where this Container Registry token exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupRegistryTokenApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryTokenArgs)(nil)).Elem()
}

func (i LookupRegistryTokenApplyArgs) ToLookupRegistryTokenApplyOutput() LookupRegistryTokenApplyOutput {
	return i.ToLookupRegistryTokenApplyOutputWithContext(context.Background())
}

func (i LookupRegistryTokenApplyArgs) ToLookupRegistryTokenApplyOutputWithContext(ctx context.Context) LookupRegistryTokenApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupRegistryTokenApplyOutput)
}

// A collection of arguments for invoking getRegistryToken.
type LookupRegistryTokenApplyOutput struct{ *pulumi.OutputState }

func (LookupRegistryTokenApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryTokenArgs)(nil)).Elem()
}

func (o LookupRegistryTokenApplyOutput) ToLookupRegistryTokenApplyOutput() LookupRegistryTokenApplyOutput {
	return o
}

func (o LookupRegistryTokenApplyOutput) ToLookupRegistryTokenApplyOutputWithContext(ctx context.Context) LookupRegistryTokenApplyOutput {
	return o
}

// The Name of the Container Registry where the token exists.
func (o LookupRegistryTokenApplyOutput) ContainerRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenArgs) string { return v.ContainerRegistryName }).(pulumi.StringOutput)
}

// The name of the Container Registry token.
func (o LookupRegistryTokenApplyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenArgs) string { return v.Name }).(pulumi.StringOutput)
}

// The Name of the Resource Group where this Container Registry token exists.
func (o LookupRegistryTokenApplyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenArgs) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A collection of values returned by getRegistryToken.
type LookupRegistryTokenResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryTokenResult)(nil)).Elem()
}

func (o LookupRegistryTokenResultOutput) ToLookupRegistryTokenResultOutput() LookupRegistryTokenResultOutput {
	return o
}

func (o LookupRegistryTokenResultOutput) ToLookupRegistryTokenResultOutputWithContext(ctx context.Context) LookupRegistryTokenResultOutput {
	return o
}

func (o LookupRegistryTokenResultOutput) ContainerRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.ContainerRegistryName }).(pulumi.StringOutput)
}

// Whether this Token is enabled.
func (o LookupRegistryTokenResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegistryTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryTokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRegistryTokenResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Scope Map ID used by the token.
func (o LookupRegistryTokenResultOutput) ScopeMapId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.ScopeMapId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryTokenApplyOutput{})
	pulumi.RegisterOutputType(LookupRegistryTokenResultOutput{})
}
