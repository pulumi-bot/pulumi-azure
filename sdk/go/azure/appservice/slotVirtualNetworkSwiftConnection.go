// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an App Service Slot's Virtual Network Association (this is for the [Regional VNet Integration](https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration) which is still in preview).
type SlotVirtualNetworkSwiftConnection struct {
	pulumi.CustomResourceState

	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringOutput `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringOutput `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSlotVirtualNetworkSwiftConnection registers a new resource with the given unique name, arguments, and options.
func NewSlotVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, args *SlotVirtualNetworkSwiftConnectionArgs, opts ...pulumi.ResourceOption) (*SlotVirtualNetworkSwiftConnection, error) {
	if args == nil || args.AppServiceId == nil {
		return nil, errors.New("missing required argument 'AppServiceId'")
	}
	if args == nil || args.SlotName == nil {
		return nil, errors.New("missing required argument 'SlotName'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	if args == nil {
		args = &SlotVirtualNetworkSwiftConnectionArgs{}
	}
	var resource SlotVirtualNetworkSwiftConnection
	err := ctx.RegisterResource("azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlotVirtualNetworkSwiftConnection gets an existing SlotVirtualNetworkSwiftConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlotVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlotVirtualNetworkSwiftConnectionState, opts ...pulumi.ResourceOption) (*SlotVirtualNetworkSwiftConnection, error) {
	var resource SlotVirtualNetworkSwiftConnection
	err := ctx.ReadResource("azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlotVirtualNetworkSwiftConnection resources.
type slotVirtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId *string `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName *string `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId *string `pulumi:"subnetId"`
}

type SlotVirtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringPtrInput
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringPtrInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringPtrInput
}

func (SlotVirtualNetworkSwiftConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*slotVirtualNetworkSwiftConnectionState)(nil)).Elem()
}

type slotVirtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId string `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName string `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SlotVirtualNetworkSwiftConnection resource.
type SlotVirtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringInput
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringInput
}

func (SlotVirtualNetworkSwiftConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slotVirtualNetworkSwiftConnectionArgs)(nil)).Elem()
}
