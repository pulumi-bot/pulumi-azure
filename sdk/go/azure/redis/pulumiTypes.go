// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CachePatchSchedule struct {
	DayOfWeek    string `pulumi:"dayOfWeek"`
	StartHourUtc *int   `pulumi:"startHourUtc"`
}

// CachePatchScheduleInput is an input type that accepts CachePatchScheduleArgs and CachePatchScheduleOutput values.
// You can construct a concrete instance of `CachePatchScheduleInput` via:
//
//          CachePatchScheduleArgs{...}
type CachePatchScheduleInput interface {
	pulumi.Input

	ToCachePatchScheduleOutput() CachePatchScheduleOutput
	ToCachePatchScheduleOutputWithContext(context.Context) CachePatchScheduleOutput
}

type CachePatchScheduleArgs struct {
	DayOfWeek    pulumi.StringInput `pulumi:"dayOfWeek"`
	StartHourUtc pulumi.IntPtrInput `pulumi:"startHourUtc"`
}

func (CachePatchScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CachePatchSchedule)(nil)).Elem()
}

func (i CachePatchScheduleArgs) ToCachePatchScheduleOutput() CachePatchScheduleOutput {
	return i.ToCachePatchScheduleOutputWithContext(context.Background())
}

func (i CachePatchScheduleArgs) ToCachePatchScheduleOutputWithContext(ctx context.Context) CachePatchScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePatchScheduleOutput)
}

// CachePatchScheduleArrayInput is an input type that accepts CachePatchScheduleArray and CachePatchScheduleArrayOutput values.
// You can construct a concrete instance of `CachePatchScheduleArrayInput` via:
//
//          CachePatchScheduleArray{ CachePatchScheduleArgs{...} }
type CachePatchScheduleArrayInput interface {
	pulumi.Input

	ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput
	ToCachePatchScheduleArrayOutputWithContext(context.Context) CachePatchScheduleArrayOutput
}

type CachePatchScheduleArray []CachePatchScheduleInput

func (CachePatchScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CachePatchSchedule)(nil)).Elem()
}

func (i CachePatchScheduleArray) ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput {
	return i.ToCachePatchScheduleArrayOutputWithContext(context.Background())
}

func (i CachePatchScheduleArray) ToCachePatchScheduleArrayOutputWithContext(ctx context.Context) CachePatchScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePatchScheduleArrayOutput)
}

type CachePatchScheduleOutput struct{ *pulumi.OutputState }

func (CachePatchScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CachePatchSchedule)(nil)).Elem()
}

func (o CachePatchScheduleOutput) ToCachePatchScheduleOutput() CachePatchScheduleOutput {
	return o
}

func (o CachePatchScheduleOutput) ToCachePatchScheduleOutputWithContext(ctx context.Context) CachePatchScheduleOutput {
	return o
}

func (o CachePatchScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v CachePatchSchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

func (o CachePatchScheduleOutput) StartHourUtc() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CachePatchSchedule) *int { return v.StartHourUtc }).(pulumi.IntPtrOutput)
}

type CachePatchScheduleArrayOutput struct{ *pulumi.OutputState }

func (CachePatchScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CachePatchSchedule)(nil)).Elem()
}

func (o CachePatchScheduleArrayOutput) ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput {
	return o
}

func (o CachePatchScheduleArrayOutput) ToCachePatchScheduleArrayOutputWithContext(ctx context.Context) CachePatchScheduleArrayOutput {
	return o
}

func (o CachePatchScheduleArrayOutput) Index(i pulumi.IntInput) CachePatchScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CachePatchSchedule {
		return vs[0].([]CachePatchSchedule)[vs[1].(int)]
	}).(CachePatchScheduleOutput)
}

type CacheRedisConfiguration struct {
	AofBackupEnabled            *bool   `pulumi:"aofBackupEnabled"`
	AofStorageConnectionString0 *string `pulumi:"aofStorageConnectionString0"`
	AofStorageConnectionString1 *string `pulumi:"aofStorageConnectionString1"`
	// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
	EnableAuthentication *bool `pulumi:"enableAuthentication"`
	// Returns the max number of connected clients at the same time.
	Maxclients *int `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	MaxfragmentationmemoryReserved *int `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance. Defaults are shown below.
	MaxmemoryDelta *int `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	MaxmemoryReserved *int `pulumi:"maxmemoryReserved"`
	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
	NotifyKeyspaceEvents *string `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKU's.
	RdbBackupEnabled *bool `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKU's. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
	RdbBackupFrequency *int `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots to create as a backup. Only supported for Premium SKU's.
	RdbBackupMaxSnapshotCount *int `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKU's. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
	RdbStorageConnectionString *string `pulumi:"rdbStorageConnectionString"`
}

// CacheRedisConfigurationInput is an input type that accepts CacheRedisConfigurationArgs and CacheRedisConfigurationOutput values.
// You can construct a concrete instance of `CacheRedisConfigurationInput` via:
//
//          CacheRedisConfigurationArgs{...}
type CacheRedisConfigurationInput interface {
	pulumi.Input

	ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput
	ToCacheRedisConfigurationOutputWithContext(context.Context) CacheRedisConfigurationOutput
}

type CacheRedisConfigurationArgs struct {
	AofBackupEnabled            pulumi.BoolPtrInput   `pulumi:"aofBackupEnabled"`
	AofStorageConnectionString0 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString0"`
	AofStorageConnectionString1 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString1"`
	// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
	EnableAuthentication pulumi.BoolPtrInput `pulumi:"enableAuthentication"`
	// Returns the max number of connected clients at the same time.
	Maxclients pulumi.IntPtrInput `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	MaxfragmentationmemoryReserved pulumi.IntPtrInput `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance. Defaults are shown below.
	MaxmemoryDelta pulumi.IntPtrInput `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
	MaxmemoryPolicy pulumi.StringPtrInput `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	MaxmemoryReserved pulumi.IntPtrInput `pulumi:"maxmemoryReserved"`
	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
	NotifyKeyspaceEvents pulumi.StringPtrInput `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKU's.
	RdbBackupEnabled pulumi.BoolPtrInput `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKU's. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
	RdbBackupFrequency pulumi.IntPtrInput `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots to create as a backup. Only supported for Premium SKU's.
	RdbBackupMaxSnapshotCount pulumi.IntPtrInput `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKU's. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
	RdbStorageConnectionString pulumi.StringPtrInput `pulumi:"rdbStorageConnectionString"`
}

func (CacheRedisConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheRedisConfiguration)(nil)).Elem()
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput {
	return i.ToCacheRedisConfigurationOutputWithContext(context.Background())
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationOutputWithContext(ctx context.Context) CacheRedisConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationOutput)
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return i.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationOutput).ToCacheRedisConfigurationPtrOutputWithContext(ctx)
}

// CacheRedisConfigurationPtrInput is an input type that accepts CacheRedisConfigurationArgs, CacheRedisConfigurationPtr and CacheRedisConfigurationPtrOutput values.
// You can construct a concrete instance of `CacheRedisConfigurationPtrInput` via:
//
//          CacheRedisConfigurationArgs{...}
//
//  or:
//
//          nil
type CacheRedisConfigurationPtrInput interface {
	pulumi.Input

	ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput
	ToCacheRedisConfigurationPtrOutputWithContext(context.Context) CacheRedisConfigurationPtrOutput
}

type cacheRedisConfigurationPtrType CacheRedisConfigurationArgs

func CacheRedisConfigurationPtr(v *CacheRedisConfigurationArgs) CacheRedisConfigurationPtrInput {
	return (*cacheRedisConfigurationPtrType)(v)
}

func (*cacheRedisConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRedisConfiguration)(nil)).Elem()
}

func (i *cacheRedisConfigurationPtrType) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return i.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i *cacheRedisConfigurationPtrType) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationPtrOutput)
}

type CacheRedisConfigurationOutput struct{ *pulumi.OutputState }

func (CacheRedisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheRedisConfiguration)(nil)).Elem()
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput {
	return o
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationOutputWithContext(ctx context.Context) CacheRedisConfigurationOutput {
	return o
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return o.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *CacheRedisConfiguration {
		return &v
	}).(CacheRedisConfigurationPtrOutput)
}
func (o CacheRedisConfigurationOutput) AofBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.AofBackupEnabled }).(pulumi.BoolPtrOutput)
}

func (o CacheRedisConfigurationOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.AofStorageConnectionString0 }).(pulumi.StringPtrOutput)
}

func (o CacheRedisConfigurationOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.AofStorageConnectionString1 }).(pulumi.StringPtrOutput)
}

// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
func (o CacheRedisConfigurationOutput) EnableAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.EnableAuthentication }).(pulumi.BoolPtrOutput)
}

// Returns the max number of connected clients at the same time.
func (o CacheRedisConfigurationOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.Maxclients }).(pulumi.IntPtrOutput)
}

// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxfragmentationmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxfragmentationmemoryReserved }).(pulumi.IntPtrOutput)
}

// The max-memory delta for this Redis instance. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxmemoryDelta() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxmemoryDelta }).(pulumi.IntPtrOutput)
}

// How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxmemoryReserved }).(pulumi.IntPtrOutput)
}

// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
func (o CacheRedisConfigurationOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.NotifyKeyspaceEvents }).(pulumi.StringPtrOutput)
}

// Is Backup Enabled? Only supported on Premium SKU's.
func (o CacheRedisConfigurationOutput) RdbBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.RdbBackupEnabled }).(pulumi.BoolPtrOutput)
}

// The Backup Frequency in Minutes. Only supported on Premium SKU's. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
func (o CacheRedisConfigurationOutput) RdbBackupFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.RdbBackupFrequency }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to create as a backup. Only supported for Premium SKU's.
func (o CacheRedisConfigurationOutput) RdbBackupMaxSnapshotCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.RdbBackupMaxSnapshotCount }).(pulumi.IntPtrOutput)
}

// The Connection String to the Storage Account. Only supported for Premium SKU's. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
func (o CacheRedisConfigurationOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.RdbStorageConnectionString }).(pulumi.StringPtrOutput)
}

type CacheRedisConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CacheRedisConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRedisConfiguration)(nil)).Elem()
}

func (o CacheRedisConfigurationPtrOutput) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return o
}

func (o CacheRedisConfigurationPtrOutput) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return o
}

func (o CacheRedisConfigurationPtrOutput) Elem() CacheRedisConfigurationOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) CacheRedisConfiguration { return *v }).(CacheRedisConfigurationOutput)
}

func (o CacheRedisConfigurationPtrOutput) AofBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AofBackupEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o CacheRedisConfigurationPtrOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString0
	}).(pulumi.StringPtrOutput)
}

func (o CacheRedisConfigurationPtrOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString1
	}).(pulumi.StringPtrOutput)
}

// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
func (o CacheRedisConfigurationPtrOutput) EnableAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAuthentication
	}).(pulumi.BoolPtrOutput)
}

// Returns the max number of connected clients at the same time.
func (o CacheRedisConfigurationPtrOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Maxclients
	}).(pulumi.IntPtrOutput)
}

// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxfragmentationmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxfragmentationmemoryReserved
	}).(pulumi.IntPtrOutput)
}

// The max-memory delta for this Redis instance. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryDelta() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxmemoryDelta
	}).(pulumi.IntPtrOutput)
}

// How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryPolicy
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxmemoryReserved
	}).(pulumi.IntPtrOutput)
}

// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
func (o CacheRedisConfigurationPtrOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NotifyKeyspaceEvents
	}).(pulumi.StringPtrOutput)
}

// Is Backup Enabled? Only supported on Premium SKU's.
func (o CacheRedisConfigurationPtrOutput) RdbBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RdbBackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// The Backup Frequency in Minutes. Only supported on Premium SKU's. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
func (o CacheRedisConfigurationPtrOutput) RdbBackupFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RdbBackupFrequency
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to create as a backup. Only supported for Premium SKU's.
func (o CacheRedisConfigurationPtrOutput) RdbBackupMaxSnapshotCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RdbBackupMaxSnapshotCount
	}).(pulumi.IntPtrOutput)
}

// The Connection String to the Storage Account. Only supported for Premium SKU's. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
func (o CacheRedisConfigurationPtrOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbStorageConnectionString
	}).(pulumi.StringPtrOutput)
}

type GetCachePatchSchedule struct {
	// the Weekday name for the patch item
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The Start Hour for maintenance in UTC
	StartHourUtc int `pulumi:"startHourUtc"`
}

type GetCacheRedisConfiguration struct {
	AofBackupEnabled            bool   `pulumi:"aofBackupEnabled"`
	AofStorageConnectionString0 string `pulumi:"aofStorageConnectionString0"`
	AofStorageConnectionString1 string `pulumi:"aofStorageConnectionString1"`
	// Specifies if authentication is enabled
	EnableAuthentication bool `pulumi:"enableAuthentication"`
	Maxclients           int  `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation.
	MaxfragmentationmemoryReserved int `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance.
	MaxmemoryDelta int `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached.
	MaxmemoryPolicy string `pulumi:"maxmemoryPolicy"`
	// The value in megabytes reserved for non-cache usage e.g. failover
	MaxmemoryReserved    int    `pulumi:"maxmemoryReserved"`
	NotifyKeyspaceEvents string `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKU's.
	RdbBackupEnabled bool `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKU's.
	RdbBackupFrequency int `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots that can be created as a backup.
	RdbBackupMaxSnapshotCount int `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKU's.
	RdbStorageConnectionString string `pulumi:"rdbStorageConnectionString"`
}

func init() {
	pulumi.RegisterOutputType(CachePatchScheduleOutput{})
	pulumi.RegisterOutputType(CachePatchScheduleArrayOutput{})
	pulumi.RegisterOutputType(CacheRedisConfigurationOutput{})
	pulumi.RegisterOutputType(CacheRedisConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GetCachePatchScheduleOutput{})
	pulumi.RegisterOutputType(GetCachePatchScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetCacheRedisConfigurationOutput{})
	pulumi.RegisterOutputType(GetCacheRedisConfigurationArrayOutput{})
}
