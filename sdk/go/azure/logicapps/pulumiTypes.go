// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ActionHttpRunAfter struct {
	// Specifies the name of the precedent HTTP Action.
	ActionName string `pulumi:"actionName"`
	// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include `Succeeded`, `Failed`, `Skipped` and `TimedOut`.
	ActionResult string `pulumi:"actionResult"`
}

// ActionHttpRunAfterInput is an input type that accepts ActionHttpRunAfterArgs and ActionHttpRunAfterOutput values.
// You can construct a concrete instance of `ActionHttpRunAfterInput` via:
//
//          ActionHttpRunAfterArgs{...}
type ActionHttpRunAfterInput interface {
	pulumi.Input

	ToActionHttpRunAfterOutput() ActionHttpRunAfterOutput
	ToActionHttpRunAfterOutputWithContext(context.Context) ActionHttpRunAfterOutput
}

type ActionHttpRunAfterArgs struct {
	// Specifies the name of the precedent HTTP Action.
	ActionName pulumi.StringInput `pulumi:"actionName"`
	// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include `Succeeded`, `Failed`, `Skipped` and `TimedOut`.
	ActionResult pulumi.StringInput `pulumi:"actionResult"`
}

func (ActionHttpRunAfterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionHttpRunAfter)(nil)).Elem()
}

func (i ActionHttpRunAfterArgs) ToActionHttpRunAfterOutput() ActionHttpRunAfterOutput {
	return i.ToActionHttpRunAfterOutputWithContext(context.Background())
}

func (i ActionHttpRunAfterArgs) ToActionHttpRunAfterOutputWithContext(ctx context.Context) ActionHttpRunAfterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionHttpRunAfterOutput)
}

// ActionHttpRunAfterArrayInput is an input type that accepts ActionHttpRunAfterArray and ActionHttpRunAfterArrayOutput values.
// You can construct a concrete instance of `ActionHttpRunAfterArrayInput` via:
//
//          ActionHttpRunAfterArray{ ActionHttpRunAfterArgs{...} }
type ActionHttpRunAfterArrayInput interface {
	pulumi.Input

	ToActionHttpRunAfterArrayOutput() ActionHttpRunAfterArrayOutput
	ToActionHttpRunAfterArrayOutputWithContext(context.Context) ActionHttpRunAfterArrayOutput
}

type ActionHttpRunAfterArray []ActionHttpRunAfterInput

func (ActionHttpRunAfterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionHttpRunAfter)(nil)).Elem()
}

func (i ActionHttpRunAfterArray) ToActionHttpRunAfterArrayOutput() ActionHttpRunAfterArrayOutput {
	return i.ToActionHttpRunAfterArrayOutputWithContext(context.Background())
}

func (i ActionHttpRunAfterArray) ToActionHttpRunAfterArrayOutputWithContext(ctx context.Context) ActionHttpRunAfterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionHttpRunAfterArrayOutput)
}

type ActionHttpRunAfterOutput struct{ *pulumi.OutputState }

func (ActionHttpRunAfterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionHttpRunAfter)(nil)).Elem()
}

func (o ActionHttpRunAfterOutput) ToActionHttpRunAfterOutput() ActionHttpRunAfterOutput {
	return o
}

func (o ActionHttpRunAfterOutput) ToActionHttpRunAfterOutputWithContext(ctx context.Context) ActionHttpRunAfterOutput {
	return o
}

// Specifies the name of the precedent HTTP Action.
func (o ActionHttpRunAfterOutput) ActionName() pulumi.StringOutput {
	return o.ApplyT(func(v ActionHttpRunAfter) string { return v.ActionName }).(pulumi.StringOutput)
}

// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include `Succeeded`, `Failed`, `Skipped` and `TimedOut`.
func (o ActionHttpRunAfterOutput) ActionResult() pulumi.StringOutput {
	return o.ApplyT(func(v ActionHttpRunAfter) string { return v.ActionResult }).(pulumi.StringOutput)
}

type ActionHttpRunAfterArrayOutput struct{ *pulumi.OutputState }

func (ActionHttpRunAfterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionHttpRunAfter)(nil)).Elem()
}

func (o ActionHttpRunAfterArrayOutput) ToActionHttpRunAfterArrayOutput() ActionHttpRunAfterArrayOutput {
	return o
}

func (o ActionHttpRunAfterArrayOutput) ToActionHttpRunAfterArrayOutputWithContext(ctx context.Context) ActionHttpRunAfterArrayOutput {
	return o
}

func (o ActionHttpRunAfterArrayOutput) Index(i pulumi.IntInput) ActionHttpRunAfterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionHttpRunAfter {
		return vs[0].([]ActionHttpRunAfter)[vs[1].(int)]
	}).(ActionHttpRunAfterOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionHttpRunAfterOutput{})
	pulumi.RegisterOutputType(ActionHttpRunAfterArrayOutput{})
}
